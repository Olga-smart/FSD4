import { IEventListener, PossibleEvents } from '../EventManager/EventManager';
import SliderOptions from './SliderOptions';
declare class Presenter implements IEventListener {
    private model;
    private view;
    private eventManager;
    onChange?: (leftValue: number, rightValue: number | undefined) => void;
    constructor(element: HTMLDivElement, options: Partial<SliderOptions>);
    inform<E extends keyof PossibleEvents>(eventType: E, data: PossibleEvents[E]): void;
    subscribe(listener: IEventListener): void;
    setLeftValue(value: number): this;
    setRightValue(value: number): this;
    setStep(value: number): this;
    setMin(value: number): this;
    setMax(value: number): this;
    toggleOrientation(): this;
    toggleRange(): this;
    toggleValueLabels(): this;
    toggleMinMaxLabels(): this;
    toggleScale(): this;
    setScaleIntervals(value: number): this;
    getValues(): SliderOptions;
    private initViewValues;
    private handleViewInputLeft;
    private handleModelSetLeft;
    private handleViewInputRight;
    private handleModelSetRight;
    private handleViewSetValue;
    private handleViewSetLeft;
    private handleViewSetRight;
    private passLeftValueToView;
    private passRightValueToView;
    private updateViewInput;
    private handleViewSetLeftFromOutside;
    private handleViewSetRightFromOutside;
    private handleViewSetMin;
    private handleModelSetMin;
    private handleViewSetMax;
    private handleModelSetMax;
    private handleViewSetStep;
    private handleViewToggleOrientation;
    private handleViewToggleRange;
    private handleModelToggleRange;
    private handleModelSetStep;
    private handleViewToggleScale;
    private handleViewSetScaleIntervals;
    private handleViewAddValueLabels;
    private handleViewAddMinMaxLabels;
}
export default Presenter;
//# sourceMappingURL=Presenter.d.ts.map