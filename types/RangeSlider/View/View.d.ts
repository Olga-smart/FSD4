import BaseElement from './BaseElement/BaseElement';
import { IEventListener, PossibleEvents } from '../EventManager/EventManager';
declare type ViewOptions = {
    minMaxLabels: boolean;
    valueLabels: boolean;
    vertical: boolean;
    range: boolean;
    scale: boolean;
    scaleIntervals: number;
};
declare class View extends BaseElement<'div'> implements IEventListener {
    private static defaults;
    private eventManager;
    private slider;
    private track;
    private range;
    private input;
    private thumbLeft;
    private thumbRight?;
    private scale?;
    private scaleIntervals;
    private minLabel?;
    private maxLabel?;
    private valueLabelLeft?;
    private valueLabelRight?;
    private valueLabelCommon?;
    private vertical?;
    private labelsContainer?;
    constructor(component: HTMLDivElement, options?: Partial<ViewOptions>);
    subscribe(listener: IEventListener): void;
    inform<E extends keyof PossibleEvents>(eventType: E, data: PossibleEvents[E]): void;
    setMinValue(value: number): void;
    setMaxValue(value: number): void;
    setLeftValue(value: number, percent: number): void;
    setRightValue(value: number, percent: number): void;
    updateInput(value1: number, value2?: number | null): void;
    addScale(min: number, max: number): void;
    removeScale(): void;
    setScaleIntervals(value: number): void;
    getScaleIntervals(): number;
    fixLabelsContainerWidthForVertical(): void;
    fixLabelsContainerHeightForHorizontal(): void;
    toggleOrientation(): void;
    toggleRange(): void;
    toggleValueLabels(): void;
    toggleMinMaxLabels(): void;
    hasLabels(): boolean;
    hasScale(): boolean;
    hasMinMaxLabels(): boolean;
    hasValueLabels(): boolean;
    isRange(): boolean;
    isVertical(): boolean;
    getTrackLength(): number;
    getOptions(): ViewOptions;
    mergeLabels(): void;
    splitLabels(): void;
    hideMinLabel(): void;
    showMinLabel(): void;
    hideMaxLabel(): void;
    showMaxLabel(): void;
    getDistanceBetweenValueLabels(): number | undefined;
    getDistanceBetweenLeftValueLabelAndMinLabel(): number | undefined;
    getDistanceBetweenLeftValueLabelAndMaxLabel(): number | undefined;
    getDistanceBetweenRightValueLabelAndMaxLabel(): number | undefined;
    private static validate;
    private initOptionalFields;
    private subscribeToSubviews;
    private render;
    private destroy;
    private handleLeftInput;
    private handleRightInput;
    private getThumbIndent;
    private handleScaleOrTrackClick;
    private whichThumbIsNearer;
    private addSmoothTransition;
    private removeSmoothTransition;
    private collectLabels;
    private getDistanceBetweenTwoLabels;
}
export default View;
//# sourceMappingURL=View.d.ts.map