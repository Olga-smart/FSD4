(self.webpackChunk=self.webpackChunk||[]).push([[906],{52283:(e,t,i)=>{"use strict";i.d(t,{Z:()=>a});const a=class{constructor(e,t){this.component=document.createElement(e),t&&(this.component.className=t)}static createComponent(e,t){const i=document.createElement(e);return t&&(i.className=t),i}getComponent(){return this.component}getBoundingClientRect(){return this.component.getBoundingClientRect()}getWidth(){return this.component.offsetWidth}getHeight(){return this.component.offsetHeight}setIndent(e,t){"number"==typeof t&&(this.component.style[e]=`${t}%`),"string"==typeof t&&(this.component.style[e]=t)}remove(){this.component.remove()}}},38004:(e,t,i)=>{"use strict";i(83875);class a{constructor(){this.listeners=[]}subscribe(e){this.listeners.push(e)}unsubscribe(e){this.listeners=this.listeners.filter((t=>t!==e))}notify(e,t){0!==this.listeners.length&&this.listeners.forEach((i=>i.inform(e,t)))}}class s{constructor(e){this.eventManager=new a;const t=s.validate(Object.assign(Object.assign({},s.defaults),e));this.min=t.min,this.max=t.max,this.leftValue=t.leftValue,this.step=t.step,t.range?(this.rightValue=t.rightValue,this.range=!0):this.range=!1}static validate(e){let t=Object.assign({},e);return(()=>{const i=i=>{typeof e[i]!=typeof s.defaults[i]&&delete t[i]};i("min"),i("max"),i("leftValue"),i("rightValue"),i("range"),i("step")})(),t=Object.assign(Object.assign({},s.defaults),t),t.min>t.max&&([t.min,t.max]=[t.max,t.min]),void 0!==t.rightValue&&(t.leftValue>t.rightValue&&([t.leftValue,t.rightValue]=[t.rightValue,t.leftValue]),t.rightValue>t.max&&(t.rightValue=t.max)),t.leftValue<t.min&&(t.leftValue=t.min),t.leftValue>t.max&&(t.leftValue=t.max),t.step>Math.abs(t.max-t.min)&&(t.step=Math.abs(t.max-t.min)),t}subscribe(e){this.eventManager.subscribe(e)}setLeftValue(e){e<this.min?this.leftValue=this.min:(this.isRange()||(this.leftValue=Math.min(e,this.max)),this.isRange()&&void 0!==this.rightValue&&(this.leftValue=Math.min(e,this.rightValue)),this.leftValue=this.fitToStep(this.leftValue)),this.eventManager.notify("modelSetLeft",null)}setRightValue(e=this.max){this.isRange()&&(e>this.max?this.rightValue=this.max:this.rightValue=Math.max(e,this.leftValue),this.rightValue=this.fitToStep(this.rightValue),this.eventManager.notify("modelSetRight",null))}setLeftValueFromPx(e,t){const i=this.convertPxToValue(e,t);this.setLeftValue(i)}setRightValueFromPx(e,t){const i=this.convertPxToValue(e,t);this.setRightValue(i)}removeRightValue(){this.rightValue=void 0}setMin(e){e>this.leftValue||(this.min=e,this.eventManager.notify("modelSetMin",null))}setMax(e){!this.isRange()&&e<this.leftValue||this.isRange()&&void 0!==this.rightValue&&e<this.rightValue||(this.max=e,this.eventManager.notify("modelSetMax",null))}setStep(e){e<=0||e>Math.abs(this.max-this.min)||(this.step=e,this.eventManager.notify("modelSetStep",null))}toggleRange(){this.range=!this.range,this.eventManager.notify("modelToggleRange",null)}getMin(){return this.min}getMax(){return this.max}getLeftValue(){return this.leftValue}getRightValue(){return this.rightValue}getStep(){return this.step}isRange(){return this.range}getOptions(){return{min:this.min,max:this.max,leftValue:this.leftValue,rightValue:this.rightValue,step:this.step,range:this.range}}convertValueToPercent(e){let t=(e-this.min)/(this.max-this.min)*100;return t=s.removeCalcInaccuracy(t),t}convertPxToValue(e,t){const i=100*e/t;let a=(this.max-this.min)*(i/100)+this.min;return a=this.fitToStep(a),a}static isTwoLabelsClose(e){return e<3}static removeCalcInaccuracy(e){return Number(e.toFixed(10))}fitToStep(e){let t=Math.round(e/this.step)*this.step;return t=s.removeCalcInaccuracy(t),t}}s.defaults={min:0,max:100,leftValue:25,rightValue:75,step:1,range:!0};const n=s;var l=i(52283);class h extends l.Z{constructor(){super("div","range-slider__track"),this.eventManager=new a,this.attachEventHandlers()}subscribe(e){this.eventManager.subscribe(e)}append(...e){this.component.append(...e)}handleClick(e){if(e.currentTarget instanceof HTMLElement){const t=e.clientX-e.currentTarget.getBoundingClientRect().left,i=e.clientY-e.currentTarget.getBoundingClientRect().top;this.eventManager.notify("trackClick",[t,i])}}attachEventHandlers(){this.component.addEventListener("click",this.handleClick.bind(this))}}const r=h;class o extends l.Z{constructor(){super("div","range-slider__range")}setWidth(e){this.component.style.width=`${e}%`}setHeight(e){this.component.style.height=`${e}%`}resetWidth(){this.component.style.width="unset"}resetHeight(){this.component.style.height="unset"}resetTopIndent(){this.component.style.top="unset"}}const u=o;class d extends l.Z{constructor(e="left"){super("div",`range-slider__thumb range-slider__thumb_${e}`),this.eventManager=new a,this.type=e,this.attachEventHandlers()}subscribe(e){this.eventManager.subscribe(e)}getLeftIndent(){return this.component.style.left}getTopIndent(){return this.component.style.top}setZIndex(e){this.component.style.zIndex=`${e}`}static handlePointerOver(e){e.currentTarget instanceof HTMLElement&&e.currentTarget.classList.add("range-slider__thumb_hover")}static handlePointerOut(e){e.currentTarget instanceof HTMLElement&&e.currentTarget.classList.remove("range-slider__thumb_hover")}static handlePointerUp(e){e.currentTarget instanceof HTMLElement&&e.currentTarget.classList.remove("range-slider__thumb_active")}static handleDragStart(){return!1}handlePointerDown(e){if(e.currentTarget instanceof HTMLElement){e.currentTarget.classList.add("range-slider__thumb_active"),e.currentTarget.setPointerCapture(e.pointerId),e.preventDefault();const t=e.clientX-e.currentTarget.getBoundingClientRect().left,i=e.clientY-e.currentTarget.getBoundingClientRect().top,a=e=>{const a=e.clientX-t,s=e.clientY-i;"left"===this.type&&this.eventManager.notify("leftThumbChangePosition",[a,s]),"right"===this.type&&this.eventManager.notify("rightThumbChangePosition",[a,s])},s=()=>{this.component.removeEventListener("pointermove",a),this.component.removeEventListener("pointerup",s)};this.component.addEventListener("pointermove",a),this.component.addEventListener("pointerup",s)}}attachEventHandlers(){this.component.addEventListener("pointerover",d.handlePointerOver),this.component.addEventListener("pointerout",d.handlePointerOut),this.component.addEventListener("pointerdown",this.handlePointerDown.bind(this)),this.component.addEventListener("pointerup",d.handlePointerUp),this.component.addEventListener("dragstart",d.handleDragStart)}}const g=d;class c extends l.Z{constructor(e,t,i=4){super("div","range-slider__scale"),this.eventManager=new a,this.intervals=[],this.values=[],this.valueElements=[],this.createIntervals(i),this.addMarksInIntervals(i),this.addValues(e,t,i),this.attachEventHandlers()}subscribe(e){this.eventManager.subscribe(e)}fitWidthForVertical(e=3){let t=0;this.valueElements.forEach((e=>{e.offsetWidth>t&&(t=e.offsetWidth)})),this.component.style.paddingRight=`${t+e}px`}fitHeightForHorizontal(e=3){let t=0;this.valueElements.forEach((e=>{e.offsetHeight>t&&(t=e.offsetHeight)})),this.component.style.paddingBottom=`${t+e}px`}handleSwitchFromHorizontalToVertical(){this.component.style.paddingBottom="unset",this.fitWidthForVertical()}handleSwitchFromVerticalToHorizontal(){this.component.style.paddingRight="unset",this.fitHeightForHorizontal()}createIntervals(e){const t=new DocumentFragment;for(let i=0;i<e;i+=1)this.intervals[i]=l.Z.createComponent("div","range-slider__scale-interval"),t.append(this.intervals[i]);this.component.append(t)}addMarksInIntervals(e){this.intervals.forEach((t=>{const i=new DocumentFragment;e<29&&i.append(l.Z.createComponent("span","range-slider__scale-mark")),e<15&&i.append(l.Z.createComponent("span","range-slider__scale-mark")),e<8&&i.append(l.Z.createComponent("span","range-slider__scale-mark")),e<5&&i.append(l.Z.createComponent("span","range-slider__scale-mark")),t.append(i)}))}addValues(e,t,i){this.values[0]=e;const a=(t-e)/i;let s=0;0!==Math.round(i/(t-e))&&(s=Math.round(i/(t-e)).toString().length);for(let t=1;t<i;t+=1)this.values[t]=Number((t*a+e).toFixed(s));this.values.push(t);const n=l.Z.createComponent("span","range-slider__scale-interval-value range-slider__scale-interval-value_min");n.textContent=`${this.values[0]}`,this.intervals[0].append(n),this.valueElements.push(n);for(let e=1;e<this.values.length;e+=1){const t=l.Z.createComponent("span","range-slider__scale-interval-value");t.textContent=`${this.values[e]}`,this.intervals[e-1].append(t),this.valueElements.push(t)}}handleClick(e){if(e.currentTarget instanceof HTMLElement){const t=e.clientX-e.currentTarget.getBoundingClientRect().left,i=e.clientY-e.currentTarget.getBoundingClientRect().top;this.eventManager.notify("scaleClick",[t,i])}}attachEventHandlers(){this.component.addEventListener("click",this.handleClick.bind(this))}}const v=c;class m extends l.Z{constructor(){super("div","range-slider__labels-container")}append(...e){this.component.append(...e)}fixWidthForVertical(e,t=4){let i=0;e.forEach((e=>{e.offsetWidth>i&&(i=e.offsetWidth)})),this.component.style.paddingLeft=`${i+t}px`}fixHeightForHorizontal(e,t=4){let i=0;e.forEach((e=>{e.offsetHeight>i&&(i=e.offsetHeight)})),this.component.style.paddingTop=`${i+t}px`}}const b=m;class p extends l.Z{constructor(e){super("div",e)}setOpacity(e){this.component.style.opacity=`${e}`}setValue(e){this.component.textContent=`${e}`}getValue(){return Number(this.component.textContent)}getLeftIndent(){return this.component.style.left}getTopIndent(){return this.component.style.top}}const f=p;class L extends l.Z{constructor(){super("input","range-slider__input"),this.setAttributes()}setValue(e,t=null){this.component.value=null===t?`${e}`:`${e} - ${t}`}setAttributes(){this.component.type="text",this.component.tabIndex=-1,this.component.readOnly=!0}}const w=L;class x extends l.Z{constructor(e){super("form","panel"),this.view=e,this.min=l.Z.createComponent("input","panel__min panel__input"),this.max=l.Z.createComponent("input","panel__max panel__input"),this.step=l.Z.createComponent("input","panel__step panel__input"),this.from=l.Z.createComponent("input","panel__from panel__input"),this.to=l.Z.createComponent("input","panel__to panel__input"),this.vertical=l.Z.createComponent("input","panel__vertical panel__checkbox"),this.range=l.Z.createComponent("input","panel__range panel__checkbox"),this.scale=l.Z.createComponent("input","panel__scale panel__checkbox"),this.scaleIntervals=l.Z.createComponent("input","panel__scale-intervals panel__input"),this.valueLabels=l.Z.createComponent("input","panel__value-labels panel__checkbox"),this.minMaxLabels=l.Z.createComponent("input","panel__min-max-labels panel__checkbox"),this.render(),this.attachEventHandlers()}setValues(e){this.min.value=`${e.min}`,this.max.value=`${e.max}`,this.step.value=`${e.step}`,this.from.value=`${e.from}`,this.to.value=null!==e.to?`${e.to}`:"",this.vertical.checked=e.vertical,this.range.checked=e.range,this.scale.checked=e.scale,this.scaleIntervals.value=`${e.scaleIntervals}`,this.valueLabels.checked=e.valueLabels,this.minMaxLabels.checked=e.minMaxLabels,this.setCheckMarks(),this.setAttributes(e)}updateFrom(e){this.from.value=`${e}`,this.updateAttributesAfterFromChange()}updateTo(e){this.to.value=`${e}`,this.updateAttributesAfterToChange()}updateStep(e){this.step.value=`${e}`,this.updateAttributesAfterStepChange()}updateMin(e){this.min.value=`${e}`,this.updateAttributesAfterMinChange()}updateMax(e){this.max.value=`${e}`,this.updateAttributesAfterMaxChange()}updateScaleIntervals(e){this.scaleIntervals.value=`${e}`}static addLabel(e,t,i){const a=l.Z.createComponent("label","panel__label");return a.textContent=t,i&&a.classList.add(i),a.append(e),a}static calcStepMin(e){if(Number.isInteger(e))return 1;let t="1";for(let i=e.toString().split(".")[1].length;i>1;i-=1)t=`0${t}`;return t=`0.${t}`,Number(t)}static toggleCheckbox(e){const t=e.closest("label");null==t||t.classList.toggle("panel__label_for-checkbox_checked")}render(){this.setTypes(),this.component.append(x.addLabel(this.range,"Range:","panel__label_for-checkbox"),x.addLabel(this.vertical,"Vertical:","panel__label_for-checkbox"),x.addLabel(this.valueLabels,"Value labels:","panel__label_for-checkbox"),x.addLabel(this.minMaxLabels,"Min&max labels:","panel__label_for-checkbox"),x.addLabel(this.scale,"Scale:","panel__label_for-checkbox"),x.addLabel(this.scaleIntervals,"Scale intervals:"),x.addLabel(this.min,"Min:"),x.addLabel(this.max,"Max:"),x.addLabel(this.from,"From:"),x.addLabel(this.to,"To:"),x.addLabel(this.step,"Step:"))}setTypes(){this.min.type="number",this.max.type="number",this.step.type="number",this.from.type="number",this.to.type="number",this.vertical.type="checkbox",this.range.type="checkbox",this.scale.type="checkbox",this.scaleIntervals.type="number",this.valueLabels.type="checkbox",this.minMaxLabels.type="checkbox"}setAttributes(e){this.from.min=`${e.min}`,this.from.max=e.range?`${e.to}`:`${e.max}`,this.to.min=`${e.from}`,this.to.max=`${e.max}`,this.from.step=`${e.step}`,this.to.step=`${e.step}`,this.min.step=`${e.step}`,this.max.step=`${e.step}`,this.min.max=`${e.from}`,this.max.min=e.range?`${e.to}`:`${e.from}`,this.step.min=`${x.calcStepMin(e.step)}`,this.step.step=this.step.min,this.step.max=`${Math.abs(e.max-e.min)}`,e.range||(this.to.disabled=!0),this.scaleIntervals.min="1",e.scale||(this.scaleIntervals.disabled=!0)}setCheckMarks(){[this.vertical,this.range,this.scale,this.valueLabels,this.minMaxLabels].forEach((e=>{e.checked&&x.toggleCheckbox(e)}))}updateAttributesAfterFromChange(){this.min.max=this.from.value,this.view.isRange()&&(this.to.min=this.from.value),this.view.isRange()||(this.max.min=this.from.value)}updateAttributesAfterToChange(){this.from.max=this.to.value,this.max.min=this.to.value}updateAttributesAfterStepChange(){this.step.min=`${x.calcStepMin(Number(this.step.value))}`,this.step.step=`${x.calcStepMin(Number(this.step.value))}`,this.from.step=this.step.value,this.to.step=this.step.value,this.min.step=this.step.value,this.max.step=this.step.value}updateAttributesAfterMinChange(){this.from.min=this.min.value}updateAttributesAfterMaxChange(){this.view.isRange()||(this.from.max=this.max.value),this.view.isRange()&&(this.to.max=this.max.value)}handleMinChange(){Number(this.min.value)>Number(this.from.value)&&(this.min.value=this.from.value),this.view.setMinFromOutside(Number(this.min.value)),this.step.max=`${Math.abs(Number(this.max.value)-Number(this.min.value))}`,this.updateAttributesAfterMinChange()}handleMaxChange(){this.view.isRange()||Number(this.max.value)<Number(this.from.value)&&(this.max.value=this.from.value),this.view.isRange()&&Number(this.max.value)<Number(this.to.value)&&(this.max.value=this.to.value),this.view.setMaxFromOutside(Number(this.max.value)),this.step.max=`${Math.abs(Number(this.max.value)-Number(this.min.value))}`,this.updateAttributesAfterMaxChange()}handleStepChange(){Number(this.step.value)>Number(this.step.max)&&(this.step.value=this.step.max),Number(this.step.value)<=0&&(this.step.value=this.step.min),this.view.setStepFromOutside(Number(this.step.value)),this.updateAttributesAfterStepChange()}handleFromChange(){Number(this.from.value)>Number(this.from.max)&&(this.from.value=this.from.max),Number(this.from.value)<Number(this.from.min)&&(this.from.value=this.from.min),this.view.setLeftFromOutside(Number(this.from.value)),this.updateAttributesAfterFromChange()}handleToChange(){Number(this.to.value)>Number(this.to.max)&&(this.to.value=this.to.max),Number(this.to.value)<Number(this.to.min)&&(this.to.value=this.to.min),this.view.setRightFromOutside(Number(this.to.value)),this.updateAttributesAfterToChange()}handleVerticalChange(){this.view.toggleOrientation(),x.toggleCheckbox(this.vertical)}handleRangeChange(){this.view.toggleRange(),this.to.disabled=!this.to.disabled,this.range.checked?this.from.max=this.to.value:this.from.max=this.max.value,x.toggleCheckbox(this.range)}handleScaleChange(){this.view.toggleScale(),this.scaleIntervals.disabled=!this.scaleIntervals.disabled,x.toggleCheckbox(this.scale)}handleScaleIntervalsChange(){Number(this.scaleIntervals.value)<Number(this.scaleIntervals.min)&&(this.scaleIntervals.value=this.scaleIntervals.min),Number.isInteger(this.scaleIntervals.value)||(this.scaleIntervals.value=`${Math.floor(Number(this.scaleIntervals.value))}`),this.view.setScaleIntervals(Number(this.scaleIntervals.value))}handleValueLabelsChange(){this.view.toggleValueLabels(),x.toggleCheckbox(this.valueLabels)}handleMinMaxLabelsChange(){this.view.toggleMinMaxLabels(),x.toggleCheckbox(this.minMaxLabels)}attachEventHandlers(){this.min.addEventListener("change",this.handleMinChange.bind(this)),this.max.addEventListener("change",this.handleMaxChange.bind(this)),this.step.addEventListener("change",this.handleStepChange.bind(this)),this.from.addEventListener("change",this.handleFromChange.bind(this)),this.to.addEventListener("change",this.handleToChange.bind(this)),this.vertical.addEventListener("change",this.handleVerticalChange.bind(this)),this.range.addEventListener("change",this.handleRangeChange.bind(this)),this.scale.addEventListener("change",this.handleScaleChange.bind(this)),this.scaleIntervals.addEventListener("change",this.handleScaleIntervalsChange.bind(this)),this.valueLabels.addEventListener("change",this.handleValueLabelsChange.bind(this)),this.minMaxLabels.addEventListener("change",this.handleMinMaxLabelsChange.bind(this))}}class V extends l.Z{constructor(e,t=V.defaults){var i;super("div"),this.component=e,this.eventManager=new a;const s=V.validate(Object.assign(Object.assign({},V.defaults),t));this.slider=l.Z.createComponent("div","range-slider__slider"),this.track=new r,this.track.subscribe(this),this.range=new u,this.thumbLeft=new g("left"),this.thumbLeft.subscribe(this),this.input=new w,s.range&&(this.thumbRight=new g("right"),this.thumbRight.subscribe(this)),this.scaleIntervals=null!==(i=s.scaleIntervals)&&void 0!==i?i:4,s.scale&&(this.scale=new v(0,100,this.getScaleIntervals())),(s.minMaxLabels||s.valueLabels)&&(this.labelsContainer=new b,s.minMaxLabels&&(this.minLabel=new f("range-slider__min-max-label range-slider__min-max-label_left"),this.maxLabel=new f("range-slider__min-max-label range-slider__min-max-label_right")),s.valueLabels&&(this.valueLabelLeft=new f("range-slider__value-label range-slider__value-label_left"),s.range&&(this.valueLabelRight=new f("range-slider__value-label range-slider__value-label_right"),this.valueLabelCommon=new f("range-slider__value-label range-slider__value-label_common")))),s.vertical&&(this.vertical=!0),s.panel&&(this.panel=new x(this)),this.render()}static validate(e){let t=Object.assign({},e);return(()=>{const i=i=>{typeof e[i]!=typeof V.defaults[i]&&delete t[i]};i("range"),i("minMaxLabels"),i("valueLabels"),i("vertical"),i("scale"),i("scaleIntervals"),i("panel")})(),t=Object.assign(Object.assign({},V.defaults),t),void 0!==t.scaleIntervals&&(t.scaleIntervals<1&&(t.scaleIntervals=1),Number.isInteger(t.scaleIntervals)||(t.scaleIntervals=Math.floor(t.scaleIntervals))),t}subscribe(e){this.eventManager.subscribe(e)}inform(e,t){switch(e){case"scaleClick":case"trackClick":if(Array.isArray(t)){const e=t[0],i=t[1];this.handleScaleOrTrackClick(e,i)}break;case"leftThumbChangePosition":if(Array.isArray(t)){const e=t[0],i=t[1];this.handleLeftInput(e,i)}break;case"rightThumbChangePosition":if(Array.isArray(t)){const e=t[0],i=t[1];this.handleRightInput(e,i)}}}setMinValue(e){var t;null===(t=this.minLabel)||void 0===t||t.setValue(e)}setMaxValue(e){var t;null===(t=this.maxLabel)||void 0===t||t.setValue(e)}setLeftValue(e,t){var i,a,s,n;this.vertical||(this.thumbLeft.setIndent("left",t),this.thumbLeft.setZIndex(100===t?100:3),this.isRange()?this.range.setIndent("left",t):this.range.setWidth(t),null===(i=this.valueLabelLeft)||void 0===i||i.setIndent("left",`${t}%`)),this.vertical&&(this.thumbLeft.setIndent("top",100-t),this.thumbLeft.setZIndex(100===t?100:3),this.isRange()?this.range.setIndent("bottom",t):this.range.setHeight(t),null===(a=this.valueLabelLeft)||void 0===a||a.setIndent("top",100-t+"%")),this.valueLabelLeft&&(this.valueLabelLeft.setValue(e),this.isRange()&&(null===(s=this.valueLabelCommon)||void 0===s||s.setValue(`${e} - ${null===(n=this.valueLabelRight)||void 0===n?void 0:n.getValue()}`))),this.eventManager.notify("viewSetLeft",null)}setRightValue(e,t){var i,a,s,n,l,h;this.vertical||(null===(i=this.thumbRight)||void 0===i||i.setIndent("left",t),this.range.setIndent("right",100-t),null===(a=this.valueLabelRight)||void 0===a||a.setIndent("left",`${t}%`)),this.vertical&&(null===(s=this.thumbRight)||void 0===s||s.setIndent("top",100-t),this.range.setIndent("top",100-t),null===(n=this.valueLabelRight)||void 0===n||n.setIndent("top",100-t+"%")),this.valueLabelRight&&(this.valueLabelRight.setValue(e),null===(l=this.valueLabelCommon)||void 0===l||l.setValue(`${null===(h=this.valueLabelLeft)||void 0===h?void 0:h.getValue()} - ${e}`)),this.eventManager.notify("viewSetRight",null)}updateInput(e,t=null){this.input.setValue(e,t)}handleLeftInput(e,t){if(!this.vertical){const t=e-this.track.getBoundingClientRect().left;this.eventManager.notify("viewInputLeft",t)}if(this.vertical){const e=t-this.track.getBoundingClientRect().top,i=this.getTrackLength()-e;this.eventManager.notify("viewInputLeft",i)}}handleRightInput(e,t){if(!this.vertical){const t=e-this.track.getBoundingClientRect().left;this.eventManager.notify("viewInputRight",t)}if(this.vertical){const e=t-this.track.getBoundingClientRect().top,i=this.getTrackLength()-e;this.eventManager.notify("viewInputRight",i)}}addScale(e,t){this.scale=new v(e,t,this.getScaleIntervals()),this.slider.after(this.scale.getComponent()),this.scale.subscribe(this),this.vertical||this.scale.fitHeightForHorizontal(),this.vertical&&this.scale.fitWidthForVertical()}removeScale(){var e;null===(e=this.scale)||void 0===e||e.getComponent().remove(),this.scale=void 0}getScaleIntervals(){return this.scaleIntervals||0}handleScaleOrTrackClick(e,t){this.isRange()||(this.addSmoothTransition("left"),this.vertical?this.eventManager.notify("viewInputLeft",this.getTrackLength()-t):this.eventManager.notify("viewInputLeft",e),setTimeout((()=>{this.removeSmoothTransition("left")}),1e3)),this.isRange()&&("left"===this.whichThumbIsNearer(e,t)?(this.addSmoothTransition("left"),this.vertical?this.eventManager.notify("viewInputLeft",this.getTrackLength()-t):this.eventManager.notify("viewInputLeft",e),setTimeout((()=>{this.removeSmoothTransition("left")}),1e3)):(this.addSmoothTransition("right"),this.vertical?this.eventManager.notify("viewInputRight",this.getTrackLength()-t):this.eventManager.notify("viewInputRight",e),setTimeout((()=>{this.removeSmoothTransition("right")}),1e3)))}fixLabelsContainerWidthForVertical(){var e;const t=this.collectLabels();null===(e=this.labelsContainer)||void 0===e||e.fixWidthForVertical(t)}fixLabelsContainerHeightForHorizontal(){var e;const t=this.collectLabels();null===(e=this.labelsContainer)||void 0===e||e.fixHeightForHorizontal(t)}setPanelValues(e){var t;null===(t=this.panel)||void 0===t||t.setValues(e)}updatePanelFrom(e){var t;null===(t=this.panel)||void 0===t||t.updateFrom(e)}updatePanelTo(e){var t;null===(t=this.panel)||void 0===t||t.updateTo(e)}updatePanelScaleIntervals(e){var t;null===(t=this.panel)||void 0===t||t.updateScaleIntervals(e)}updatePanelStep(e){var t;null===(t=this.panel)||void 0===t||t.updateStep(e)}updatePanelMin(e){var t;null===(t=this.panel)||void 0===t||t.updateMin(e)}updatePanelMax(e){var t;null===(t=this.panel)||void 0===t||t.updateMax(e)}setLeftFromOutside(e){this.eventManager.notify("viewSetLeftFromOutside",e)}setRightFromOutside(e){this.eventManager.notify("viewSetRightFromOutside",e)}setMinFromOutside(e){this.eventManager.notify("viewSetMin",e)}setMaxFromOutside(e){this.eventManager.notify("viewSetMax",e)}setStepFromOutside(e){this.eventManager.notify("viewSetStep",e)}toggleOrientation(){var e,t,i,a,s,n,l,h,r,o;this.vertical=!this.vertical,this.destroy(),this.render(),this.vertical&&(this.thumbLeft.setIndent("left",0),null===(e=this.thumbRight)||void 0===e||e.setIndent("left",0),this.range.setIndent("left",0),this.range.setIndent("right",0),this.range.resetTopIndent(),this.range.resetWidth(),null===(t=this.valueLabelLeft)||void 0===t||t.setIndent("left","unset"),null===(i=this.valueLabelRight)||void 0===i||i.setIndent("left","unset"),null===(a=this.valueLabelCommon)||void 0===a||a.setIndent("left","unset"),this.hasLabels()&&this.fixLabelsContainerWidthForVertical(),null===(s=this.scale)||void 0===s||s.handleSwitchFromHorizontalToVertical()),this.vertical||(this.component.classList.remove("range-slider_vertical"),this.thumbLeft.setIndent("top",0),null===(n=this.thumbRight)||void 0===n||n.setIndent("top",0),this.range.setIndent("bottom",0),this.range.setIndent("top",0),this.range.resetHeight(),null===(l=this.valueLabelLeft)||void 0===l||l.setIndent("top","unset"),null===(h=this.valueLabelRight)||void 0===h||h.setIndent("top","unset"),null===(r=this.valueLabelCommon)||void 0===r||r.setIndent("top","unset"),this.hasLabels()&&this.fixLabelsContainerHeightForHorizontal(),null===(o=this.scale)||void 0===o||o.handleSwitchFromVerticalToHorizontal()),this.eventManager.notify("viewToggleOrientation",null)}toggleRange(){const e=!this.isRange();this.destroy(),e&&(this.thumbRight=new g("right"),this.thumbRight.subscribe(this),this.valueLabelLeft&&(this.valueLabelRight=new f("range-slider__value-label range-slider__value-label_right"),this.valueLabelCommon=new f("range-slider__value-label range-slider__value-label_common")),this.vertical||this.range.resetWidth(),this.vertical&&this.range.resetHeight()),e||(this.thumbRight=void 0,this.valueLabelRight=void 0,this.valueLabelCommon=void 0,this.vertical&&this.range.resetTopIndent()),this.render(),this.eventManager.notify("viewToggleRange",null)}toggleScale(){this.eventManager.notify("viewToggleScale",null)}setScaleIntervals(e){e<=0||(this.scaleIntervals=Math.floor(e),this.eventManager.notify("viewSetScaleIntervals",null))}toggleValueLabels(){var e,t,i,a,s;if(this.valueLabelLeft)return this.valueLabelLeft.remove(),null===(e=this.valueLabelRight)||void 0===e||e.remove(),null===(t=this.valueLabelCommon)||void 0===t||t.remove(),this.valueLabelLeft=void 0,this.valueLabelRight=void 0,this.valueLabelCommon=void 0,this.minLabel&&(this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical()),void(this.minLabel||(null===(i=this.labelsContainer)||void 0===i||i.remove(),this.labelsContainer=void 0));this.valueLabelLeft||(this.valueLabelLeft=new f("range-slider__value-label range-slider__value-label_left"),this.labelsContainer||(this.labelsContainer=new b,this.slider.before(this.labelsContainer.getComponent())),this.labelsContainer.append(this.valueLabelLeft.getComponent()),this.isRange()&&(this.valueLabelRight=new f("range-slider__value-label range-slider__value-label_right"),this.valueLabelCommon=new f("range-slider__value-label range-slider__value-label_common"),this.labelsContainer.append(null===(a=this.valueLabelRight)||void 0===a?void 0:a.getComponent(),null===(s=this.valueLabelCommon)||void 0===s?void 0:s.getComponent())),this.eventManager.notify("viewAddValueLabels",null),this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical())}toggleMinMaxLabels(){var e,t;if(this.minLabel)return this.minLabel.remove(),null===(e=this.maxLabel)||void 0===e||e.remove(),this.minLabel=void 0,this.maxLabel=void 0,this.valueLabelLeft&&(this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical()),void(this.valueLabelLeft||(null===(t=this.labelsContainer)||void 0===t||t.remove(),this.labelsContainer=void 0));this.minLabel||(this.minLabel=new f("range-slider__min-max-label range-slider__min-max-label_left"),this.maxLabel=new f("range-slider__min-max-label range-slider__min-max-label_right"),this.labelsContainer||(this.labelsContainer=new b,this.slider.before(this.labelsContainer.getComponent())),this.labelsContainer.append(this.minLabel.getComponent(),this.maxLabel.getComponent()),this.eventManager.notify("viewAddMinMaxLabels",null),this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical())}hasLabels(){return Boolean(this.valueLabelLeft||this.minLabel)}hasScale(){return Boolean(this.scale)}hasMinMaxLabels(){return Boolean(this.maxLabel)}hasValueLabels(){return Boolean(this.valueLabelLeft)}hasPanel(){return Boolean(this.panel)}isRange(){return Boolean(this.thumbRight)}isVertical(){return Boolean(this.vertical)}getTrackLength(){return this.isVertical()?this.track.getHeight():this.track.getWidth()}getOptions(){return{minMaxLabels:this.hasMinMaxLabels(),valueLabels:this.hasValueLabels(),vertical:this.isVertical(),range:this.isRange(),scale:this.hasScale(),scaleIntervals:this.getScaleIntervals(),panel:this.hasPanel()}}render(){var e,t,i;const a=new DocumentFragment;if(this.track.append(this.range.getComponent()),this.slider.append(this.track.getComponent(),this.thumbLeft.getComponent()),a.append(this.slider,this.input.getComponent()),this.isRange()&&this.thumbRight?this.slider.append(this.thumbRight.getComponent()):(this.vertical||this.range.setIndent("left",0),this.vertical&&this.range.setIndent("bottom",0)),this.minLabel&&this.maxLabel&&(null===(e=this.labelsContainer)||void 0===e||e.append(this.minLabel.getComponent(),this.maxLabel.getComponent())),this.valueLabelLeft&&(null===(t=this.labelsContainer)||void 0===t||t.append(this.valueLabelLeft.getComponent()),this.isRange()&&this.valueLabelRight&&this.valueLabelCommon&&(null===(i=this.labelsContainer)||void 0===i||i.append(this.valueLabelRight.getComponent(),this.valueLabelCommon.getComponent()))),this.labelsContainer&&this.slider.before(this.labelsContainer.getComponent()),this.vertical&&this.component.classList.add("range-slider_vertical"),this.panel){const e=l.Z.createComponent("div","range-slider__panel");e.append(this.panel.getComponent()),a.append(e)}this.scale&&this.slider.after(this.scale.getComponent()),this.component.append(a)}destroy(){this.labelsContainer&&[...this.labelsContainer.getComponent().children].forEach((e=>{e.remove()})),[...this.slider.children].forEach((e=>{e.remove()})),[...this.component.children].forEach((e=>{e.remove()}))}mergeLabels(){var e,t,i,a,s;if(null===(e=this.valueLabelLeft)||void 0===e||e.setOpacity(0),null===(t=this.valueLabelRight)||void 0===t||t.setOpacity(0),null===(i=this.valueLabelCommon)||void 0===i||i.setOpacity(1),!this.vertical&&this.thumbRight){const e=parseInt(this.thumbRight.getLeftIndent(),10)-parseInt(this.thumbLeft.getLeftIndent(),10);this.valueLabelLeft&&(null===(a=this.valueLabelCommon)||void 0===a||a.setIndent("left",`${parseInt(this.valueLabelLeft.getLeftIndent(),10)+e/2}%`))}if(this.vertical&&this.thumbRight){const e=parseInt(this.thumbRight.getTopIndent(),10)-parseInt(this.thumbLeft.getTopIndent(),10);this.valueLabelRight&&(null===(s=this.valueLabelCommon)||void 0===s||s.setIndent("top",parseInt(this.valueLabelRight.getTopIndent(),10)-e/2+"%"))}}splitLabels(){var e,t,i;null===(e=this.valueLabelCommon)||void 0===e||e.setOpacity(0),null===(t=this.valueLabelLeft)||void 0===t||t.setOpacity(1),null===(i=this.valueLabelRight)||void 0===i||i.setOpacity(1)}hideMinLabel(){var e;null===(e=this.minLabel)||void 0===e||e.setOpacity(0)}showMinLabel(){var e;null===(e=this.minLabel)||void 0===e||e.setOpacity(1)}hideMaxLabel(){var e;null===(e=this.maxLabel)||void 0===e||e.setOpacity(0)}showMaxLabel(){var e;null===(e=this.maxLabel)||void 0===e||e.setOpacity(1)}getDistanceBetweenTwoLabels(e,t){if(this.vertical)return e.getBoundingClientRect().top-t.getBoundingClientRect().bottom;const i=e.getBoundingClientRect().right;return t.getBoundingClientRect().left-i}getDistanceBetweenValueLabels(){if(this.valueLabelLeft&&this.valueLabelRight)return this.getDistanceBetweenTwoLabels(this.valueLabelLeft,this.valueLabelRight)}getDistanceBetweenLeftValueLabelAndMinLabel(){if(this.valueLabelLeft&&this.minLabel)return this.getDistanceBetweenTwoLabels(this.minLabel,this.valueLabelLeft)}getDistanceBetweenLeftValueLabelAndMaxLabel(){if(this.valueLabelLeft&&this.maxLabel)return this.getDistanceBetweenTwoLabels(this.valueLabelLeft,this.maxLabel)}getDistanceBetweenRightValueLabelAndMaxLabel(){if(this.valueLabelRight&&this.maxLabel)return this.getDistanceBetweenTwoLabels(this.valueLabelRight,this.maxLabel)}whichThumbIsNearer(e,t){var i;const a=this.thumbLeft.getBoundingClientRect(),s=null===(i=this.thumbRight)||void 0===i?void 0:i.getBoundingClientRect(),n=this.track.getBoundingClientRect();let l=0,h=0;if(!this.vertical&&s){const t=a.left+a.width/2-n.left,i=s.left+s.width/2-n.left;l=Math.abs(e-t),h=Math.abs(e-i)}if(this.vertical&&s){const e=a.top+a.height/2-n.top,i=s.top+s.height/2-n.top;l=Math.abs(t-e),h=Math.abs(t-i)}return l<=h?"left":"right"}addSmoothTransition(e="left"){var t,i,a;"left"===e&&(this.thumbLeft.getComponent().classList.add("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.add("range-slider__range_smooth-transition"),null===(t=this.valueLabelLeft)||void 0===t||t.getComponent().classList.add("range-slider__value-label_smooth-transition")),"right"===e&&(null===(i=this.thumbRight)||void 0===i||i.getComponent().classList.add("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.add("range-slider__range_smooth-transition"),null===(a=this.valueLabelRight)||void 0===a||a.getComponent().classList.add("range-slider__value-label_smooth-transition"))}removeSmoothTransition(e="left"){var t,i,a;"left"===e&&(this.thumbLeft.getComponent().classList.remove("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.remove("range-slider__range_smooth-transition"),null===(t=this.valueLabelLeft)||void 0===t||t.getComponent().classList.remove("range-slider__value-label_smooth-transition")),"right"===e&&(null===(i=this.thumbRight)||void 0===i||i.getComponent().classList.remove("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.remove("range-slider__range_smooth-transition"),null===(a=this.valueLabelRight)||void 0===a||a.getComponent().classList.remove("range-slider__value-label_smooth-transition"))}collectLabels(){const e=[];return this.minLabel&&this.maxLabel&&(e.push(this.minLabel.getComponent()),e.push(this.maxLabel.getComponent())),this.valueLabelLeft&&e.push(this.valueLabelLeft.getComponent()),this.valueLabelRight&&e.push(this.valueLabelRight.getComponent()),e}}V.defaults={minMaxLabels:!0,valueLabels:!0,vertical:!1,range:!0,scale:!1,scaleIntervals:5,panel:!1};const M=V;!function(e){const t=e;t.fn.rangeSlider=function(e={}){return this.each((function(){const i={min:t(this).data("min"),max:t(this).data("max"),range:t(this).data("range"),leftValue:t(this).data("leftValue"),rightValue:t(this).data("rightValue"),step:t(this).data("step"),minMaxLabels:t(this).data("minMaxLabels"),valueLabels:t(this).data("valueLabels"),vertical:t(this).data("vertical"),scale:t(this).data("scale"),scaleIntervals:t(this).data("scaleIntervals"),panel:t(this).data("panel")},s=t.extend({},e,i);this instanceof HTMLDivElement&&t(this).data("rangeSlider",new class{constructor(e,t){this.model=new n({min:t.min,max:t.max,leftValue:t.leftValue,rightValue:t.rightValue,range:t.range,step:t.step}),this.view=new M(e,{minMaxLabels:t.minMaxLabels,valueLabels:t.valueLabels,vertical:t.vertical,range:t.range,scale:t.scale,scaleIntervals:t.scaleIntervals,panel:t.panel}),this.eventManager=new a,this.initViewValues(),this.model.subscribe(this),this.view.subscribe(this)}inform(e,t){switch(e){case"viewInputLeft":"number"==typeof t&&this.handleViewInputLeft(t);break;case"viewInputRight":"number"==typeof t&&this.handleViewInputRight(t);break;case"viewSetLeft":this.handleViewSetLeft();break;case"viewSetRight":this.handleViewSetRight();break;case"viewSetLeftFromOutside":"number"==typeof t&&this.handleViewSetLeftFromOutside(t);break;case"viewSetRightFromOutside":"number"==typeof t&&this.handleViewSetRightFromOutside(t);break;case"viewSetMin":"number"==typeof t&&this.handleViewSetMin(t);break;case"viewSetMax":"number"==typeof t&&this.handleViewSetMax(t);break;case"viewSetStep":"number"==typeof t&&this.handleViewSetStep(t);break;case"viewToggleOrientation":this.handleViewToggleOrientation();break;case"viewToggleRange":this.handleViewToggleRange();break;case"viewToggleScale":this.handleViewToggleScale();break;case"viewSetScaleIntervals":this.handleViewSetScaleIntervals();break;case"viewAddValueLabels":this.handleViewAddValueLabels();break;case"viewAddMinMaxLabels":this.handleViewAddMinMaxLabels();break;case"modelSetLeft":this.handleModelSetLeft(),this.onChange&&this.onChange(this.model.getLeftValue(),this.model.getRightValue());break;case"modelSetRight":this.handleModelSetRight(),this.onChange&&this.onChange(this.model.getLeftValue(),this.model.getRightValue());break;case"modelSetMin":this.handleModelSetMin();break;case"modelSetMax":this.handleModelSetMax();break;case"modelToggleRange":this.handleModelToggleRange();break;case"modelSetStep":this.handleModelSetStep()}}subscribe(e){this.eventManager.subscribe(e)}setLeftValue(e){return this.handleViewSetLeftFromOutside(e),this}setRightValue(e){return this.handleViewSetRightFromOutside(e),this}setStep(e){return this.model.setStep(e),this}setMin(e){return this.model.setMin(e),this}setMax(e){return this.model.setMax(e),this}toggleOrientation(){return this.view.toggleOrientation(),this.eventManager.notify("sliderToggleOrientation",null),this}toggleRange(){return this.model.toggleRange(),this}toggleValueLabels(){return this.view.toggleValueLabels(),this.eventManager.notify("sliderToggleValueLabels",null),this}toggleMinMaxLabels(){return this.view.toggleMinMaxLabels(),this.eventManager.notify("sliderToggleMinMaxLabels",null),this}toggleScale(){return this.view.toggleScale(),this.eventManager.notify("sliderToggleScale",null),this}setScaleIntervals(e){return this.view.setScaleIntervals(e),this.eventManager.notify("sliderSetScaleIntervals",e),this}getValues(){return Object.assign(Object.assign({},this.model.getOptions()),this.view.getOptions())}initViewValues(){var e;const{model:t}=this,{view:i}=this,a=t.getMin(),s=t.getMax(),n=t.getLeftValue(),l=t.getRightValue();i.setMinValue(a),i.setMaxValue(s),this.passLeftValueToView(n),i.isRange()&&void 0!==l?(this.passRightValueToView(l),i.updateInput(n,l)):i.updateInput(n),i.hasScale()&&(i.removeScale(),i.addScale(a,s)),this.view.hasLabels()&&(i.isVertical()||i.fixLabelsContainerHeightForHorizontal(),i.isVertical()&&i.fixLabelsContainerWidthForVertical()),i.hasPanel()&&i.setPanelValues({min:a,max:s,step:t.getStep(),from:n,to:null!=l?l:null,vertical:null!==(e=i.isVertical())&&void 0!==e&&e,range:i.isRange(),scale:i.hasScale(),scaleIntervals:i.getScaleIntervals(),valueLabels:i.hasValueLabels(),minMaxLabels:i.hasMinMaxLabels()})}handleViewInputLeft(e){this.model.setLeftValueFromPx(e,this.view.getTrackLength())}handleModelSetLeft(){const e=this.model.getLeftValue();this.passLeftValueToView(e),this.updateViewInput(),this.view.hasPanel()&&this.view.updatePanelFrom(e),this.eventManager.notify("sliderSetLeft",e)}handleViewInputRight(e){this.model.setRightValueFromPx(e,this.view.getTrackLength())}handleModelSetRight(){const e=this.model.getRightValue();this.passRightValueToView(e),this.updateViewInput(),this.view.hasPanel()&&this.view.updatePanelTo(e),this.eventManager.notify("sliderSetRight",e)}handleViewSetValue(){if(this.view.hasValueLabels()){const e=this.view.getDistanceBetweenValueLabels();void 0!==e&&(n.isTwoLabelsClose(e)?this.view.mergeLabels():this.view.splitLabels())}}handleViewSetLeft(){if(this.handleViewSetValue(),this.view.hasMinMaxLabels()&&this.view.hasValueLabels()){const e=this.view.getDistanceBetweenLeftValueLabelAndMinLabel();if(void 0!==e&&(n.isTwoLabelsClose(e)?this.view.hideMinLabel():this.view.showMinLabel()),!this.view.isRange()){const e=this.view.getDistanceBetweenLeftValueLabelAndMaxLabel();void 0!==e&&(n.isTwoLabelsClose(e)?this.view.hideMaxLabel():this.view.showMaxLabel())}}}handleViewSetRight(){if(this.handleViewSetValue(),this.view.hasMinMaxLabels()&&this.view.hasValueLabels()){const e=this.view.getDistanceBetweenRightValueLabelAndMaxLabel();void 0!==e&&(n.isTwoLabelsClose(e)?this.view.hideMaxLabel():this.view.showMaxLabel())}}passLeftValueToView(e){const t=this.model.convertValueToPercent(e);this.view.setLeftValue(e,t)}passRightValueToView(e){const t=this.model.convertValueToPercent(e);this.view.setRightValue(e,t)}updateViewInput(){this.view.isRange()||this.view.updateInput(this.model.getLeftValue()),this.view.isRange()&&this.view.updateInput(this.model.getLeftValue(),this.model.getRightValue())}handleViewSetLeftFromOutside(e){this.model.setLeftValue(e)}handleViewSetRightFromOutside(e){this.model.setRightValue(e)}handleViewSetMin(e){this.model.setMin(e)}handleModelSetMin(){const e=this.model.getMin();this.view.setMinValue(e),this.passLeftValueToView(this.model.getLeftValue());const t=this.model.getRightValue();void 0!==t&&this.passRightValueToView(t),this.view.hasScale()&&(this.view.removeScale(),this.view.addScale(this.model.getMin(),this.model.getMax())),this.view.hasPanel()&&this.view.updatePanelMin(this.model.getMin()),this.eventManager.notify("sliderSetMin",e)}handleViewSetMax(e){this.model.setMax(e)}handleModelSetMax(){const e=this.model.getMax();this.view.setMaxValue(e),this.passLeftValueToView(this.model.getLeftValue());const t=this.model.getRightValue();void 0!==t&&this.passRightValueToView(t),this.view.hasScale()&&(this.view.removeScale(),this.view.addScale(this.model.getMin(),this.model.getMax())),this.view.hasPanel()&&this.view.updatePanelMax(this.model.getMax()),this.eventManager.notify("sliderSetMax",e)}handleViewSetStep(e){this.model.setStep(e)}handleViewToggleOrientation(){if(this.passLeftValueToView(this.model.getLeftValue()),this.view.isRange()){const e=this.model.getRightValue();void 0!==e&&this.passRightValueToView(e)}}handleViewToggleRange(){if(this.passLeftValueToView(this.model.getLeftValue()),this.model.isRange()){this.model.setRightValue();const e=this.model.getRightValue();void 0!==e&&(this.passRightValueToView(e),this.view.updateInput(this.model.getLeftValue(),e),this.view.hasPanel()&&this.view.updatePanelTo(e))}this.model.isRange()||(this.model.removeRightValue(),this.view.updateInput(this.model.getLeftValue()),this.view.hasPanel()&&this.view.updatePanelTo("")),this.eventManager.notify("sliderToggleRange",null)}handleModelToggleRange(){this.view.toggleRange()}handleModelSetStep(){const e=this.model.getStep();this.view.hasPanel()&&this.view.updatePanelStep(e),this.eventManager.notify("sliderSetStep",e)}handleViewToggleScale(){var e;if(!this.view.hasScale())return this.view.addScale(this.model.getMin(),this.model.getMax()),void(this.view.hasPanel()&&this.view.updatePanelScaleIntervals(null!==(e=this.view.getScaleIntervals())&&void 0!==e?e:4));this.view.hasScale()&&(this.view.removeScale(),this.view.hasPanel()&&this.view.updatePanelScaleIntervals(""))}handleViewSetScaleIntervals(){this.view.hasScale()&&(this.view.removeScale(),this.view.addScale(this.model.getMin(),this.model.getMax()))}handleViewAddValueLabels(){if(this.passLeftValueToView(this.model.getLeftValue()),this.view.isRange()){const e=this.model.getRightValue();void 0!==e&&this.passRightValueToView(e)}}handleViewAddMinMaxLabels(){this.view.setMinValue(this.model.getMin()),this.view.setMaxValue(this.model.getMax())}}(this,s))}))}}(i(65638))},96553:()=>{}},e=>{e.O(0,[216],(()=>(38004,e(e.s=38004)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,