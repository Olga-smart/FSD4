(self.webpackChunk=self.webpackChunk||[]).push([[906],{52283:(e,t,i)=>{"use strict";i.d(t,{Z:()=>s});const s=class{constructor(e,t){this.component=document.createElement(e),t&&(this.component.className=t)}static createComponent(e,t){const i=document.createElement(e);return t&&(i.className=t),i}getComponent(){return this.component}getBoundingClientRect(){return this.component.getBoundingClientRect()}getWidth(){return this.component.offsetWidth}getHeight(){return this.component.offsetHeight}setIndent(e,t){"number"==typeof t&&(this.component.style[e]=`${t}%`),"string"==typeof t&&(this.component.style[e]=t)}remove(){this.component.remove()}}},13741:(e,t,i)=>{"use strict";i(83875);class s{constructor(){this.listeners=[]}subscribe(e){this.listeners.push(e)}unsubscribe(e){this.listeners=this.listeners.filter((t=>t!==e))}notify(e,t){0!==this.listeners.length&&this.listeners.forEach((i=>i.inform(e,t)))}}class a{constructor(e){this.eventManager=new s;const t=a.validate(Object.assign(Object.assign({},a.defaults),e));this.min=t.min,this.max=t.max,this.leftValue=t.leftValue,this.step=t.step,t.range?(this.rightValue=t.rightValue,this.range=!0):this.range=!1}subscribe(e){this.eventManager.subscribe(e)}setLeftValue(e){e<this.min?this.leftValue=this.min:(this.range||(this.leftValue=Math.min(e,this.max)),this.range&&void 0!==this.rightValue&&(this.leftValue=Math.min(e,this.rightValue)),this.leftValue=this.fitToStep(this.leftValue)),this.eventManager.notify("modelSetLeft",null)}setRightValue(e=this.max){this.range&&(e>this.max?this.rightValue=this.max:this.rightValue=Math.max(e,this.leftValue),this.rightValue=this.fitToStep(this.rightValue),this.eventManager.notify("modelSetRight",null))}setLeftValueFromPx(e,t){const i=this.convertPxToValue(e,t);this.setLeftValue(i)}setRightValueFromPx(e,t){const i=this.convertPxToValue(e,t);this.setRightValue(i)}removeRightValue(){this.rightValue=void 0}setMin(e){e>this.leftValue||(this.min=e,this.eventManager.notify("modelSetMin",null))}setMax(e){!this.range&&e<this.leftValue||this.range&&void 0!==this.rightValue&&e<this.rightValue||(this.max=e,this.eventManager.notify("modelSetMax",null))}setStep(e){e<=0||e>Math.abs(this.max-this.min)||(this.step=e,this.eventManager.notify("modelSetStep",null))}toggleRange(){this.range=!this.range,this.eventManager.notify("modelToggleRange",null)}getOptions(){return{min:this.min,max:this.max,leftValue:this.leftValue,rightValue:this.rightValue,step:this.step,range:this.range}}convertValueToPercent(e){let t=(e-this.min)/(this.max-this.min)*100;return t=a.removeCalcInaccuracy(t),t}static isTwoLabelsClose(e){return e<3}static validate(e){let t=Object.assign({},e);return(()=>{const i=i=>{typeof e[i]!=typeof a.defaults[i]&&delete t[i]};i("min"),i("max"),i("leftValue"),i("rightValue"),i("range"),i("step")})(),t=Object.assign(Object.assign({},a.defaults),t),t.min>t.max&&([t.min,t.max]=[t.max,t.min]),t.range||(t.rightValue=void 0),void 0!==t.rightValue&&(t.leftValue>t.rightValue&&([t.leftValue,t.rightValue]=[t.rightValue,t.leftValue]),t.rightValue>t.max&&(t.rightValue=t.max)),t.leftValue<t.min&&(t.leftValue=t.min),t.leftValue>t.max&&(t.leftValue=t.max),t.step>Math.abs(t.max-t.min)&&(t.step=Math.abs(t.max-t.min)),t}static removeCalcInaccuracy(e){return Number(e.toFixed(10))}convertPxToValue(e,t){const i=100*e/t;let s=(this.max-this.min)*(i/100)+this.min;return s=a.removeCalcInaccuracy(s),s=this.fitToStep(s),s}fitToStep(e){let t=Math.round(e/this.step)*this.step;return t=a.removeCalcInaccuracy(t),t}}a.defaults={min:0,max:100,leftValue:25,rightValue:75,step:1,range:!0};const n=a;var l=i(52283);class h extends l.Z{constructor(){super("div","range-slider__track"),this.eventManager=new s,this.attachEventHandlers()}subscribe(e){this.eventManager.subscribe(e)}append(...e){this.component.append(...e)}handleClick(e){if(e.currentTarget instanceof HTMLElement){const t=e.clientX-e.currentTarget.getBoundingClientRect().left,i=e.clientY-e.currentTarget.getBoundingClientRect().top;this.eventManager.notify("trackClick",[t,i])}}attachEventHandlers(){this.component.addEventListener("click",this.handleClick.bind(this))}}const o=h;class r extends l.Z{constructor(){super("div","range-slider__range")}setWidth(e){this.component.style.width=`${e}%`}setHeight(e){this.component.style.height=`${e}%`}resetWidth(){this.component.style.width="unset"}resetHeight(){this.component.style.height="unset"}resetTopIndent(){this.component.style.top="unset"}}const u=r;class g extends l.Z{constructor(e="left"){super("div",`range-slider__thumb range-slider__thumb_${e}`),this.eventManager=new s,this.type=e,this.attachEventHandlers()}subscribe(e){this.eventManager.subscribe(e)}getLeftIndent(){return this.component.style.left}getTopIndent(){return this.component.style.top}setZIndex(e){this.component.style.zIndex=`${e}`}static handlePointerOver(e){e.currentTarget instanceof HTMLElement&&e.currentTarget.classList.add("range-slider__thumb_hover")}static handlePointerOut(e){e.currentTarget instanceof HTMLElement&&e.currentTarget.classList.remove("range-slider__thumb_hover")}static handlePointerUp(e){e.currentTarget instanceof HTMLElement&&e.currentTarget.classList.remove("range-slider__thumb_active")}static handleDragStart(){return!1}handlePointerDown(e){if(e.currentTarget instanceof HTMLElement){e.currentTarget.classList.add("range-slider__thumb_active"),e.currentTarget.setPointerCapture(e.pointerId),e.preventDefault();const t=e.clientX-e.currentTarget.getBoundingClientRect().left,i=e.clientY-e.currentTarget.getBoundingClientRect().top,s=e=>{const s=e.clientX-t,a=e.clientY-i;"left"===this.type&&this.eventManager.notify("leftThumbChangePosition",[s,a]),"right"===this.type&&this.eventManager.notify("rightThumbChangePosition",[s,a])},a=()=>{this.component.removeEventListener("pointermove",s),this.component.removeEventListener("pointerup",a)};this.component.addEventListener("pointermove",s),this.component.addEventListener("pointerup",a)}}attachEventHandlers(){this.component.addEventListener("pointerover",g.handlePointerOver),this.component.addEventListener("pointerout",g.handlePointerOut),this.component.addEventListener("pointerdown",this.handlePointerDown.bind(this)),this.component.addEventListener("pointerup",g.handlePointerUp),this.component.addEventListener("dragstart",g.handleDragStart)}}const d=g;class c extends l.Z{constructor(e,t,i=4){super("div","range-slider__scale"),this.eventManager=new s,this.intervals=[],this.values=[],this.valueElements=[],this.createIntervals(i),this.addMarksInIntervals(i),this.addValues(e,t,i),this.attachEventHandlers()}subscribe(e){this.eventManager.subscribe(e)}fitWidthForVertical(e=3){let t=0;this.valueElements.forEach((e=>{e.offsetWidth>t&&(t=e.offsetWidth)})),this.component.style.paddingRight=`${t+e}px`}fitHeightForHorizontal(e=3){let t=0;this.valueElements.forEach((e=>{e.offsetHeight>t&&(t=e.offsetHeight)})),this.component.style.paddingBottom=`${t+e}px`}handleSwitchFromHorizontalToVertical(){this.component.style.paddingBottom="unset",this.fitWidthForVertical()}handleSwitchFromVerticalToHorizontal(){this.component.style.paddingRight="unset",this.fitHeightForHorizontal()}createIntervals(e){const t=new DocumentFragment;for(let i=0;i<e;i+=1)this.intervals[i]=l.Z.createComponent("div","range-slider__scale-interval"),t.append(this.intervals[i]);this.component.append(t)}addMarksInIntervals(e){this.intervals.forEach((t=>{const i=new DocumentFragment;e<29&&i.append(l.Z.createComponent("span","range-slider__scale-mark")),e<15&&i.append(l.Z.createComponent("span","range-slider__scale-mark")),e<8&&i.append(l.Z.createComponent("span","range-slider__scale-mark")),e<5&&i.append(l.Z.createComponent("span","range-slider__scale-mark")),t.append(i)}))}addValues(e,t,i){this.values[0]=e;const s=(t-e)/i;let a=0;0!==Math.round(i/(t-e))&&(a=Math.round(i/(t-e)).toString().length);for(let t=1;t<i;t+=1)this.values[t]=Number((t*s+e).toFixed(a));this.values.push(t);const n=l.Z.createComponent("span","range-slider__scale-interval-value range-slider__scale-interval-value_min");n.textContent=`${this.values[0]}`,this.intervals[0].append(n),this.valueElements.push(n);for(let e=1;e<this.values.length;e+=1){const t=l.Z.createComponent("span","range-slider__scale-interval-value");t.textContent=`${this.values[e]}`,this.intervals[e-1].append(t),this.valueElements.push(t)}}handleClick(e){if(e.currentTarget instanceof HTMLElement){const t=e.clientX-e.currentTarget.getBoundingClientRect().left,i=e.clientY-e.currentTarget.getBoundingClientRect().top;this.eventManager.notify("scaleClick",[t,i])}}attachEventHandlers(){this.component.addEventListener("click",this.handleClick.bind(this))}}const v=c;class m extends l.Z{constructor(){super("div","range-slider__labels-container")}append(...e){this.component.append(...e)}fixWidthForVertical(e,t=4){let i=0;e.forEach((e=>{e.offsetWidth>i&&(i=e.offsetWidth)})),this.component.style.paddingLeft=`${i+t}px`}fixHeightForHorizontal(e,t=4){let i=0;e.forEach((e=>{e.offsetHeight>i&&(i=e.offsetHeight)})),this.component.style.paddingTop=`${i+t}px`}}const b=m;class p extends l.Z{constructor(e){super("div",e)}setOpacity(e){this.component.style.opacity=`${e}`}setValue(e){this.component.textContent=`${e}`}getValue(){return Number(this.component.textContent)}getLeftIndent(){return this.component.style.left}getTopIndent(){return this.component.style.top}}const L=p;class f extends l.Z{constructor(){super("input","range-slider__input"),this.setAttributes()}setValue(e,t=null){this.component.value=null===t?`${e}`:`${e} - ${t}`}setAttributes(){this.component.type="text",this.component.tabIndex=-1,this.component.readOnly=!0}}const V=f;class w extends l.Z{constructor(e,t){super("div"),this.eventManager=new s,this.slider=l.Z.createComponent("div","range-slider__slider"),this.track=new o,this.range=new u,this.input=new V,this.thumbLeft=new d("left"),this.scaleIntervals=5,this.component=e;const i=w.validate(Object.assign(Object.assign({},w.defaults),t));this.initOptionalFields(i),this.subscribeToSubviews(),this.render()}subscribe(e){this.eventManager.subscribe(e)}inform(e,t){const i={scaleClick:[this.handleScaleOrTrackClick],trackClick:[this.handleScaleOrTrackClick],leftThumbChangePosition:[this.handleLeftInput],rightThumbChangePosition:[this.handleRightInput]}[e];if(void 0!==i&&Array.isArray(t)){const e=t[0],s=t[1];i[0].call(this,e,s)}}setMinValue(e){var t;null===(t=this.minLabel)||void 0===t||t.setValue(e)}setMaxValue(e){var t;null===(t=this.maxLabel)||void 0===t||t.setValue(e)}setLeftValue(e,t){var i,s,a,n;this.vertical||(this.thumbLeft.setIndent("left",t),this.thumbLeft.setZIndex(100===t?100:3),this.isRange()?this.range.setIndent("left",t):this.range.setWidth(t),null===(i=this.valueLabelLeft)||void 0===i||i.setIndent("left",`${t}%`)),this.vertical&&(this.thumbLeft.setIndent("top",100-t),this.thumbLeft.setZIndex(100===t?100:3),this.isRange()?this.range.setIndent("bottom",t):this.range.setHeight(t),null===(s=this.valueLabelLeft)||void 0===s||s.setIndent("top",100-t+"%")),this.valueLabelLeft&&(this.valueLabelLeft.setValue(e),this.isRange()&&(null===(a=this.valueLabelCommon)||void 0===a||a.setValue(`${e} - ${null===(n=this.valueLabelRight)||void 0===n?void 0:n.getValue()}`))),this.eventManager.notify("viewSetLeft",null)}setRightValue(e,t){var i,s,a,n,l,h;this.vertical||(null===(i=this.thumbRight)||void 0===i||i.setIndent("left",t),this.range.setIndent("right",100-t),null===(s=this.valueLabelRight)||void 0===s||s.setIndent("left",`${t}%`)),this.vertical&&(null===(a=this.thumbRight)||void 0===a||a.setIndent("top",100-t),this.range.setIndent("top",100-t),null===(n=this.valueLabelRight)||void 0===n||n.setIndent("top",100-t+"%")),this.valueLabelRight&&(this.valueLabelRight.setValue(e),null===(l=this.valueLabelCommon)||void 0===l||l.setValue(`${null===(h=this.valueLabelLeft)||void 0===h?void 0:h.getValue()} - ${e}`)),this.eventManager.notify("viewSetRight",null)}updateInput(e,t=null){this.input.setValue(e,t)}addScale(e,t){this.scale=new v(e,t,this.getScaleIntervals()),this.slider.after(this.scale.getComponent()),this.scale.subscribe(this),this.vertical||this.scale.fitHeightForHorizontal(),this.vertical&&this.scale.fitWidthForVertical()}removeScale(){var e;null===(e=this.scale)||void 0===e||e.getComponent().remove(),this.scale=void 0}setScaleIntervals(e){e<=0||(this.scaleIntervals=Math.floor(e),this.eventManager.notify("viewSetScaleIntervals",null))}getScaleIntervals(){return this.scaleIntervals}fixLabelsContainerWidthForVertical(){var e;const t=this.collectLabels();null===(e=this.labelsContainer)||void 0===e||e.fixWidthForVertical(t)}fixLabelsContainerHeightForHorizontal(){var e;const t=this.collectLabels();null===(e=this.labelsContainer)||void 0===e||e.fixHeightForHorizontal(t)}toggleOrientation(){var e,t,i,s,a,n,l,h,o,r;this.vertical=!this.vertical,this.destroy(),this.render(),this.vertical&&(this.thumbLeft.setIndent("left",0),null===(e=this.thumbRight)||void 0===e||e.setIndent("left",0),this.range.setIndent("left",0),this.range.setIndent("right",0),this.range.resetTopIndent(),this.range.resetWidth(),null===(t=this.valueLabelLeft)||void 0===t||t.setIndent("left","unset"),null===(i=this.valueLabelRight)||void 0===i||i.setIndent("left","unset"),null===(s=this.valueLabelCommon)||void 0===s||s.setIndent("left","unset"),this.hasLabels()&&this.fixLabelsContainerWidthForVertical(),null===(a=this.scale)||void 0===a||a.handleSwitchFromHorizontalToVertical()),this.vertical||(this.component.classList.remove("range-slider_vertical"),this.thumbLeft.setIndent("top",0),null===(n=this.thumbRight)||void 0===n||n.setIndent("top",0),this.range.setIndent("bottom",0),this.range.setIndent("top",0),this.range.resetHeight(),null===(l=this.valueLabelLeft)||void 0===l||l.setIndent("top","unset"),null===(h=this.valueLabelRight)||void 0===h||h.setIndent("top","unset"),null===(o=this.valueLabelCommon)||void 0===o||o.setIndent("top","unset"),this.hasLabels()&&this.fixLabelsContainerHeightForHorizontal(),null===(r=this.scale)||void 0===r||r.handleSwitchFromVerticalToHorizontal()),this.eventManager.notify("viewToggleOrientation",null)}toggleRange(){const e=!this.isRange();this.destroy(),e&&(this.thumbRight=new d("right"),this.thumbRight.subscribe(this),this.valueLabelLeft&&(this.valueLabelRight=new L("range-slider__value-label range-slider__value-label_right"),this.valueLabelCommon=new L("range-slider__value-label range-slider__value-label_common")),this.vertical||this.range.resetWidth(),this.vertical&&this.range.resetHeight()),e||(this.thumbRight=void 0,this.valueLabelRight=void 0,this.valueLabelCommon=void 0,this.vertical&&this.range.resetTopIndent()),this.render(),this.eventManager.notify("viewToggleRange",null)}toggleValueLabels(){var e,t,i,s,a;if(this.valueLabelLeft)return this.valueLabelLeft.remove(),null===(e=this.valueLabelRight)||void 0===e||e.remove(),null===(t=this.valueLabelCommon)||void 0===t||t.remove(),this.valueLabelLeft=void 0,this.valueLabelRight=void 0,this.valueLabelCommon=void 0,this.minLabel&&(this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical()),void(this.minLabel||(null===(i=this.labelsContainer)||void 0===i||i.remove(),this.labelsContainer=void 0));this.valueLabelLeft||(this.valueLabelLeft=new L("range-slider__value-label range-slider__value-label_left"),this.labelsContainer||(this.labelsContainer=new b,this.slider.before(this.labelsContainer.getComponent())),this.labelsContainer.append(this.valueLabelLeft.getComponent()),this.isRange()&&(this.valueLabelRight=new L("range-slider__value-label range-slider__value-label_right"),this.valueLabelCommon=new L("range-slider__value-label range-slider__value-label_common"),this.labelsContainer.append(null===(s=this.valueLabelRight)||void 0===s?void 0:s.getComponent(),null===(a=this.valueLabelCommon)||void 0===a?void 0:a.getComponent())),this.eventManager.notify("viewAddValueLabels",null),this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical())}toggleMinMaxLabels(){var e,t;if(this.minLabel)return this.minLabel.remove(),null===(e=this.maxLabel)||void 0===e||e.remove(),this.minLabel=void 0,this.maxLabel=void 0,this.valueLabelLeft&&(this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical()),void(this.valueLabelLeft||(null===(t=this.labelsContainer)||void 0===t||t.remove(),this.labelsContainer=void 0));this.minLabel||(this.minLabel=new L("range-slider__min-max-label range-slider__min-max-label_left"),this.maxLabel=new L("range-slider__min-max-label range-slider__min-max-label_right"),this.labelsContainer||(this.labelsContainer=new b,this.slider.before(this.labelsContainer.getComponent())),this.labelsContainer.append(this.minLabel.getComponent(),this.maxLabel.getComponent()),this.eventManager.notify("viewAddMinMaxLabels",null),this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical())}hasLabels(){return Boolean(this.valueLabelLeft||this.minLabel)}hasScale(){return Boolean(this.scale)}hasMinMaxLabels(){return Boolean(this.maxLabel)}hasValueLabels(){return Boolean(this.valueLabelLeft)}isRange(){return Boolean(this.thumbRight)}isVertical(){return Boolean(this.vertical)}getTrackLength(){return this.isVertical()?this.track.getHeight():this.track.getWidth()}getOptions(){return{minMaxLabels:this.hasMinMaxLabels(),valueLabels:this.hasValueLabels(),vertical:this.isVertical(),range:this.isRange(),scale:this.hasScale(),scaleIntervals:this.getScaleIntervals()}}mergeLabels(){var e,t,i,s,a;if(null===(e=this.valueLabelLeft)||void 0===e||e.setOpacity(0),null===(t=this.valueLabelRight)||void 0===t||t.setOpacity(0),null===(i=this.valueLabelCommon)||void 0===i||i.setOpacity(1),!this.vertical&&this.thumbRight){const e=parseInt(this.thumbRight.getLeftIndent(),10)-parseInt(this.thumbLeft.getLeftIndent(),10);this.valueLabelLeft&&(null===(s=this.valueLabelCommon)||void 0===s||s.setIndent("left",`${parseInt(this.valueLabelLeft.getLeftIndent(),10)+e/2}%`))}if(this.vertical&&this.thumbRight){const e=parseInt(this.thumbLeft.getTopIndent(),10)-parseInt(this.thumbRight.getTopIndent(),10);this.valueLabelRight&&(null===(a=this.valueLabelCommon)||void 0===a||a.setIndent("top",`${parseInt(this.valueLabelRight.getTopIndent(),10)+e/2}%`))}}splitLabels(){var e,t,i;null===(e=this.valueLabelCommon)||void 0===e||e.setOpacity(0),null===(t=this.valueLabelLeft)||void 0===t||t.setOpacity(1),null===(i=this.valueLabelRight)||void 0===i||i.setOpacity(1)}hideMinLabel(){var e;null===(e=this.minLabel)||void 0===e||e.setOpacity(0)}showMinLabel(){var e;null===(e=this.minLabel)||void 0===e||e.setOpacity(1)}hideMaxLabel(){var e;null===(e=this.maxLabel)||void 0===e||e.setOpacity(0)}showMaxLabel(){var e;null===(e=this.maxLabel)||void 0===e||e.setOpacity(1)}getDistanceBetweenValueLabels(){if(this.valueLabelLeft&&this.valueLabelRight)return this.getDistanceBetweenTwoLabels(this.valueLabelLeft,this.valueLabelRight)}getDistanceBetweenLeftValueLabelAndMinLabel(){if(this.valueLabelLeft&&this.minLabel)return this.getDistanceBetweenTwoLabels(this.minLabel,this.valueLabelLeft)}getDistanceBetweenLeftValueLabelAndMaxLabel(){if(this.valueLabelLeft&&this.maxLabel)return this.getDistanceBetweenTwoLabels(this.valueLabelLeft,this.maxLabel)}getDistanceBetweenRightValueLabelAndMaxLabel(){if(this.valueLabelRight&&this.maxLabel)return this.getDistanceBetweenTwoLabels(this.valueLabelRight,this.maxLabel)}static validate(e){let t=Object.assign({},e);return(()=>{const i=i=>{typeof e[i]!=typeof w.defaults[i]&&delete t[i]};i("range"),i("minMaxLabels"),i("valueLabels"),i("vertical"),i("scale"),i("scaleIntervals")})(),t=Object.assign(Object.assign({},w.defaults),t),void 0!==t.scaleIntervals&&(t.scaleIntervals<1&&(t.scaleIntervals=1),Number.isInteger(t.scaleIntervals)||(t.scaleIntervals=Math.floor(t.scaleIntervals))),t}initOptionalFields(e){e.range&&(this.thumbRight=new d("right")),this.scaleIntervals=e.scaleIntervals,e.scale&&(this.scale=new v(0,100,this.getScaleIntervals())),(e.minMaxLabels||e.valueLabels)&&(this.labelsContainer=new b,e.minMaxLabels&&(this.minLabel=new L("range-slider__min-max-label range-slider__min-max-label_left"),this.maxLabel=new L("range-slider__min-max-label range-slider__min-max-label_right")),e.valueLabels&&(this.valueLabelLeft=new L("range-slider__value-label range-slider__value-label_left"),e.range&&(this.valueLabelRight=new L("range-slider__value-label range-slider__value-label_right"),this.valueLabelCommon=new L("range-slider__value-label range-slider__value-label_common")))),e.vertical&&(this.vertical=!0)}subscribeToSubviews(){var e;this.track.subscribe(this),this.thumbLeft.subscribe(this),this.isRange()&&(null===(e=this.thumbRight)||void 0===e||e.subscribe(this))}render(){var e,t,i;const s=new DocumentFragment;this.track.append(this.range.getComponent()),this.slider.append(this.track.getComponent(),this.thumbLeft.getComponent()),s.append(this.slider,this.input.getComponent()),this.isRange()&&this.thumbRight?this.slider.append(this.thumbRight.getComponent()):(this.vertical||this.range.setIndent("left",0),this.vertical&&this.range.setIndent("bottom",0)),this.minLabel&&this.maxLabel&&(null===(e=this.labelsContainer)||void 0===e||e.append(this.minLabel.getComponent(),this.maxLabel.getComponent())),this.valueLabelLeft&&(null===(t=this.labelsContainer)||void 0===t||t.append(this.valueLabelLeft.getComponent()),this.isRange()&&this.valueLabelRight&&this.valueLabelCommon&&(null===(i=this.labelsContainer)||void 0===i||i.append(this.valueLabelRight.getComponent(),this.valueLabelCommon.getComponent()))),this.labelsContainer&&this.slider.before(this.labelsContainer.getComponent()),this.vertical&&this.component.classList.add("range-slider_vertical"),this.scale&&this.slider.after(this.scale.getComponent()),this.component.append(s)}destroy(){this.labelsContainer&&[...this.labelsContainer.getComponent().children].forEach((e=>{e.remove()})),[...this.slider.children].forEach((e=>{e.remove()})),[...this.component.children].forEach((e=>{e.remove()}))}handleLeftInput(e,t){this.eventManager.notify("viewInputLeft",this.getThumbIndent(e,t))}handleRightInput(e,t){this.eventManager.notify("viewInputRight",this.getThumbIndent(e,t))}getThumbIndent(e,t){if(this.vertical){const e=t-this.track.getBoundingClientRect().top;return this.getTrackLength()-e}return e-this.track.getBoundingClientRect().left}handleScaleOrTrackClick(e,t){this.isRange()||(this.addSmoothTransition("left"),this.vertical?this.eventManager.notify("viewInputLeft",this.getTrackLength()-t):this.eventManager.notify("viewInputLeft",e),setTimeout((()=>{this.removeSmoothTransition("left")}),1e3)),this.isRange()&&("left"===this.whichThumbIsNearer(e,t)?(this.addSmoothTransition("left"),this.vertical?this.eventManager.notify("viewInputLeft",this.getTrackLength()-t):this.eventManager.notify("viewInputLeft",e),setTimeout((()=>{this.removeSmoothTransition("left")}),1e3)):(this.addSmoothTransition("right"),this.vertical?this.eventManager.notify("viewInputRight",this.getTrackLength()-t):this.eventManager.notify("viewInputRight",e),setTimeout((()=>{this.removeSmoothTransition("right")}),1e3)))}whichThumbIsNearer(e,t){var i;const s=this.thumbLeft.getBoundingClientRect(),a=null===(i=this.thumbRight)||void 0===i?void 0:i.getBoundingClientRect(),n=this.track.getBoundingClientRect();let l=0,h=0;if(!this.vertical&&a){const t=s.left+s.width/2-n.left,i=a.left+a.width/2-n.left;l=Math.abs(e-t),h=Math.abs(e-i)}if(this.vertical&&a){const e=s.top+s.height/2-n.top,i=a.top+a.height/2-n.top;l=Math.abs(t-e),h=Math.abs(t-i)}return l<=h?"left":"right"}addSmoothTransition(e="left"){var t,i,s;"left"===e&&(this.thumbLeft.getComponent().classList.add("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.add("range-slider__range_smooth-transition"),null===(t=this.valueLabelLeft)||void 0===t||t.getComponent().classList.add("range-slider__value-label_smooth-transition")),"right"===e&&(null===(i=this.thumbRight)||void 0===i||i.getComponent().classList.add("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.add("range-slider__range_smooth-transition"),null===(s=this.valueLabelRight)||void 0===s||s.getComponent().classList.add("range-slider__value-label_smooth-transition"))}removeSmoothTransition(e="left"){var t,i,s;"left"===e&&(this.thumbLeft.getComponent().classList.remove("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.remove("range-slider__range_smooth-transition"),null===(t=this.valueLabelLeft)||void 0===t||t.getComponent().classList.remove("range-slider__value-label_smooth-transition")),"right"===e&&(null===(i=this.thumbRight)||void 0===i||i.getComponent().classList.remove("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.remove("range-slider__range_smooth-transition"),null===(s=this.valueLabelRight)||void 0===s||s.getComponent().classList.remove("range-slider__value-label_smooth-transition"))}collectLabels(){const e=[];return this.minLabel&&this.maxLabel&&(e.push(this.minLabel.getComponent()),e.push(this.maxLabel.getComponent())),this.valueLabelLeft&&e.push(this.valueLabelLeft.getComponent()),this.valueLabelRight&&e.push(this.valueLabelRight.getComponent()),e}getDistanceBetweenTwoLabels(e,t){if(this.vertical)return e.getBoundingClientRect().top-t.getBoundingClientRect().bottom;const i=e.getBoundingClientRect().right;return t.getBoundingClientRect().left-i}}w.defaults={minMaxLabels:!0,valueLabels:!0,vertical:!1,range:!0,scale:!1,scaleIntervals:5};const M=w;!function(e){const t=e;t.fn.rangeSlider=function(e={}){return this.each((function(){const i={min:t(this).data("min"),max:t(this).data("max"),range:t(this).data("range"),leftValue:t(this).data("leftValue"),rightValue:t(this).data("rightValue"),step:t(this).data("step"),minMaxLabels:t(this).data("minMaxLabels"),valueLabels:t(this).data("valueLabels"),vertical:t(this).data("vertical"),scale:t(this).data("scale"),scaleIntervals:t(this).data("scaleIntervals")},a=t.extend({},e,i);this instanceof HTMLDivElement&&t(this).data("rangeSlider",new class{constructor(e,t){this.eventManager=new s,this.model=new n({min:t.min,max:t.max,leftValue:t.leftValue,rightValue:t.rightValue,range:t.range,step:t.step}),this.view=new M(e,{minMaxLabels:t.minMaxLabels,valueLabels:t.valueLabels,vertical:t.vertical,range:t.range,scale:t.scale,scaleIntervals:t.scaleIntervals}),this.initViewValues(),this.model.subscribe(this),this.view.subscribe(this)}inform(e,t){const i={viewInputLeft:[this.handleViewInputLeft,"number",t],viewInputRight:[this.handleViewInputRight,"number",t],viewSetLeft:[this.handleViewSetLeft],viewSetRight:[this.handleViewSetRight],viewToggleOrientation:[this.handleViewToggleOrientation],viewToggleRange:[this.handleViewToggleRange],viewSetScaleIntervals:[this.handleViewSetScaleIntervals],viewAddValueLabels:[this.handleViewAddValueLabels],viewAddMinMaxLabels:[this.handleViewAddMinMaxLabels],modelSetLeft:[this.handleModelSetLeft],modelSetRight:[this.handleModelSetRight],modelSetMin:[this.handleModelSetMin],modelSetMax:[this.handleModelSetMax],modelToggleRange:[this.handleModelToggleRange],modelSetStep:[this.handleModelSetStep]}[e];void 0!==i&&(typeof t!==i[1]&&null!==t||i[0].call(this,i[2]))}subscribe(e){this.eventManager.subscribe(e)}setLeftValue(e){return"number"==typeof e&&this.model.setLeftValue(e),this}setRightValue(e){return"number"==typeof e&&this.model.setRightValue(e),this}setStep(e){return"number"==typeof e&&this.model.setStep(e),this}setMin(e){return"number"==typeof e&&this.model.setMin(e),this}setMax(e){return"number"==typeof e&&this.model.setMax(e),this}toggleOrientation(){return this.view.toggleOrientation(),this}toggleRange(){return this.model.toggleRange(),this}toggleValueLabels(){return this.view.toggleValueLabels(),this.eventManager.notify("sliderToggleValueLabels",null),this}toggleMinMaxLabels(){return this.view.toggleMinMaxLabels(),this.eventManager.notify("sliderToggleMinMaxLabels",null),this}toggleScale(){return this.view.hasScale()?this.view.removeScale():this.view.addScale(this.model.getOptions().min,this.model.getOptions().max),this.eventManager.notify("sliderToggleScale",null),this}setScaleIntervals(e){return"number"==typeof e&&this.view.setScaleIntervals(e),this}getValues(){return Object.assign(Object.assign({},this.model.getOptions()),this.view.getOptions())}initViewValues(){const{model:e}=this,{view:t}=this,{min:i}=e.getOptions(),{max:s}=e.getOptions(),{leftValue:a}=e.getOptions(),{rightValue:n}=e.getOptions();t.setMinValue(i),t.setMaxValue(s),this.passLeftValueToView(a),t.isRange()&&void 0!==n?(this.passRightValueToView(n),t.updateInput(a,n)):t.updateInput(a),t.hasScale()&&(t.removeScale(),t.addScale(i,s)),this.view.hasLabels()&&(t.isVertical()||t.fixLabelsContainerHeightForHorizontal(),t.isVertical()&&t.fixLabelsContainerWidthForVertical())}handleViewInputLeft(e){this.model.setLeftValueFromPx(e,this.view.getTrackLength())}handleModelSetLeft(){const e=this.model.getOptions().leftValue;this.passLeftValueToView(e),this.updateViewInput(),this.onChange&&this.onChange(this.model.getOptions().leftValue,this.model.getOptions().rightValue),this.eventManager.notify("sliderSetLeft",e)}handleViewInputRight(e){this.model.setRightValueFromPx(e,this.view.getTrackLength())}handleModelSetRight(){const e=this.model.getOptions().rightValue;this.passRightValueToView(e),this.updateViewInput(),this.onChange&&this.onChange(this.model.getOptions().leftValue,this.model.getOptions().rightValue),this.eventManager.notify("sliderSetRight",e)}handleViewSetValue(){if(this.view.hasValueLabels()){const e=this.view.getDistanceBetweenValueLabels();void 0!==e&&(n.isTwoLabelsClose(e)?this.view.mergeLabels():this.view.splitLabels())}}handleViewSetLeft(){if(this.handleViewSetValue(),this.view.hasMinMaxLabels()&&this.view.hasValueLabels()){const e=this.view.getDistanceBetweenLeftValueLabelAndMinLabel();if(void 0!==e&&(n.isTwoLabelsClose(e)?this.view.hideMinLabel():this.view.showMinLabel()),!this.view.isRange()){const e=this.view.getDistanceBetweenLeftValueLabelAndMaxLabel();void 0!==e&&(n.isTwoLabelsClose(e)?this.view.hideMaxLabel():this.view.showMaxLabel())}}}handleViewSetRight(){if(this.handleViewSetValue(),this.view.hasMinMaxLabels()&&this.view.hasValueLabels()){const e=this.view.getDistanceBetweenRightValueLabelAndMaxLabel();void 0!==e&&(n.isTwoLabelsClose(e)?this.view.hideMaxLabel():this.view.showMaxLabel())}}passLeftValueToView(e){const t=this.model.convertValueToPercent(e);this.view.setLeftValue(e,t)}passRightValueToView(e){const t=this.model.convertValueToPercent(e);this.view.setRightValue(e,t)}updateViewInput(){this.view.isRange()||this.view.updateInput(this.model.getOptions().leftValue),this.view.isRange()&&this.view.updateInput(this.model.getOptions().leftValue,this.model.getOptions().rightValue)}handleModelSetMin(){const e=this.model.getOptions().min;this.view.setMinValue(e),this.passLeftValueToView(this.model.getOptions().leftValue);const{rightValue:t}=this.model.getOptions();void 0!==t&&this.passRightValueToView(t),this.view.hasScale()&&(this.view.removeScale(),this.view.addScale(this.model.getOptions().min,this.model.getOptions().max)),this.eventManager.notify("sliderSetMin",e)}handleModelSetMax(){const e=this.model.getOptions().max;this.view.setMaxValue(e),this.passLeftValueToView(this.model.getOptions().leftValue);const{rightValue:t}=this.model.getOptions();void 0!==t&&this.passRightValueToView(t),this.view.hasScale()&&(this.view.removeScale(),this.view.addScale(this.model.getOptions().min,this.model.getOptions().max)),this.eventManager.notify("sliderSetMax",e)}handleViewToggleOrientation(){if(this.passLeftValueToView(this.model.getOptions().leftValue),this.view.isRange()){const{rightValue:e}=this.model.getOptions();void 0!==e&&this.passRightValueToView(e)}this.eventManager.notify("sliderToggleOrientation",null)}handleViewToggleRange(){if(this.passLeftValueToView(this.model.getOptions().leftValue),this.model.getOptions().range){this.model.setRightValue();const{rightValue:e}=this.model.getOptions();void 0!==e&&(this.passRightValueToView(e),this.view.updateInput(this.model.getOptions().leftValue,e))}this.model.getOptions().range||(this.model.removeRightValue(),this.view.updateInput(this.model.getOptions().leftValue)),this.eventManager.notify("sliderToggleRange",null)}handleModelToggleRange(){this.view.toggleRange()}handleModelSetStep(){this.eventManager.notify("sliderSetStep",this.model.getOptions().step)}handleViewSetScaleIntervals(){this.view.hasScale()&&(this.view.removeScale(),this.view.addScale(this.model.getOptions().min,this.model.getOptions().max)),this.eventManager.notify("sliderSetScaleIntervals",this.view.getScaleIntervals())}handleViewAddValueLabels(){if(this.passLeftValueToView(this.model.getOptions().leftValue),this.view.isRange()){const{rightValue:e}=this.model.getOptions();void 0!==e&&this.passRightValueToView(e)}}handleViewAddMinMaxLabels(){this.view.setMinValue(this.model.getOptions().min),this.view.setMaxValue(this.model.getOptions().max)}}(this,a))}))}}(i(65638))},96553:()=>{}},e=>{e.O(0,[216],(()=>(13741,e(e.s=13741)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FDRnpDLEtBQUtzUyxxQkFBcUI3UCxJQUt4QjZPLDRCQUNOdFIsS0FBS21RLEtBQUs5RSxZQUFZckwsS0FBS2tRLE1BQU12TSxhQUFhdkIsS0FDOUNwQyxLQUFLbVEsS0FBSzVFLFlBQVl2TCxLQUFLa1EsTUFBTXZNLGFBQWF0QixPRHJXQXJDLEtBQU0rUCxRQXRCeEQsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL1JhbmdlU2xpZGVyL1ZpZXcvQmFzZUVsZW1lbnQvQmFzZUVsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vUmFuZ2VTbGlkZXIvRXZlbnRNYW5hZ2VyL0V2ZW50TWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9SYW5nZVNsaWRlci9Nb2RlbC9Nb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9SYW5nZVNsaWRlci9WaWV3L3N1YnZpZXdzL1RyYWNrL1RyYWNrLnRzIiwid2VicGFjazovLy8uL1JhbmdlU2xpZGVyL1ZpZXcvc3Vidmlld3MvUmFuZ2UvUmFuZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vUmFuZ2VTbGlkZXIvVmlldy9zdWJ2aWV3cy9UaHVtYi9UaHVtYi50cyIsIndlYnBhY2s6Ly8vLi9SYW5nZVNsaWRlci9WaWV3L3N1YnZpZXdzL1NjYWxlL1NjYWxlLnRzIiwid2VicGFjazovLy8uL1JhbmdlU2xpZGVyL1ZpZXcvc3Vidmlld3MvTGFiZWxzQ29udGFpbmVyL0xhYmVsc0NvbnRhaW5lci50cyIsIndlYnBhY2s6Ly8vLi9SYW5nZVNsaWRlci9WaWV3L3N1YnZpZXdzL0xhYmVsL0xhYmVsLnRzIiwid2VicGFjazovLy8uL1JhbmdlU2xpZGVyL1ZpZXcvc3Vidmlld3MvSW5wdXQvSW5wdXQudHMiLCJ3ZWJwYWNrOi8vLy4vUmFuZ2VTbGlkZXIvVmlldy9WaWV3LnRzIiwid2VicGFjazovLy8uL1JhbmdlU2xpZGVyL1dyYXBwZXIudHMiLCJ3ZWJwYWNrOi8vLy4vUmFuZ2VTbGlkZXIvUHJlc2VudGVyL1ByZXNlbnRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBCYXNlRWxlbWVudDxUIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwPiB7XG4gIHByb3RlY3RlZCBjb21wb25lbnQ6IEhUTUxFbGVtZW50VGFnTmFtZU1hcFtUXTtcblxuICBjb25zdHJ1Y3Rvcih0YWc6IFQsIGNsYXNzTmFtZT86IHN0cmluZykge1xuICAgIHRoaXMuY29tcG9uZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuXG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgdGhpcy5jb21wb25lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBzdGF0aWMgY3JlYXRlQ29tcG9uZW50PEsgZXh0ZW5kcyBrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXA+KFxuICAgIHRhZzogSywgY2xhc3NOYW1lPzogc3RyaW5nLFxuICApOiBIVE1MRWxlbWVudFRhZ05hbWVNYXBbS10ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG5cbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIGdldENvbXBvbmVudCgpOiBIVE1MRWxlbWVudFRhZ05hbWVNYXBbVF0ge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudDtcbiAgfVxuXG4gIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOiBET01SZWN0IHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICBnZXRXaWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vZmZzZXRXaWR0aDtcbiAgfVxuXG4gIGdldEhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5vZmZzZXRIZWlnaHQ7XG4gIH1cblxuICBzZXRJbmRlbnQoc2lkZTogJ3RvcCcgfCAncmlnaHQnIHwgJ2JvdHRvbScgfCAnbGVmdCcsIGluZGVudDogbnVtYmVyIHwgc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBpbmRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudC5zdHlsZVtzaWRlXSA9IGAke2luZGVudH0lYDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluZGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50LnN0eWxlW3NpZGVdID0gaW5kZW50O1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZSgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbXBvbmVudC5yZW1vdmUoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXNlRWxlbWVudDtcbiIsImltcG9ydCBTbGlkZXJFdmVudHMgZnJvbSAnLi4vUHJlc2VudGVyL1NsaWRlckV2ZW50cyc7XG5pbXBvcnQgTW9kZWxFdmVudHMgZnJvbSAnLi4vTW9kZWwvTW9kZWxFdmVudHMnO1xuaW1wb3J0IFZpZXdFdmVudHMgZnJvbSAnLi4vVmlldy9WaWV3RXZlbnRzJztcbmltcG9ydCBTY2FsZUV2ZW50cyBmcm9tICcuLi9WaWV3L3N1YnZpZXdzL1NjYWxlL1NjYWxlRXZlbnRzJztcbmltcG9ydCBUaHVtYkV2ZW50cyBmcm9tICcuLi9WaWV3L3N1YnZpZXdzL1RodW1iL1RodW1iRXZlbnRzJztcbmltcG9ydCBUcmFja0V2ZW50cyBmcm9tICcuLi9WaWV3L3N1YnZpZXdzL1RyYWNrL1RyYWNrRXZlbnRzJztcblxudHlwZSBQb3NzaWJsZUV2ZW50cyA9IFNsaWRlckV2ZW50c1xuJiBNb2RlbEV2ZW50c1xuJiBWaWV3RXZlbnRzXG4mIFNjYWxlRXZlbnRzXG4mIFRodW1iRXZlbnRzXG4mIFRyYWNrRXZlbnRzO1xuXG5pbnRlcmZhY2UgSUV2ZW50TGlzdGVuZXIge1xuICBpbmZvcm08RSBleHRlbmRzIGtleW9mIFBvc3NpYmxlRXZlbnRzPihldmVudFR5cGU6IEUsIGRhdGE6IFBvc3NpYmxlRXZlbnRzW0VdKTogdm9pZDtcbn1cblxudHlwZSBFdmVudEhhbmRsZXJzID0ge1xuICBbZXZlbnQgaW4ga2V5b2YgUG9zc2libGVFdmVudHNdPzogW0Z1bmN0aW9uLCBzdHJpbmc/LCB1bmtub3duP107XG59O1xuXG5jbGFzcyBFdmVudE1hbmFnZXIge1xuICBwcml2YXRlIGxpc3RlbmVyczogSUV2ZW50TGlzdGVuZXJbXSA9IFtdO1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcjogSUV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyOiBJRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuZmlsdGVyKChpdGVtKSA9PiBpdGVtICE9PSBsaXN0ZW5lcik7XG4gIH1cblxuICBub3RpZnk8RSBleHRlbmRzIGtleW9mIFBvc3NpYmxlRXZlbnRzPihcbiAgICBldmVudFR5cGU6IEUsXG4gICAgZGF0YTogUG9zc2libGVFdmVudHNbRV0sXG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxpc3RlbmVycy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS5pbmZvcm0oZXZlbnRUeXBlLCBkYXRhKSk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgRXZlbnRNYW5hZ2VyLCBJRXZlbnRMaXN0ZW5lciwgUG9zc2libGVFdmVudHMsIEV2ZW50SGFuZGxlcnMsXG59O1xuIiwiaW1wb3J0IHsgRXZlbnRNYW5hZ2VyLCBJRXZlbnRMaXN0ZW5lciB9IGZyb20gJy4uL0V2ZW50TWFuYWdlci9FdmVudE1hbmFnZXInO1xuaW1wb3J0IE1vZGVsT3B0aW9ucyBmcm9tICcuL01vZGVsT3B0aW9ucyc7XG5cbmNsYXNzIE1vZGVsIHtcbiAgc3RhdGljIGRlZmF1bHRzOiBSZWFkb25seTxNb2RlbE9wdGlvbnM+ID0ge1xuICAgIG1pbjogMCxcbiAgICBtYXg6IDEwMCxcbiAgICBsZWZ0VmFsdWU6IDI1LFxuICAgIHJpZ2h0VmFsdWU6IDc1LFxuICAgIHN0ZXA6IDEsXG4gICAgcmFuZ2U6IHRydWUsXG4gIH07XG5cbiAgcHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlciA9IG5ldyBFdmVudE1hbmFnZXIoKTtcblxuICBwcml2YXRlIG1pbjogbnVtYmVyO1xuXG4gIHByaXZhdGUgbWF4OiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBsZWZ0VmFsdWU6IG51bWJlcjtcblxuICBwcml2YXRlIHJpZ2h0VmFsdWU/OiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBzdGVwOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSByYW5nZTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBQYXJ0aWFsPE1vZGVsT3B0aW9ucz4pIHtcbiAgICBjb25zdCB2YWxpZE9wdGlvbnMgPSBNb2RlbC52YWxpZGF0ZSh7IC4uLk1vZGVsLmRlZmF1bHRzLCAuLi5vcHRpb25zIH0pO1xuXG4gICAgdGhpcy5taW4gPSB2YWxpZE9wdGlvbnMubWluO1xuICAgIHRoaXMubWF4ID0gdmFsaWRPcHRpb25zLm1heDtcbiAgICB0aGlzLmxlZnRWYWx1ZSA9IHZhbGlkT3B0aW9ucy5sZWZ0VmFsdWU7XG4gICAgdGhpcy5zdGVwID0gdmFsaWRPcHRpb25zLnN0ZXA7XG5cbiAgICBpZiAodmFsaWRPcHRpb25zLnJhbmdlKSB7XG4gICAgICB0aGlzLnJpZ2h0VmFsdWUgPSB2YWxpZE9wdGlvbnMucmlnaHRWYWx1ZTtcbiAgICAgIHRoaXMucmFuZ2UgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJhbmdlID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyOiBJRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH1cblxuICBzZXRMZWZ0VmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh2YWx1ZSA8IHRoaXMubWluKSB7XG4gICAgICB0aGlzLmxlZnRWYWx1ZSA9IHRoaXMubWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXRoaXMucmFuZ2UpIHtcbiAgICAgICAgdGhpcy5sZWZ0VmFsdWUgPSBNYXRoLm1pbih2YWx1ZSwgdGhpcy5tYXgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yYW5nZSAmJiB0aGlzLnJpZ2h0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmxlZnRWYWx1ZSA9IE1hdGgubWluKHZhbHVlLCB0aGlzLnJpZ2h0VmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlZnRWYWx1ZSA9IHRoaXMuZml0VG9TdGVwKHRoaXMubGVmdFZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLmV2ZW50TWFuYWdlci5ub3RpZnkoJ21vZGVsU2V0TGVmdCcsIG51bGwpO1xuICB9XG5cbiAgc2V0UmlnaHRWYWx1ZSh2YWx1ZTogbnVtYmVyID0gdGhpcy5tYXgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMucmFuZ2UpIHJldHVybjtcblxuICAgIGlmICh2YWx1ZSA+IHRoaXMubWF4KSB7XG4gICAgICB0aGlzLnJpZ2h0VmFsdWUgPSB0aGlzLm1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yaWdodFZhbHVlID0gTWF0aC5tYXgodmFsdWUsIHRoaXMubGVmdFZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLnJpZ2h0VmFsdWUgPSB0aGlzLmZpdFRvU3RlcCh0aGlzLnJpZ2h0VmFsdWUpO1xuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdtb2RlbFNldFJpZ2h0JywgbnVsbCk7XG4gIH1cblxuICBzZXRMZWZ0VmFsdWVGcm9tUHgocHg6IG51bWJlciwgdHJhY2tMZW5ndGhJblB4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuY29udmVydFB4VG9WYWx1ZShweCwgdHJhY2tMZW5ndGhJblB4KTtcbiAgICB0aGlzLnNldExlZnRWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBzZXRSaWdodFZhbHVlRnJvbVB4KHB4OiBudW1iZXIsIHRyYWNrTGVuZ3RoSW5QeDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmNvbnZlcnRQeFRvVmFsdWUocHgsIHRyYWNrTGVuZ3RoSW5QeCk7XG4gICAgdGhpcy5zZXRSaWdodFZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIHJlbW92ZVJpZ2h0VmFsdWUoKTogdm9pZCB7XG4gICAgdGhpcy5yaWdodFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgc2V0TWluKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodmFsdWUgPiB0aGlzLmxlZnRWYWx1ZSkgcmV0dXJuO1xuICAgIHRoaXMubWluID0gdmFsdWU7XG5cbiAgICB0aGlzLmV2ZW50TWFuYWdlci5ub3RpZnkoJ21vZGVsU2V0TWluJywgbnVsbCk7XG4gIH1cblxuICBzZXRNYXgodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICghdGhpcy5yYW5nZSkge1xuICAgICAgaWYgKHZhbHVlIDwgdGhpcy5sZWZ0VmFsdWUpIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yYW5nZSAmJiB0aGlzLnJpZ2h0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHZhbHVlIDwgdGhpcy5yaWdodFZhbHVlKSByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5tYXggPSB2YWx1ZTtcblxuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgnbW9kZWxTZXRNYXgnLCBudWxsKTtcbiAgfVxuXG4gIHNldFN0ZXAodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh2YWx1ZSA8PSAwKSByZXR1cm47XG4gICAgaWYgKHZhbHVlID4gTWF0aC5hYnModGhpcy5tYXggLSB0aGlzLm1pbikpIHJldHVybjtcblxuICAgIHRoaXMuc3RlcCA9IHZhbHVlO1xuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdtb2RlbFNldFN0ZXAnLCBudWxsKTtcbiAgfVxuXG4gIHRvZ2dsZVJhbmdlKCk6IHZvaWQge1xuICAgIHRoaXMucmFuZ2UgPSAhdGhpcy5yYW5nZTtcblxuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgnbW9kZWxUb2dnbGVSYW5nZScsIG51bGwpO1xuICB9XG5cbiAgZ2V0T3B0aW9ucygpOiBNb2RlbE9wdGlvbnMge1xuICAgIHJldHVybiB7XG4gICAgICBtaW46IHRoaXMubWluLFxuICAgICAgbWF4OiB0aGlzLm1heCxcbiAgICAgIGxlZnRWYWx1ZTogdGhpcy5sZWZ0VmFsdWUsXG4gICAgICByaWdodFZhbHVlOiB0aGlzLnJpZ2h0VmFsdWUsXG4gICAgICBzdGVwOiB0aGlzLnN0ZXAsXG4gICAgICByYW5nZTogdGhpcy5yYW5nZSxcbiAgICB9O1xuICB9XG5cbiAgY29udmVydFZhbHVlVG9QZXJjZW50KHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBwZXJjZW50ID0gKCh2YWx1ZSAtIHRoaXMubWluKSAvICh0aGlzLm1heCAtIHRoaXMubWluKSkgKiAxMDA7XG4gICAgcGVyY2VudCA9IE1vZGVsLnJlbW92ZUNhbGNJbmFjY3VyYWN5KHBlcmNlbnQpO1xuXG4gICAgcmV0dXJuIHBlcmNlbnQ7XG4gIH1cblxuICBzdGF0aWMgaXNUd29MYWJlbHNDbG9zZShkaXN0YW5jZUluUHg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG1pbkRpc3RhbmNlQmV0d2VlbkxhYmVscyA9IDM7XG5cbiAgICBpZiAoZGlzdGFuY2VJblB4IDwgbWluRGlzdGFuY2VCZXR3ZWVuTGFiZWxzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyB2YWxpZGF0ZShvcHRpb25zOiBNb2RlbE9wdGlvbnMpOiBNb2RlbE9wdGlvbnMge1xuICAgIGxldCBmaXhlZE9wdGlvbnM6IE1vZGVsT3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuXG4gICAgY29uc3QgcmVtb3ZlV3JvbmdUeXBlcyA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrVHlwZSA9IChwcm9wZXJ0eToga2V5b2YgTW9kZWxPcHRpb25zKTogdm9pZCA9PiB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1twcm9wZXJ0eV0gIT09IHR5cGVvZiBNb2RlbC5kZWZhdWx0c1twcm9wZXJ0eV0pIHtcbiAgICAgICAgICBkZWxldGUgZml4ZWRPcHRpb25zW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLyogVGhlcmUgaXMgbm8gT2JqZWN0LmtleXMoKS5mb3JFYWNoIGJlY2F1c2UgVFMgdGhyb3dzIGFuIGVycm9yOlxuICAgICAgICogXCJUeXBlICdzdHJpbmdbXScgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAna2V5b2YgUmFuZ2VTbGlkZXJPcHRpb25zW10nXCIgKi9cbiAgICAgIGNoZWNrVHlwZSgnbWluJyk7XG4gICAgICBjaGVja1R5cGUoJ21heCcpO1xuICAgICAgY2hlY2tUeXBlKCdsZWZ0VmFsdWUnKTtcbiAgICAgIGNoZWNrVHlwZSgncmlnaHRWYWx1ZScpO1xuICAgICAgY2hlY2tUeXBlKCdyYW5nZScpO1xuICAgICAgY2hlY2tUeXBlKCdzdGVwJyk7XG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlV2l0aERlZmF1bHRzID0gKCk6IHZvaWQgPT4ge1xuICAgICAgZml4ZWRPcHRpb25zID0geyAuLi5Nb2RlbC5kZWZhdWx0cywgLi4uZml4ZWRPcHRpb25zIH07XG4gICAgfTtcblxuICAgIGNvbnN0IGZpeFZhbHVlcyA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGlmIChmaXhlZE9wdGlvbnMubWluID4gZml4ZWRPcHRpb25zLm1heCkge1xuICAgICAgICBbZml4ZWRPcHRpb25zLm1pbiwgZml4ZWRPcHRpb25zLm1heF0gPSBbZml4ZWRPcHRpb25zLm1heCwgZml4ZWRPcHRpb25zLm1pbl07XG4gICAgICB9XG5cbiAgICAgIGlmICghZml4ZWRPcHRpb25zLnJhbmdlKSB7XG4gICAgICAgIGZpeGVkT3B0aW9ucy5yaWdodFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoZml4ZWRPcHRpb25zLnJpZ2h0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZml4ZWRPcHRpb25zLmxlZnRWYWx1ZSA+IGZpeGVkT3B0aW9ucy5yaWdodFZhbHVlKSB7XG4gICAgICAgICAgW2ZpeGVkT3B0aW9ucy5sZWZ0VmFsdWUsIGZpeGVkT3B0aW9ucy5yaWdodFZhbHVlXSA9IChcbiAgICAgICAgICAgIFtmaXhlZE9wdGlvbnMucmlnaHRWYWx1ZSwgZml4ZWRPcHRpb25zLmxlZnRWYWx1ZV1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpeGVkT3B0aW9ucy5yaWdodFZhbHVlID4gZml4ZWRPcHRpb25zLm1heCkge1xuICAgICAgICAgIGZpeGVkT3B0aW9ucy5yaWdodFZhbHVlID0gZml4ZWRPcHRpb25zLm1heDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZml4ZWRPcHRpb25zLmxlZnRWYWx1ZSA8IGZpeGVkT3B0aW9ucy5taW4pIHtcbiAgICAgICAgZml4ZWRPcHRpb25zLmxlZnRWYWx1ZSA9IGZpeGVkT3B0aW9ucy5taW47XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXhlZE9wdGlvbnMubGVmdFZhbHVlID4gZml4ZWRPcHRpb25zLm1heCkge1xuICAgICAgICBmaXhlZE9wdGlvbnMubGVmdFZhbHVlID0gZml4ZWRPcHRpb25zLm1heDtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpeGVkT3B0aW9ucy5zdGVwID4gTWF0aC5hYnMoZml4ZWRPcHRpb25zLm1heCAtIGZpeGVkT3B0aW9ucy5taW4pKSB7XG4gICAgICAgIGZpeGVkT3B0aW9ucy5zdGVwID0gTWF0aC5hYnMoZml4ZWRPcHRpb25zLm1heCAtIGZpeGVkT3B0aW9ucy5taW4pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZW1vdmVXcm9uZ1R5cGVzKCk7XG4gICAgbWVyZ2VXaXRoRGVmYXVsdHMoKTtcbiAgICBmaXhWYWx1ZXMoKTtcblxuICAgIHJldHVybiBmaXhlZE9wdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyByZW1vdmVDYWxjSW5hY2N1cmFjeSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTnVtYmVyKHZhbHVlLnRvRml4ZWQoMTApKTtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFB4VG9WYWx1ZShweDogbnVtYmVyLCB0cmFja0xlbmd0aEluUHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgcGVyY2VudCA9IChweCAqIDEwMCkgLyB0cmFja0xlbmd0aEluUHg7XG5cbiAgICBsZXQgdmFsdWUgPSAoKHRoaXMubWF4IC0gdGhpcy5taW4pICogKHBlcmNlbnQgLyAxMDApICsgdGhpcy5taW4pO1xuICAgIHZhbHVlID0gTW9kZWwucmVtb3ZlQ2FsY0luYWNjdXJhY3kodmFsdWUpO1xuICAgIHZhbHVlID0gdGhpcy5maXRUb1N0ZXAodmFsdWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBmaXRUb1N0ZXAodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgbGV0IHJlc3VsdCA9IE1hdGgucm91bmQodmFsdWUgLyB0aGlzLnN0ZXApICogdGhpcy5zdGVwO1xuICAgIHJlc3VsdCA9IE1vZGVsLnJlbW92ZUNhbGNJbmFjY3VyYWN5KHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNb2RlbDtcbiIsImltcG9ydCBCYXNlRWxlbWVudCBmcm9tICcuLi8uLi9CYXNlRWxlbWVudC9CYXNlRWxlbWVudCc7XG5pbXBvcnQgeyBFdmVudE1hbmFnZXIsIElFdmVudExpc3RlbmVyIH0gZnJvbSAnLi4vLi4vLi4vRXZlbnRNYW5hZ2VyL0V2ZW50TWFuYWdlcic7XG5cbmNsYXNzIFRyYWNrIGV4dGVuZHMgQmFzZUVsZW1lbnQ8J2Rpdic+IHtcbiAgcHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlciA9IG5ldyBFdmVudE1hbmFnZXIoKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignZGl2JywgJ3JhbmdlLXNsaWRlcl9fdHJhY2snKTtcbiAgICB0aGlzLmF0dGFjaEV2ZW50SGFuZGxlcnMoKTtcbiAgfVxuXG4gIHN1YnNjcmliZShsaXN0ZW5lcjogSUV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50TWFuYWdlci5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9XG5cbiAgYXBwZW5kKC4uLmVsZW1lbnRzOiBIVE1MRWxlbWVudFtdKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnQuYXBwZW5kKC4uLmVsZW1lbnRzKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBjb25zdCB4OiBudW1iZXIgPSBldmVudC5jbGllbnRYIC0gZXZlbnQuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgICAgY29uc3QgeTogbnVtYmVyID0gZXZlbnQuY2xpZW50WSAtIGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuXG4gICAgICB0aGlzLmV2ZW50TWFuYWdlci5ub3RpZnkoJ3RyYWNrQ2xpY2snLCBbeCwgeV0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXR0YWNoRXZlbnRIYW5kbGVycygpOiB2b2lkIHtcbiAgICB0aGlzLmNvbXBvbmVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJhY2s7XG4iLCJpbXBvcnQgQmFzZUVsZW1lbnQgZnJvbSAnLi4vLi4vQmFzZUVsZW1lbnQvQmFzZUVsZW1lbnQnO1xuXG5jbGFzcyBSYW5nZSBleHRlbmRzIEJhc2VFbGVtZW50PCdkaXYnPiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdkaXYnLCAncmFuZ2Utc2xpZGVyX19yYW5nZScpO1xuICB9XG5cbiAgc2V0V2lkdGgocGVyY2VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnQuc3R5bGUud2lkdGggPSBgJHtwZXJjZW50fSVgO1xuICB9XG5cbiAgc2V0SGVpZ2h0KHBlcmNlbnQ6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50LnN0eWxlLmhlaWdodCA9IGAke3BlcmNlbnR9JWA7XG4gIH1cblxuICByZXNldFdpZHRoKCk6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50LnN0eWxlLndpZHRoID0gJ3Vuc2V0JztcbiAgfVxuXG4gIHJlc2V0SGVpZ2h0KCk6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50LnN0eWxlLmhlaWdodCA9ICd1bnNldCc7XG4gIH1cblxuICByZXNldFRvcEluZGVudCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbXBvbmVudC5zdHlsZS50b3AgPSAndW5zZXQnO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmdlO1xuIiwiaW1wb3J0IEJhc2VFbGVtZW50IGZyb20gJy4uLy4uL0Jhc2VFbGVtZW50L0Jhc2VFbGVtZW50JztcbmltcG9ydCB7IEV2ZW50TWFuYWdlciwgSUV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLi8uLi8uLi9FdmVudE1hbmFnZXIvRXZlbnRNYW5hZ2VyJztcblxuY2xhc3MgVGh1bWIgZXh0ZW5kcyBCYXNlRWxlbWVudDwnZGl2Jz4ge1xuICBwcml2YXRlIHR5cGU6ICdsZWZ0JyB8ICdyaWdodCc7XG5cbiAgcHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlciA9IG5ldyBFdmVudE1hbmFnZXIoKTtcblxuICBjb25zdHJ1Y3Rvcih0eXBlOiAnbGVmdCcgfCAncmlnaHQnID0gJ2xlZnQnKSB7XG4gICAgc3VwZXIoJ2RpdicsIGByYW5nZS1zbGlkZXJfX3RodW1iIHJhbmdlLXNsaWRlcl9fdGh1bWJfJHt0eXBlfWApO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5hdHRhY2hFdmVudEhhbmRsZXJzKCk7XG4gIH1cblxuICBzdWJzY3JpYmUobGlzdGVuZXI6IElFdmVudExpc3RlbmVyKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfVxuXG4gIGdldExlZnRJbmRlbnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuc3R5bGUubGVmdDtcbiAgfVxuXG4gIGdldFRvcEluZGVudCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5zdHlsZS50b3A7XG4gIH1cblxuICBzZXRaSW5kZXgodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50LnN0eWxlLnpJbmRleCA9IGAke3ZhbHVlfWA7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBoYW5kbGVQb2ludGVyT3ZlcihldmVudDogUG9pbnRlckV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdyYW5nZS1zbGlkZXJfX3RodW1iX2hvdmVyJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgaGFuZGxlUG9pbnRlck91dChldmVudDogUG9pbnRlckV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdyYW5nZS1zbGlkZXJfX3RodW1iX2hvdmVyJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgaGFuZGxlUG9pbnRlclVwKGV2ZW50OiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ3JhbmdlLXNsaWRlcl9fdGh1bWJfYWN0aXZlJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgaGFuZGxlRHJhZ1N0YXJ0KCk6IGZhbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVBvaW50ZXJEb3duKGV2ZW50OiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3JhbmdlLXNsaWRlcl9fdGh1bWJfYWN0aXZlJyk7XG5cbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuc2V0UG9pbnRlckNhcHR1cmUoZXZlbnQucG9pbnRlcklkKTtcblxuICAgICAgLy8gcHJldmVudCBzZWxlY3Rpb24gKGJyb3dzZXIgYWN0aW9uKVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgY29uc3Qgc2hpZnRYOiBudW1iZXIgPSBldmVudC5jbGllbnRYIC0gZXZlbnQuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgICAgY29uc3Qgc2hpZnRZOiBudW1iZXIgPSBldmVudC5jbGllbnRZIC0gZXZlbnQuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG5cbiAgICAgIGNvbnN0IGhhbmRsZVBvaW50ZXJNb3ZlID0gKG5ld0V2ZW50OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgeCA9IG5ld0V2ZW50LmNsaWVudFggLSBzaGlmdFg7XG4gICAgICAgIGNvbnN0IHkgPSBuZXdFdmVudC5jbGllbnRZIC0gc2hpZnRZO1xuXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdsZWZ0Jykge1xuICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgnbGVmdFRodW1iQ2hhbmdlUG9zaXRpb24nLCBbeCwgeV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgncmlnaHRUaHVtYkNoYW5nZVBvc2l0aW9uJywgW3gsIHldKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgaGFuZGxlUG9pbnRlclVwID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIGhhbmRsZVBvaW50ZXJNb3ZlKTtcbiAgICAgICAgdGhpcy5jb21wb25lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgaGFuZGxlUG9pbnRlclVwKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuY29tcG9uZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgdGhpcy5jb21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgaGFuZGxlUG9pbnRlclVwKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGF0dGFjaEV2ZW50SGFuZGxlcnMoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm92ZXInLCBUaHVtYi5oYW5kbGVQb2ludGVyT3Zlcik7XG4gICAgdGhpcy5jb21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm91dCcsIFRodW1iLmhhbmRsZVBvaW50ZXJPdXQpO1xuICAgIHRoaXMuY29tcG9uZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmNvbXBvbmVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBUaHVtYi5oYW5kbGVQb2ludGVyVXApO1xuICAgIHRoaXMuY29tcG9uZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIFRodW1iLmhhbmRsZURyYWdTdGFydCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGh1bWI7XG4iLCJpbXBvcnQgQmFzZUVsZW1lbnQgZnJvbSAnLi4vLi4vQmFzZUVsZW1lbnQvQmFzZUVsZW1lbnQnO1xuaW1wb3J0IHsgRXZlbnRNYW5hZ2VyLCBJRXZlbnRMaXN0ZW5lciB9IGZyb20gJy4uLy4uLy4uL0V2ZW50TWFuYWdlci9FdmVudE1hbmFnZXInO1xuXG5jbGFzcyBTY2FsZSBleHRlbmRzIEJhc2VFbGVtZW50PCdkaXYnPiB7XG4gIHByaXZhdGUgZXZlbnRNYW5hZ2VyOiBFdmVudE1hbmFnZXIgPSBuZXcgRXZlbnRNYW5hZ2VyKCk7XG5cbiAgcHJpdmF0ZSBpbnRlcnZhbHM6IEhUTUxEaXZFbGVtZW50W10gPSBbXTtcblxuICBwcml2YXRlIHZhbHVlczogbnVtYmVyW10gPSBbXTtcblxuICBwcml2YXRlIHZhbHVlRWxlbWVudHM6IEhUTUxTcGFuRWxlbWVudFtdID0gW107XG5cbiAgY29uc3RydWN0b3IobWluOiBudW1iZXIsIG1heDogbnVtYmVyLCBpbnRlcnZhbHNOdW1iZXI6IG51bWJlciA9IDQpIHtcbiAgICBzdXBlcignZGl2JywgJ3JhbmdlLXNsaWRlcl9fc2NhbGUnKTtcblxuICAgIHRoaXMuY3JlYXRlSW50ZXJ2YWxzKGludGVydmFsc051bWJlcik7XG4gICAgdGhpcy5hZGRNYXJrc0luSW50ZXJ2YWxzKGludGVydmFsc051bWJlcik7XG4gICAgdGhpcy5hZGRWYWx1ZXMobWluLCBtYXgsIGludGVydmFsc051bWJlcik7XG4gICAgdGhpcy5hdHRhY2hFdmVudEhhbmRsZXJzKCk7XG4gIH1cblxuICBzdWJzY3JpYmUobGlzdGVuZXI6IElFdmVudExpc3RlbmVyKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfVxuXG4gIGZpdFdpZHRoRm9yVmVydGljYWwoaW5kZW50OiBudW1iZXIgPSAzKTogdm9pZCB7XG4gICAgbGV0IG1heFdpZHRoID0gMDtcblxuICAgIHRoaXMudmFsdWVFbGVtZW50cy5mb3JFYWNoKCh2YWx1ZUVsZW1lbnQpID0+IHtcbiAgICAgIGlmICh2YWx1ZUVsZW1lbnQub2Zmc2V0V2lkdGggPiBtYXhXaWR0aCkge1xuICAgICAgICBtYXhXaWR0aCA9IHZhbHVlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuY29tcG9uZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke21heFdpZHRoICsgaW5kZW50fXB4YDtcbiAgfVxuXG4gIGZpdEhlaWdodEZvckhvcml6b250YWwoaW5kZW50OiBudW1iZXIgPSAzKTogdm9pZCB7XG4gICAgbGV0IG1heEhlaWdodCA9IDA7XG5cbiAgICB0aGlzLnZhbHVlRWxlbWVudHMuZm9yRWFjaCgodmFsdWVFbGVtZW50KSA9PiB7XG4gICAgICBpZiAodmFsdWVFbGVtZW50Lm9mZnNldEhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgICBtYXhIZWlnaHQgPSB2YWx1ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5jb21wb25lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IGAke21heEhlaWdodCArIGluZGVudH1weGA7XG4gIH1cblxuICBoYW5kbGVTd2l0Y2hGcm9tSG9yaXpvbnRhbFRvVmVydGljYWwoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9ICd1bnNldCc7XG4gICAgdGhpcy5maXRXaWR0aEZvclZlcnRpY2FsKCk7XG4gIH1cblxuICBoYW5kbGVTd2l0Y2hGcm9tVmVydGljYWxUb0hvcml6b250YWwoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJ3Vuc2V0JztcbiAgICB0aGlzLmZpdEhlaWdodEZvckhvcml6b250YWwoKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlSW50ZXJ2YWxzKGludGVydmFsc051bWJlcjogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgZnJhZ21lbnQgPSBuZXcgRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnRlcnZhbHNOdW1iZXI7IGkgKz0gMSkge1xuICAgICAgdGhpcy5pbnRlcnZhbHNbaV0gPSBCYXNlRWxlbWVudC5jcmVhdGVDb21wb25lbnQoJ2RpdicsICdyYW5nZS1zbGlkZXJfX3NjYWxlLWludGVydmFsJyk7XG4gICAgICBmcmFnbWVudC5hcHBlbmQodGhpcy5pbnRlcnZhbHNbaV0pO1xuICAgIH1cblxuICAgIHRoaXMuY29tcG9uZW50LmFwcGVuZChmcmFnbWVudCk7XG4gIH1cblxuICBwcml2YXRlIGFkZE1hcmtzSW5JbnRlcnZhbHMoaW50ZXJ2YWxzTnVtYmVyOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmludGVydmFscy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBmcmFnbWVudCA9IG5ldyBEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAgIGlmIChpbnRlcnZhbHNOdW1iZXIgPCAyOSkge1xuICAgICAgICBmcmFnbWVudC5hcHBlbmQoQmFzZUVsZW1lbnQuY3JlYXRlQ29tcG9uZW50KCdzcGFuJywgJ3JhbmdlLXNsaWRlcl9fc2NhbGUtbWFyaycpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGludGVydmFsc051bWJlciA8IDE1KSB7XG4gICAgICAgIGZyYWdtZW50LmFwcGVuZChCYXNlRWxlbWVudC5jcmVhdGVDb21wb25lbnQoJ3NwYW4nLCAncmFuZ2Utc2xpZGVyX19zY2FsZS1tYXJrJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW50ZXJ2YWxzTnVtYmVyIDwgOCkge1xuICAgICAgICBmcmFnbWVudC5hcHBlbmQoQmFzZUVsZW1lbnQuY3JlYXRlQ29tcG9uZW50KCdzcGFuJywgJ3JhbmdlLXNsaWRlcl9fc2NhbGUtbWFyaycpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGludGVydmFsc051bWJlciA8IDUpIHtcbiAgICAgICAgZnJhZ21lbnQuYXBwZW5kKEJhc2VFbGVtZW50LmNyZWF0ZUNvbXBvbmVudCgnc3BhbicsICdyYW5nZS1zbGlkZXJfX3NjYWxlLW1hcmsnKSk7XG4gICAgICB9XG5cbiAgICAgIGl0ZW0uYXBwZW5kKGZyYWdtZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkVmFsdWVzKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgaW50ZXJ2YWxzTnVtYmVyOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlc1swXSA9IG1pbjtcbiAgICBjb25zdCBzdGVwID0gKG1heCAtIG1pbikgLyBpbnRlcnZhbHNOdW1iZXI7XG4gICAgbGV0IG51bWJlck9mRGlnaXRzQWZ0ZXJQb2ludCA9IDA7XG5cbiAgICBpZiAoTWF0aC5yb3VuZChpbnRlcnZhbHNOdW1iZXIgLyAobWF4IC0gbWluKSkgIT09IDApIHtcbiAgICAgIG51bWJlck9mRGlnaXRzQWZ0ZXJQb2ludCA9IChNYXRoLnJvdW5kKGludGVydmFsc051bWJlciAvIChtYXggLSBtaW4pKSkudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBpbnRlcnZhbHNOdW1iZXI7IGkgKz0gMSkge1xuICAgICAgdGhpcy52YWx1ZXNbaV0gPSBOdW1iZXIoKChpICogc3RlcCkgKyBtaW4pLnRvRml4ZWQobnVtYmVyT2ZEaWdpdHNBZnRlclBvaW50KSk7XG4gICAgfVxuXG4gICAgdGhpcy52YWx1ZXMucHVzaChtYXgpO1xuXG4gICAgY29uc3QgdmFsdWVFbGVtZW50ID0gQmFzZUVsZW1lbnQuY3JlYXRlQ29tcG9uZW50KCdzcGFuJywgJ3JhbmdlLXNsaWRlcl9fc2NhbGUtaW50ZXJ2YWwtdmFsdWUgcmFuZ2Utc2xpZGVyX19zY2FsZS1pbnRlcnZhbC12YWx1ZV9taW4nKTtcbiAgICB2YWx1ZUVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHt0aGlzLnZhbHVlc1swXX1gO1xuICAgIHRoaXMuaW50ZXJ2YWxzWzBdLmFwcGVuZCh2YWx1ZUVsZW1lbnQpO1xuICAgIHRoaXMudmFsdWVFbGVtZW50cy5wdXNoKHZhbHVlRWxlbWVudCk7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMudmFsdWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBuZXdWYWx1ZUVsZW1lbnQgPSBCYXNlRWxlbWVudC5jcmVhdGVDb21wb25lbnQoJ3NwYW4nLCAncmFuZ2Utc2xpZGVyX19zY2FsZS1pbnRlcnZhbC12YWx1ZScpO1xuICAgICAgbmV3VmFsdWVFbGVtZW50LnRleHRDb250ZW50ID0gYCR7dGhpcy52YWx1ZXNbaV19YDtcbiAgICAgIHRoaXMuaW50ZXJ2YWxzW2kgLSAxXS5hcHBlbmQobmV3VmFsdWVFbGVtZW50KTtcbiAgICAgIHRoaXMudmFsdWVFbGVtZW50cy5wdXNoKG5ld1ZhbHVlRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHg6IG51bWJlciA9IGV2ZW50LmNsaWVudFggLSBldmVudC5jdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICBjb25zdCB5OiBudW1iZXIgPSBldmVudC5jbGllbnRZIC0gZXZlbnQuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG5cbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgnc2NhbGVDbGljaycsIFt4LCB5XSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhdHRhY2hFdmVudEhhbmRsZXJzKCk6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTY2FsZTtcbiIsImltcG9ydCBCYXNlRWxlbWVudCBmcm9tICcuLi8uLi9CYXNlRWxlbWVudC9CYXNlRWxlbWVudCc7XG5cbmNsYXNzIExhYmVsc0NvbnRhaW5lciBleHRlbmRzIEJhc2VFbGVtZW50PCdkaXYnPiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdkaXYnLCAncmFuZ2Utc2xpZGVyX19sYWJlbHMtY29udGFpbmVyJyk7XG4gIH1cblxuICBhcHBlbmQoLi4uZWxlbWVudHM6IEhUTUxFbGVtZW50W10pOiB2b2lkIHtcbiAgICB0aGlzLmNvbXBvbmVudC5hcHBlbmQoLi4uZWxlbWVudHMpO1xuICB9XG5cbiAgZml4V2lkdGhGb3JWZXJ0aWNhbChsYWJlbHM6IEhUTUxFbGVtZW50W10sIGluZGVudDogbnVtYmVyID0gNCk6IHZvaWQge1xuICAgIGxldCBtYXhXaWR0aCA9IDA7XG5cbiAgICBsYWJlbHMuZm9yRWFjaCgobGFiZWwpID0+IHtcbiAgICAgIGlmIChsYWJlbC5vZmZzZXRXaWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICAgIG1heFdpZHRoID0gbGFiZWwub2Zmc2V0V2lkdGg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbXBvbmVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IGAke21heFdpZHRoICsgaW5kZW50fXB4YDtcbiAgfVxuXG4gIGZpeEhlaWdodEZvckhvcml6b250YWwobGFiZWxzOiBIVE1MRWxlbWVudFtdLCBpbmRlbnQ6IG51bWJlciA9IDQpOiB2b2lkIHtcbiAgICBsZXQgbWF4SGVpZ2h0ID0gMDtcblxuICAgIGxhYmVscy5mb3JFYWNoKChsYWJlbCkgPT4ge1xuICAgICAgaWYgKGxhYmVsLm9mZnNldEhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgICBtYXhIZWlnaHQgPSBsYWJlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbXBvbmVudC5zdHlsZS5wYWRkaW5nVG9wID0gYCR7bWF4SGVpZ2h0ICsgaW5kZW50fXB4YDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMYWJlbHNDb250YWluZXI7XG4iLCJpbXBvcnQgQmFzZUVsZW1lbnQgZnJvbSAnLi4vLi4vQmFzZUVsZW1lbnQvQmFzZUVsZW1lbnQnO1xuXG5jbGFzcyBMYWJlbCBleHRlbmRzIEJhc2VFbGVtZW50PCdkaXYnPiB7XG4gIGNvbnN0cnVjdG9yKGNsYXNzTmFtZT86IHN0cmluZykge1xuICAgIHN1cGVyKCdkaXYnLCBjbGFzc05hbWUpO1xuICB9XG5cbiAgc2V0T3BhY2l0eSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnQuc3R5bGUub3BhY2l0eSA9IGAke3ZhbHVlfWA7XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnQudGV4dENvbnRlbnQgPSBgJHt2YWx1ZX1gO1xuICB9XG5cbiAgZ2V0VmFsdWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTnVtYmVyKHRoaXMuY29tcG9uZW50LnRleHRDb250ZW50KTtcbiAgfVxuXG4gIGdldExlZnRJbmRlbnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnQuc3R5bGUubGVmdDtcbiAgfVxuXG4gIGdldFRvcEluZGVudCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5zdHlsZS50b3A7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGFiZWw7XG4iLCJpbXBvcnQgQmFzZUVsZW1lbnQgZnJvbSAnLi4vLi4vQmFzZUVsZW1lbnQvQmFzZUVsZW1lbnQnO1xuXG5jbGFzcyBJbnB1dCBleHRlbmRzIEJhc2VFbGVtZW50PCdpbnB1dCc+IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ2lucHV0JywgJ3JhbmdlLXNsaWRlcl9faW5wdXQnKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZXMoKTtcbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlMTogbnVtYmVyLCB2YWx1ZTI6IG51bWJlciB8IG51bGwgPSBudWxsKTogdm9pZCB7XG4gICAgaWYgKHZhbHVlMiA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5jb21wb25lbnQudmFsdWUgPSBgJHt2YWx1ZTF9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb21wb25lbnQudmFsdWUgPSBgJHt2YWx1ZTF9IC0gJHt2YWx1ZTJ9YDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldEF0dHJpYnV0ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5jb21wb25lbnQudHlwZSA9ICd0ZXh0JztcbiAgICB0aGlzLmNvbXBvbmVudC50YWJJbmRleCA9IC0xO1xuICAgIHRoaXMuY29tcG9uZW50LnJlYWRPbmx5ID0gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnB1dDtcbiIsImltcG9ydCBCYXNlRWxlbWVudCBmcm9tICcuL0Jhc2VFbGVtZW50L0Jhc2VFbGVtZW50JztcbmltcG9ydCBUcmFjayBmcm9tICcuL3N1YnZpZXdzL1RyYWNrL1RyYWNrJztcbmltcG9ydCBSYW5nZSBmcm9tICcuL3N1YnZpZXdzL1JhbmdlL1JhbmdlJztcbmltcG9ydCBUaHVtYiBmcm9tICcuL3N1YnZpZXdzL1RodW1iL1RodW1iJztcbmltcG9ydCBTY2FsZSBmcm9tICcuL3N1YnZpZXdzL1NjYWxlL1NjYWxlJztcbmltcG9ydCBMYWJlbHNDb250YWluZXIgZnJvbSAnLi9zdWJ2aWV3cy9MYWJlbHNDb250YWluZXIvTGFiZWxzQ29udGFpbmVyJztcbmltcG9ydCBMYWJlbCBmcm9tICcuL3N1YnZpZXdzL0xhYmVsL0xhYmVsJztcbmltcG9ydCBJbnB1dCBmcm9tICcuL3N1YnZpZXdzL0lucHV0L0lucHV0JztcbmltcG9ydCB7XG4gIEV2ZW50TWFuYWdlciwgSUV2ZW50TGlzdGVuZXIsIFBvc3NpYmxlRXZlbnRzLCBFdmVudEhhbmRsZXJzLFxufSBmcm9tICcuLi9FdmVudE1hbmFnZXIvRXZlbnRNYW5hZ2VyJztcblxudHlwZSBWaWV3T3B0aW9ucyA9IHtcbiAgbWluTWF4TGFiZWxzOiBib29sZWFuLFxuICB2YWx1ZUxhYmVsczogYm9vbGVhbixcbiAgdmVydGljYWw6IGJvb2xlYW4sXG4gIHJhbmdlOiBib29sZWFuLFxuICBzY2FsZTogYm9vbGVhbixcbiAgc2NhbGVJbnRlcnZhbHM6IG51bWJlcixcbn07XG5cbmNsYXNzIFZpZXcgZXh0ZW5kcyBCYXNlRWxlbWVudDwnZGl2Jz4gaW1wbGVtZW50cyBJRXZlbnRMaXN0ZW5lciB7XG4gIHByaXZhdGUgc3RhdGljIGRlZmF1bHRzOiBSZWFkb25seTxWaWV3T3B0aW9ucz4gPSB7XG4gICAgbWluTWF4TGFiZWxzOiB0cnVlLFxuICAgIHZhbHVlTGFiZWxzOiB0cnVlLFxuICAgIHZlcnRpY2FsOiBmYWxzZSxcbiAgICByYW5nZTogdHJ1ZSxcbiAgICBzY2FsZTogZmFsc2UsXG4gICAgc2NhbGVJbnRlcnZhbHM6IDUsXG4gIH07XG5cbiAgcHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlciA9IG5ldyBFdmVudE1hbmFnZXIoKTtcblxuICBwcml2YXRlIHNsaWRlcjogSFRNTERpdkVsZW1lbnQgPSBCYXNlRWxlbWVudC5jcmVhdGVDb21wb25lbnQoJ2RpdicsICdyYW5nZS1zbGlkZXJfX3NsaWRlcicpO1xuXG4gIHByaXZhdGUgdHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKCk7XG5cbiAgcHJpdmF0ZSByYW5nZTogUmFuZ2UgPSBuZXcgUmFuZ2UoKTtcblxuICBwcml2YXRlIGlucHV0OiBJbnB1dCA9IG5ldyBJbnB1dCgpO1xuXG4gIHByaXZhdGUgdGh1bWJMZWZ0OiBUaHVtYiA9IG5ldyBUaHVtYignbGVmdCcpO1xuXG4gIHByaXZhdGUgdGh1bWJSaWdodD86IFRodW1iO1xuXG4gIHByaXZhdGUgc2NhbGU/OiBTY2FsZTtcblxuICBwcml2YXRlIHNjYWxlSW50ZXJ2YWxzOiBudW1iZXIgPSA1O1xuXG4gIHByaXZhdGUgbWluTGFiZWw/OiBMYWJlbDtcblxuICBwcml2YXRlIG1heExhYmVsPzogTGFiZWw7XG5cbiAgcHJpdmF0ZSB2YWx1ZUxhYmVsTGVmdD86IExhYmVsO1xuXG4gIHByaXZhdGUgdmFsdWVMYWJlbFJpZ2h0PzogTGFiZWw7XG5cbiAgcHJpdmF0ZSB2YWx1ZUxhYmVsQ29tbW9uPzogTGFiZWw7XG5cbiAgcHJpdmF0ZSB2ZXJ0aWNhbD86IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBsYWJlbHNDb250YWluZXI/OiBMYWJlbHNDb250YWluZXI7XG5cbiAgY29uc3RydWN0b3IoY29tcG9uZW50OiBIVE1MRGl2RWxlbWVudCwgb3B0aW9ucz86IFBhcnRpYWw8Vmlld09wdGlvbnM+KSB7XG4gICAgc3VwZXIoJ2RpdicpO1xuICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIGNvbnN0IHZhbGlkT3B0aW9ucyA9IFZpZXcudmFsaWRhdGUoeyAuLi5WaWV3LmRlZmF1bHRzLCAuLi5vcHRpb25zIH0pO1xuICAgIHRoaXMuaW5pdE9wdGlvbmFsRmllbGRzKHZhbGlkT3B0aW9ucyk7XG4gICAgdGhpcy5zdWJzY3JpYmVUb1N1YnZpZXdzKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHN1YnNjcmliZShsaXN0ZW5lcjogSUV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICB0aGlzLmV2ZW50TWFuYWdlci5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9XG5cbiAgaW5mb3JtPEUgZXh0ZW5kcyBrZXlvZiBQb3NzaWJsZUV2ZW50cz4oZXZlbnRUeXBlOiBFLCBkYXRhOiBQb3NzaWJsZUV2ZW50c1tFXSk6IHZvaWQge1xuICAgIGNvbnN0IGV2ZW50SGFuZGxlcnM6IEV2ZW50SGFuZGxlcnMgPSB7XG4gICAgICBzY2FsZUNsaWNrOiBbdGhpcy5oYW5kbGVTY2FsZU9yVHJhY2tDbGlja10sXG4gICAgICB0cmFja0NsaWNrOiBbdGhpcy5oYW5kbGVTY2FsZU9yVHJhY2tDbGlja10sXG4gICAgICBsZWZ0VGh1bWJDaGFuZ2VQb3NpdGlvbjogW3RoaXMuaGFuZGxlTGVmdElucHV0XSxcbiAgICAgIHJpZ2h0VGh1bWJDaGFuZ2VQb3NpdGlvbjogW3RoaXMuaGFuZGxlUmlnaHRJbnB1dF0sXG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZXIgPSBldmVudEhhbmRsZXJzW2V2ZW50VHlwZV07XG4gICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCAmJiBBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBjb25zdCB4OiBudW1iZXIgPSBkYXRhWzBdO1xuICAgICAgY29uc3QgeTogbnVtYmVyID0gZGF0YVsxXTtcbiAgICAgIGhhbmRsZXJbMF0uY2FsbCh0aGlzLCB4LCB5KTtcbiAgICB9XG4gIH1cblxuICBzZXRNaW5WYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5taW5MYWJlbD8uc2V0VmFsdWUodmFsdWUpO1xuICB9XG5cbiAgc2V0TWF4VmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMubWF4TGFiZWw/LnNldFZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIHNldExlZnRWYWx1ZSh2YWx1ZTogbnVtYmVyLCBwZXJjZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMudmVydGljYWwpIHtcbiAgICAgIHRoaXMudGh1bWJMZWZ0LnNldEluZGVudCgnbGVmdCcsIHBlcmNlbnQpO1xuICAgICAgdGhpcy50aHVtYkxlZnQuc2V0WkluZGV4KHBlcmNlbnQgPT09IDEwMCA/IDEwMCA6IDMpO1xuXG4gICAgICBpZiAodGhpcy5pc1JhbmdlKCkpIHtcbiAgICAgICAgdGhpcy5yYW5nZS5zZXRJbmRlbnQoJ2xlZnQnLCBwZXJjZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmFuZ2Uuc2V0V2lkdGgocGVyY2VudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudmFsdWVMYWJlbExlZnQ/LnNldEluZGVudCgnbGVmdCcsIGAke3BlcmNlbnR9JWApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICB0aGlzLnRodW1iTGVmdC5zZXRJbmRlbnQoJ3RvcCcsIDEwMCAtIHBlcmNlbnQpO1xuICAgICAgdGhpcy50aHVtYkxlZnQuc2V0WkluZGV4KHBlcmNlbnQgPT09IDEwMCA/IDEwMCA6IDMpO1xuXG4gICAgICBpZiAodGhpcy5pc1JhbmdlKCkpIHtcbiAgICAgICAgdGhpcy5yYW5nZS5zZXRJbmRlbnQoJ2JvdHRvbScsIHBlcmNlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yYW5nZS5zZXRIZWlnaHQocGVyY2VudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudmFsdWVMYWJlbExlZnQ/LnNldEluZGVudCgndG9wJywgYCR7MTAwIC0gcGVyY2VudH0lYCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFsdWVMYWJlbExlZnQpIHtcbiAgICAgIHRoaXMudmFsdWVMYWJlbExlZnQuc2V0VmFsdWUodmFsdWUpO1xuXG4gICAgICBpZiAodGhpcy5pc1JhbmdlKCkpIHtcbiAgICAgICAgdGhpcy52YWx1ZUxhYmVsQ29tbW9uPy5zZXRWYWx1ZShgJHt2YWx1ZX0gLSAke3RoaXMudmFsdWVMYWJlbFJpZ2h0Py5nZXRWYWx1ZSgpfWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgndmlld1NldExlZnQnLCBudWxsKTtcbiAgfVxuXG4gIHNldFJpZ2h0VmFsdWUodmFsdWU6IG51bWJlciwgcGVyY2VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnZlcnRpY2FsKSB7XG4gICAgICB0aGlzLnRodW1iUmlnaHQ/LnNldEluZGVudCgnbGVmdCcsIHBlcmNlbnQpO1xuICAgICAgdGhpcy5yYW5nZS5zZXRJbmRlbnQoJ3JpZ2h0JywgMTAwIC0gcGVyY2VudCk7XG4gICAgICB0aGlzLnZhbHVlTGFiZWxSaWdodD8uc2V0SW5kZW50KCdsZWZ0JywgYCR7cGVyY2VudH0lYCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIHRoaXMudGh1bWJSaWdodD8uc2V0SW5kZW50KCd0b3AnLCAxMDAgLSBwZXJjZW50KTtcbiAgICAgIHRoaXMucmFuZ2Uuc2V0SW5kZW50KCd0b3AnLCAxMDAgLSBwZXJjZW50KTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbFJpZ2h0Py5zZXRJbmRlbnQoJ3RvcCcsIGAkezEwMCAtIHBlcmNlbnR9JWApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZhbHVlTGFiZWxSaWdodCkge1xuICAgICAgdGhpcy52YWx1ZUxhYmVsUmlnaHQuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgdGhpcy52YWx1ZUxhYmVsQ29tbW9uPy5zZXRWYWx1ZShgJHt0aGlzLnZhbHVlTGFiZWxMZWZ0Py5nZXRWYWx1ZSgpfSAtICR7dmFsdWV9YCk7XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCd2aWV3U2V0UmlnaHQnLCBudWxsKTtcbiAgfVxuXG4gIHVwZGF0ZUlucHV0KHZhbHVlMTogbnVtYmVyLCB2YWx1ZTI6IG51bWJlciB8IG51bGwgPSBudWxsKTogdm9pZCB7XG4gICAgdGhpcy5pbnB1dC5zZXRWYWx1ZSh2YWx1ZTEsIHZhbHVlMik7XG4gIH1cblxuICBhZGRTY2FsZShtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNjYWxlID0gbmV3IFNjYWxlKG1pbiwgbWF4LCB0aGlzLmdldFNjYWxlSW50ZXJ2YWxzKCkpO1xuICAgIHRoaXMuc2xpZGVyLmFmdGVyKHRoaXMuc2NhbGUuZ2V0Q29tcG9uZW50KCkpO1xuICAgIHRoaXMuc2NhbGUuc3Vic2NyaWJlKHRoaXMpO1xuXG4gICAgaWYgKCF0aGlzLnZlcnRpY2FsKSB7XG4gICAgICB0aGlzLnNjYWxlLmZpdEhlaWdodEZvckhvcml6b250YWwoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgdGhpcy5zY2FsZS5maXRXaWR0aEZvclZlcnRpY2FsKCk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlU2NhbGUoKTogdm9pZCB7XG4gICAgdGhpcy5zY2FsZT8uZ2V0Q29tcG9uZW50KCkucmVtb3ZlKCk7XG4gICAgdGhpcy5zY2FsZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHNldFNjYWxlSW50ZXJ2YWxzKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodmFsdWUgPD0gMCkgcmV0dXJuO1xuXG4gICAgdGhpcy5zY2FsZUludGVydmFscyA9IE1hdGguZmxvb3IodmFsdWUpO1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgndmlld1NldFNjYWxlSW50ZXJ2YWxzJywgbnVsbCk7XG4gIH1cblxuICBnZXRTY2FsZUludGVydmFscygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNjYWxlSW50ZXJ2YWxzO1xuICB9XG5cbiAgZml4TGFiZWxzQ29udGFpbmVyV2lkdGhGb3JWZXJ0aWNhbCgpOiB2b2lkIHtcbiAgICBjb25zdCBsYWJlbHM6IEhUTUxFbGVtZW50W10gPSB0aGlzLmNvbGxlY3RMYWJlbHMoKTtcbiAgICB0aGlzLmxhYmVsc0NvbnRhaW5lcj8uZml4V2lkdGhGb3JWZXJ0aWNhbChsYWJlbHMpO1xuICB9XG5cbiAgZml4TGFiZWxzQ29udGFpbmVySGVpZ2h0Rm9ySG9yaXpvbnRhbCgpOiB2b2lkIHtcbiAgICBjb25zdCBsYWJlbHM6IEhUTUxFbGVtZW50W10gPSB0aGlzLmNvbGxlY3RMYWJlbHMoKTtcbiAgICB0aGlzLmxhYmVsc0NvbnRhaW5lcj8uZml4SGVpZ2h0Rm9ySG9yaXpvbnRhbChsYWJlbHMpO1xuICB9XG5cbiAgdG9nZ2xlT3JpZW50YXRpb24oKTogdm9pZCB7XG4gICAgdGhpcy52ZXJ0aWNhbCA9ICF0aGlzLnZlcnRpY2FsO1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIHRoaXMucmVuZGVyKCk7XG5cbiAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgdGhpcy50aHVtYkxlZnQuc2V0SW5kZW50KCdsZWZ0JywgMCk7XG4gICAgICB0aGlzLnRodW1iUmlnaHQ/LnNldEluZGVudCgnbGVmdCcsIDApO1xuICAgICAgdGhpcy5yYW5nZS5zZXRJbmRlbnQoJ2xlZnQnLCAwKTtcbiAgICAgIHRoaXMucmFuZ2Uuc2V0SW5kZW50KCdyaWdodCcsIDApO1xuICAgICAgdGhpcy5yYW5nZS5yZXNldFRvcEluZGVudCgpO1xuICAgICAgdGhpcy5yYW5nZS5yZXNldFdpZHRoKCk7XG4gICAgICB0aGlzLnZhbHVlTGFiZWxMZWZ0Py5zZXRJbmRlbnQoJ2xlZnQnLCAndW5zZXQnKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbFJpZ2h0Py5zZXRJbmRlbnQoJ2xlZnQnLCAndW5zZXQnKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbENvbW1vbj8uc2V0SW5kZW50KCdsZWZ0JywgJ3Vuc2V0Jyk7XG4gICAgICBpZiAodGhpcy5oYXNMYWJlbHMoKSkgdGhpcy5maXhMYWJlbHNDb250YWluZXJXaWR0aEZvclZlcnRpY2FsKCk7XG4gICAgICB0aGlzLnNjYWxlPy5oYW5kbGVTd2l0Y2hGcm9tSG9yaXpvbnRhbFRvVmVydGljYWwoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMudmVydGljYWwpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3JhbmdlLXNsaWRlcl92ZXJ0aWNhbCcpO1xuICAgICAgdGhpcy50aHVtYkxlZnQuc2V0SW5kZW50KCd0b3AnLCAwKTtcbiAgICAgIHRoaXMudGh1bWJSaWdodD8uc2V0SW5kZW50KCd0b3AnLCAwKTtcbiAgICAgIHRoaXMucmFuZ2Uuc2V0SW5kZW50KCdib3R0b20nLCAwKTtcbiAgICAgIHRoaXMucmFuZ2Uuc2V0SW5kZW50KCd0b3AnLCAwKTtcbiAgICAgIHRoaXMucmFuZ2UucmVzZXRIZWlnaHQoKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbExlZnQ/LnNldEluZGVudCgndG9wJywgJ3Vuc2V0Jyk7XG4gICAgICB0aGlzLnZhbHVlTGFiZWxSaWdodD8uc2V0SW5kZW50KCd0b3AnLCAndW5zZXQnKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbENvbW1vbj8uc2V0SW5kZW50KCd0b3AnLCAndW5zZXQnKTtcbiAgICAgIGlmICh0aGlzLmhhc0xhYmVscygpKSB0aGlzLmZpeExhYmVsc0NvbnRhaW5lckhlaWdodEZvckhvcml6b250YWwoKTtcbiAgICAgIHRoaXMuc2NhbGU/LmhhbmRsZVN3aXRjaEZyb21WZXJ0aWNhbFRvSG9yaXpvbnRhbCgpO1xuICAgIH1cblxuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgndmlld1RvZ2dsZU9yaWVudGF0aW9uJywgbnVsbCk7XG4gIH1cblxuICB0b2dnbGVSYW5nZSgpOiB2b2lkIHtcbiAgICBjb25zdCBpc1JhbmdlID0gIXRoaXMuaXNSYW5nZSgpO1xuICAgIHRoaXMuZGVzdHJveSgpO1xuXG4gICAgaWYgKGlzUmFuZ2UpIHtcbiAgICAgIHRoaXMudGh1bWJSaWdodCA9IG5ldyBUaHVtYigncmlnaHQnKTtcbiAgICAgIHRoaXMudGh1bWJSaWdodC5zdWJzY3JpYmUodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLnZhbHVlTGFiZWxMZWZ0KSB7XG4gICAgICAgIHRoaXMudmFsdWVMYWJlbFJpZ2h0ID0gbmV3IExhYmVsKCdyYW5nZS1zbGlkZXJfX3ZhbHVlLWxhYmVsIHJhbmdlLXNsaWRlcl9fdmFsdWUtbGFiZWxfcmlnaHQnKTtcbiAgICAgICAgdGhpcy52YWx1ZUxhYmVsQ29tbW9uID0gbmV3IExhYmVsKCdyYW5nZS1zbGlkZXJfX3ZhbHVlLWxhYmVsIHJhbmdlLXNsaWRlcl9fdmFsdWUtbGFiZWxfY29tbW9uJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy52ZXJ0aWNhbCkge1xuICAgICAgICB0aGlzLnJhbmdlLnJlc2V0V2lkdGgoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgdGhpcy5yYW5nZS5yZXNldEhlaWdodCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghaXNSYW5nZSkge1xuICAgICAgdGhpcy50aHVtYlJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy52YWx1ZUxhYmVsUmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnZhbHVlTGFiZWxDb21tb24gPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgIHRoaXMucmFuZ2UucmVzZXRUb3BJbmRlbnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgndmlld1RvZ2dsZVJhbmdlJywgbnVsbCk7XG4gIH1cblxuICB0b2dnbGVWYWx1ZUxhYmVscygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52YWx1ZUxhYmVsTGVmdCkge1xuICAgICAgdGhpcy52YWx1ZUxhYmVsTGVmdC5yZW1vdmUoKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbFJpZ2h0Py5yZW1vdmUoKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbENvbW1vbj8ucmVtb3ZlKCk7XG5cbiAgICAgIHRoaXMudmFsdWVMYWJlbExlZnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnZhbHVlTGFiZWxSaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMudmFsdWVMYWJlbENvbW1vbiA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHRoaXMubWluTGFiZWwpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgICAgdGhpcy5maXhMYWJlbHNDb250YWluZXJIZWlnaHRGb3JIb3Jpem9udGFsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgICAgIHRoaXMuZml4TGFiZWxzQ29udGFpbmVyV2lkdGhGb3JWZXJ0aWNhbCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5taW5MYWJlbCkge1xuICAgICAgICB0aGlzLmxhYmVsc0NvbnRhaW5lcj8ucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMubGFiZWxzQ29udGFpbmVyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnZhbHVlTGFiZWxMZWZ0KSB7XG4gICAgICB0aGlzLnZhbHVlTGFiZWxMZWZ0ID0gbmV3IExhYmVsKCdyYW5nZS1zbGlkZXJfX3ZhbHVlLWxhYmVsIHJhbmdlLXNsaWRlcl9fdmFsdWUtbGFiZWxfbGVmdCcpO1xuXG4gICAgICBpZiAoIXRoaXMubGFiZWxzQ29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMubGFiZWxzQ29udGFpbmVyID0gbmV3IExhYmVsc0NvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLnNsaWRlci5iZWZvcmUodGhpcy5sYWJlbHNDb250YWluZXIuZ2V0Q29tcG9uZW50KCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxhYmVsc0NvbnRhaW5lci5hcHBlbmQodGhpcy52YWx1ZUxhYmVsTGVmdC5nZXRDb21wb25lbnQoKSk7XG5cbiAgICAgIGlmICh0aGlzLmlzUmFuZ2UoKSkge1xuICAgICAgICB0aGlzLnZhbHVlTGFiZWxSaWdodCA9IG5ldyBMYWJlbCgncmFuZ2Utc2xpZGVyX192YWx1ZS1sYWJlbCByYW5nZS1zbGlkZXJfX3ZhbHVlLWxhYmVsX3JpZ2h0Jyk7XG4gICAgICAgIHRoaXMudmFsdWVMYWJlbENvbW1vbiA9IG5ldyBMYWJlbCgncmFuZ2Utc2xpZGVyX192YWx1ZS1sYWJlbCByYW5nZS1zbGlkZXJfX3ZhbHVlLWxhYmVsX2NvbW1vbicpO1xuXG4gICAgICAgIHRoaXMubGFiZWxzQ29udGFpbmVyXG4gICAgICAgICAgLmFwcGVuZCh0aGlzLnZhbHVlTGFiZWxSaWdodD8uZ2V0Q29tcG9uZW50KCksIHRoaXMudmFsdWVMYWJlbENvbW1vbj8uZ2V0Q29tcG9uZW50KCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmV2ZW50TWFuYWdlci5ub3RpZnkoJ3ZpZXdBZGRWYWx1ZUxhYmVscycsIG51bGwpO1xuXG4gICAgICBpZiAoIXRoaXMudmVydGljYWwpIHtcbiAgICAgICAgdGhpcy5maXhMYWJlbHNDb250YWluZXJIZWlnaHRGb3JIb3Jpem9udGFsKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgIHRoaXMuZml4TGFiZWxzQ29udGFpbmVyV2lkdGhGb3JWZXJ0aWNhbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZU1pbk1heExhYmVscygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5taW5MYWJlbCkge1xuICAgICAgdGhpcy5taW5MYWJlbC5yZW1vdmUoKTtcbiAgICAgIHRoaXMubWF4TGFiZWw/LnJlbW92ZSgpO1xuXG4gICAgICB0aGlzLm1pbkxhYmVsID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5tYXhMYWJlbCA9IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHRoaXMudmFsdWVMYWJlbExlZnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgICAgdGhpcy5maXhMYWJlbHNDb250YWluZXJIZWlnaHRGb3JIb3Jpem9udGFsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgICAgIHRoaXMuZml4TGFiZWxzQ29udGFpbmVyV2lkdGhGb3JWZXJ0aWNhbCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy52YWx1ZUxhYmVsTGVmdCkge1xuICAgICAgICB0aGlzLmxhYmVsc0NvbnRhaW5lcj8ucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMubGFiZWxzQ29udGFpbmVyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm1pbkxhYmVsKSB7XG4gICAgICB0aGlzLm1pbkxhYmVsID0gbmV3IExhYmVsKCdyYW5nZS1zbGlkZXJfX21pbi1tYXgtbGFiZWwgcmFuZ2Utc2xpZGVyX19taW4tbWF4LWxhYmVsX2xlZnQnKTtcbiAgICAgIHRoaXMubWF4TGFiZWwgPSBuZXcgTGFiZWwoJ3JhbmdlLXNsaWRlcl9fbWluLW1heC1sYWJlbCByYW5nZS1zbGlkZXJfX21pbi1tYXgtbGFiZWxfcmlnaHQnKTtcblxuICAgICAgaWYgKCF0aGlzLmxhYmVsc0NvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmxhYmVsc0NvbnRhaW5lciA9IG5ldyBMYWJlbHNDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5zbGlkZXIuYmVmb3JlKHRoaXMubGFiZWxzQ29udGFpbmVyLmdldENvbXBvbmVudCgpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sYWJlbHNDb250YWluZXIuYXBwZW5kKHRoaXMubWluTGFiZWwuZ2V0Q29tcG9uZW50KCksIHRoaXMubWF4TGFiZWwuZ2V0Q29tcG9uZW50KCkpO1xuXG4gICAgICB0aGlzLmV2ZW50TWFuYWdlci5ub3RpZnkoJ3ZpZXdBZGRNaW5NYXhMYWJlbHMnLCBudWxsKTtcblxuICAgICAgaWYgKCF0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgIHRoaXMuZml4TGFiZWxzQ29udGFpbmVySGVpZ2h0Rm9ySG9yaXpvbnRhbCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgICB0aGlzLmZpeExhYmVsc0NvbnRhaW5lcldpZHRoRm9yVmVydGljYWwoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXNMYWJlbHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy52YWx1ZUxhYmVsTGVmdCB8fCB0aGlzLm1pbkxhYmVsKTtcbiAgfVxuXG4gIGhhc1NjYWxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuc2NhbGUpO1xuICB9XG5cbiAgaGFzTWluTWF4TGFiZWxzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMubWF4TGFiZWwpO1xuICB9XG5cbiAgaGFzVmFsdWVMYWJlbHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy52YWx1ZUxhYmVsTGVmdCk7XG4gIH1cblxuICBpc1JhbmdlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudGh1bWJSaWdodCk7XG4gIH1cblxuICBpc1ZlcnRpY2FsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudmVydGljYWwpO1xuICB9XG5cbiAgZ2V0VHJhY2tMZW5ndGgoKTogbnVtYmVyIHtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLmlzVmVydGljYWwoKSA/IHRoaXMudHJhY2suZ2V0SGVpZ2h0KCkgOiB0aGlzLnRyYWNrLmdldFdpZHRoKCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfVxuXG4gIGdldE9wdGlvbnMoKTogVmlld09wdGlvbnMge1xuICAgIHJldHVybiB7XG4gICAgICBtaW5NYXhMYWJlbHM6IHRoaXMuaGFzTWluTWF4TGFiZWxzKCksXG4gICAgICB2YWx1ZUxhYmVsczogdGhpcy5oYXNWYWx1ZUxhYmVscygpLFxuICAgICAgdmVydGljYWw6IHRoaXMuaXNWZXJ0aWNhbCgpLFxuICAgICAgcmFuZ2U6IHRoaXMuaXNSYW5nZSgpLFxuICAgICAgc2NhbGU6IHRoaXMuaGFzU2NhbGUoKSxcbiAgICAgIHNjYWxlSW50ZXJ2YWxzOiB0aGlzLmdldFNjYWxlSW50ZXJ2YWxzKCksXG4gICAgfTtcbiAgfVxuXG4gIG1lcmdlTGFiZWxzKCk6IHZvaWQge1xuICAgIHRoaXMudmFsdWVMYWJlbExlZnQ/LnNldE9wYWNpdHkoMCk7XG4gICAgdGhpcy52YWx1ZUxhYmVsUmlnaHQ/LnNldE9wYWNpdHkoMCk7XG4gICAgdGhpcy52YWx1ZUxhYmVsQ29tbW9uPy5zZXRPcGFjaXR5KDEpO1xuXG4gICAgaWYgKCF0aGlzLnZlcnRpY2FsICYmIHRoaXMudGh1bWJSaWdodCkge1xuICAgICAgY29uc3QgZGlzdGFuY2VCZXR3ZWVuVGh1bWJzID0gKFxuICAgICAgICBwYXJzZUludCh0aGlzLnRodW1iUmlnaHQuZ2V0TGVmdEluZGVudCgpLCAxMClcbiAgICAgICAgLSBwYXJzZUludCh0aGlzLnRodW1iTGVmdC5nZXRMZWZ0SW5kZW50KCksIDEwKVxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMudmFsdWVMYWJlbExlZnQpIHtcbiAgICAgICAgdGhpcy52YWx1ZUxhYmVsQ29tbW9uPy5zZXRJbmRlbnQoJ2xlZnQnLCBgJHtwYXJzZUludCh0aGlzLnZhbHVlTGFiZWxMZWZ0LmdldExlZnRJbmRlbnQoKSwgMTApICsgZGlzdGFuY2VCZXR3ZWVuVGh1bWJzIC8gMn0lYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmVydGljYWwgJiYgdGhpcy50aHVtYlJpZ2h0KSB7XG4gICAgICBjb25zdCBkaXN0YW5jZUJldHdlZW5UaHVtYnMgPSAoXG4gICAgICAgIHBhcnNlSW50KHRoaXMudGh1bWJMZWZ0LmdldFRvcEluZGVudCgpLCAxMCkgLSBwYXJzZUludCh0aGlzLnRodW1iUmlnaHQuZ2V0VG9wSW5kZW50KCksIDEwKVxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMudmFsdWVMYWJlbFJpZ2h0KSB7XG4gICAgICAgIHRoaXMudmFsdWVMYWJlbENvbW1vbj8uc2V0SW5kZW50KCd0b3AnLCBgJHtwYXJzZUludCh0aGlzLnZhbHVlTGFiZWxSaWdodC5nZXRUb3BJbmRlbnQoKSwgMTApICsgZGlzdGFuY2VCZXR3ZWVuVGh1bWJzIC8gMn0lYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3BsaXRMYWJlbHMoKTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZUxhYmVsQ29tbW9uPy5zZXRPcGFjaXR5KDApO1xuICAgIHRoaXMudmFsdWVMYWJlbExlZnQ/LnNldE9wYWNpdHkoMSk7XG4gICAgdGhpcy52YWx1ZUxhYmVsUmlnaHQ/LnNldE9wYWNpdHkoMSk7XG4gIH1cblxuICBoaWRlTWluTGFiZWwoKTogdm9pZCB7XG4gICAgdGhpcy5taW5MYWJlbD8uc2V0T3BhY2l0eSgwKTtcbiAgfVxuXG4gIHNob3dNaW5MYWJlbCgpOiB2b2lkIHtcbiAgICB0aGlzLm1pbkxhYmVsPy5zZXRPcGFjaXR5KDEpO1xuICB9XG5cbiAgaGlkZU1heExhYmVsKCk6IHZvaWQge1xuICAgIHRoaXMubWF4TGFiZWw/LnNldE9wYWNpdHkoMCk7XG4gIH1cblxuICBzaG93TWF4TGFiZWwoKTogdm9pZCB7XG4gICAgdGhpcy5tYXhMYWJlbD8uc2V0T3BhY2l0eSgxKTtcbiAgfVxuXG4gIGdldERpc3RhbmNlQmV0d2VlblZhbHVlTGFiZWxzKCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMudmFsdWVMYWJlbExlZnQgJiYgdGhpcy52YWx1ZUxhYmVsUmlnaHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldERpc3RhbmNlQmV0d2VlblR3b0xhYmVscyh0aGlzLnZhbHVlTGFiZWxMZWZ0LCB0aGlzLnZhbHVlTGFiZWxSaWdodCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBnZXREaXN0YW5jZUJldHdlZW5MZWZ0VmFsdWVMYWJlbEFuZE1pbkxhYmVsKCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMudmFsdWVMYWJlbExlZnQgJiYgdGhpcy5taW5MYWJlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvTGFiZWxzKHRoaXMubWluTGFiZWwsIHRoaXMudmFsdWVMYWJlbExlZnQpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0RGlzdGFuY2VCZXR3ZWVuTGVmdFZhbHVlTGFiZWxBbmRNYXhMYWJlbCgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLnZhbHVlTGFiZWxMZWZ0ICYmIHRoaXMubWF4TGFiZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldERpc3RhbmNlQmV0d2VlblR3b0xhYmVscyh0aGlzLnZhbHVlTGFiZWxMZWZ0LCB0aGlzLm1heExhYmVsKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldERpc3RhbmNlQmV0d2VlblJpZ2h0VmFsdWVMYWJlbEFuZE1heExhYmVsKCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMudmFsdWVMYWJlbFJpZ2h0ICYmIHRoaXMubWF4TGFiZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldERpc3RhbmNlQmV0d2VlblR3b0xhYmVscyh0aGlzLnZhbHVlTGFiZWxSaWdodCwgdGhpcy5tYXhMYWJlbCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyB2YWxpZGF0ZShvcHRpb25zOiBWaWV3T3B0aW9ucyk6IFZpZXdPcHRpb25zIHtcbiAgICBsZXQgZml4ZWRPcHRpb25zOiBWaWV3T3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuXG4gICAgY29uc3QgcmVtb3ZlV3JvbmdUeXBlcyA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrVHlwZSA9IChwcm9wZXJ0eToga2V5b2YgVmlld09wdGlvbnMpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW3Byb3BlcnR5XSAhPT0gdHlwZW9mIFZpZXcuZGVmYXVsdHNbcHJvcGVydHldKSB7XG4gICAgICAgICAgZGVsZXRlIGZpeGVkT3B0aW9uc1twcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8qIFRoZXJlIGlzIG5vIE9iamVjdC5rZXlzKCkuZm9yRWFjaCBiZWNhdXNlIFRTIHRocm93cyBhbiBlcnJvcjpcbiAgICAgICAqIFwiVHlwZSAnc3RyaW5nW10nIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHR5cGUgJ2tleW9mIFJhbmdlU2xpZGVyT3B0aW9uc1tdJ1wiICovXG4gICAgICBjaGVja1R5cGUoJ3JhbmdlJyk7XG4gICAgICBjaGVja1R5cGUoJ21pbk1heExhYmVscycpO1xuICAgICAgY2hlY2tUeXBlKCd2YWx1ZUxhYmVscycpO1xuICAgICAgY2hlY2tUeXBlKCd2ZXJ0aWNhbCcpO1xuICAgICAgY2hlY2tUeXBlKCdzY2FsZScpO1xuICAgICAgY2hlY2tUeXBlKCdzY2FsZUludGVydmFscycpO1xuICAgIH07XG5cbiAgICBjb25zdCBtZXJnZVdpdGhEZWZhdWx0cyA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGZpeGVkT3B0aW9ucyA9IHsgLi4uVmlldy5kZWZhdWx0cywgLi4uZml4ZWRPcHRpb25zIH07XG4gICAgfTtcblxuICAgIGNvbnN0IGZpeFZhbHVlcyA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGlmIChmaXhlZE9wdGlvbnMuc2NhbGVJbnRlcnZhbHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZml4ZWRPcHRpb25zLnNjYWxlSW50ZXJ2YWxzIDwgMSkge1xuICAgICAgICAgIGZpeGVkT3B0aW9ucy5zY2FsZUludGVydmFscyA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoZml4ZWRPcHRpb25zLnNjYWxlSW50ZXJ2YWxzKSkge1xuICAgICAgICAgIGZpeGVkT3B0aW9ucy5zY2FsZUludGVydmFscyA9IE1hdGguZmxvb3IoZml4ZWRPcHRpb25zLnNjYWxlSW50ZXJ2YWxzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZW1vdmVXcm9uZ1R5cGVzKCk7XG4gICAgbWVyZ2VXaXRoRGVmYXVsdHMoKTtcbiAgICBmaXhWYWx1ZXMoKTtcblxuICAgIHJldHVybiBmaXhlZE9wdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIGluaXRPcHRpb25hbEZpZWxkcyhvcHRpb25zOiBWaWV3T3B0aW9ucyk6IHZvaWQge1xuICAgIGlmIChvcHRpb25zLnJhbmdlKSB7XG4gICAgICB0aGlzLnRodW1iUmlnaHQgPSBuZXcgVGh1bWIoJ3JpZ2h0Jyk7XG4gICAgfVxuXG4gICAgLy8gdGhpcyBmaWVsZCBpcyBhbHdheXMgaW5pdGlhbGl6ZWQgaW4gY2FzZSB0aGUgdG9nZ2xlU2NhbGUoKSBtZXRob2Qgd2lsbCBiZSBjYWxsZWRcbiAgICB0aGlzLnNjYWxlSW50ZXJ2YWxzID0gb3B0aW9ucy5zY2FsZUludGVydmFscztcblxuICAgIGlmIChvcHRpb25zLnNjYWxlKSB7XG4gICAgICAvKiBjcmVhdGUgc2NhbGUgd2l0aCBhcmJpdHJhcnkgdmFsdWVzLCB3aGljaCB3aWxsIGJlIHJlcGxhY2VkIGxhdGVyIGJ5IFByZXNlbnRlclxuICAgICAgICogaXQgaXMgbmVjZXNzYXJ5IGZvciBoYXNTY2FsZSgpIHJldHVybiB0cnVlICovXG4gICAgICB0aGlzLnNjYWxlID0gbmV3IFNjYWxlKDAsIDEwMCwgdGhpcy5nZXRTY2FsZUludGVydmFscygpKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5taW5NYXhMYWJlbHMgfHwgb3B0aW9ucy52YWx1ZUxhYmVscykge1xuICAgICAgdGhpcy5sYWJlbHNDb250YWluZXIgPSBuZXcgTGFiZWxzQ29udGFpbmVyKCk7XG5cbiAgICAgIGlmIChvcHRpb25zLm1pbk1heExhYmVscykge1xuICAgICAgICB0aGlzLm1pbkxhYmVsID0gbmV3IExhYmVsKCdyYW5nZS1zbGlkZXJfX21pbi1tYXgtbGFiZWwgcmFuZ2Utc2xpZGVyX19taW4tbWF4LWxhYmVsX2xlZnQnKTtcbiAgICAgICAgdGhpcy5tYXhMYWJlbCA9IG5ldyBMYWJlbCgncmFuZ2Utc2xpZGVyX19taW4tbWF4LWxhYmVsIHJhbmdlLXNsaWRlcl9fbWluLW1heC1sYWJlbF9yaWdodCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy52YWx1ZUxhYmVscykge1xuICAgICAgICB0aGlzLnZhbHVlTGFiZWxMZWZ0ID0gbmV3IExhYmVsKCdyYW5nZS1zbGlkZXJfX3ZhbHVlLWxhYmVsIHJhbmdlLXNsaWRlcl9fdmFsdWUtbGFiZWxfbGVmdCcpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJhbmdlKSB7XG4gICAgICAgICAgdGhpcy52YWx1ZUxhYmVsUmlnaHQgPSBuZXcgTGFiZWwoJ3JhbmdlLXNsaWRlcl9fdmFsdWUtbGFiZWwgcmFuZ2Utc2xpZGVyX192YWx1ZS1sYWJlbF9yaWdodCcpO1xuICAgICAgICAgIHRoaXMudmFsdWVMYWJlbENvbW1vbiA9IG5ldyBMYWJlbCgncmFuZ2Utc2xpZGVyX192YWx1ZS1sYWJlbCByYW5nZS1zbGlkZXJfX3ZhbHVlLWxhYmVsX2NvbW1vbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgIHRoaXMudmVydGljYWwgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9TdWJ2aWV3cygpOiB2b2lkIHtcbiAgICB0aGlzLnRyYWNrLnN1YnNjcmliZSh0aGlzKTtcbiAgICB0aGlzLnRodW1iTGVmdC5zdWJzY3JpYmUodGhpcyk7XG5cbiAgICBpZiAodGhpcy5pc1JhbmdlKCkpIHtcbiAgICAgIHRoaXMudGh1bWJSaWdodD8uc3Vic2NyaWJlKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKCk6IHZvaWQge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gbmV3IERvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgIHRoaXMudHJhY2suYXBwZW5kKHRoaXMucmFuZ2UuZ2V0Q29tcG9uZW50KCkpO1xuICAgIHRoaXMuc2xpZGVyLmFwcGVuZCh0aGlzLnRyYWNrLmdldENvbXBvbmVudCgpLCB0aGlzLnRodW1iTGVmdC5nZXRDb21wb25lbnQoKSk7XG4gICAgZnJhZ21lbnQuYXBwZW5kKHRoaXMuc2xpZGVyLCB0aGlzLmlucHV0LmdldENvbXBvbmVudCgpKTtcblxuICAgIGlmICh0aGlzLmlzUmFuZ2UoKSAmJiB0aGlzLnRodW1iUmlnaHQpIHtcbiAgICAgIHRoaXMuc2xpZGVyLmFwcGVuZCh0aGlzLnRodW1iUmlnaHQuZ2V0Q29tcG9uZW50KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXRoaXMudmVydGljYWwpIHtcbiAgICAgICAgdGhpcy5yYW5nZS5zZXRJbmRlbnQoJ2xlZnQnLCAwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgdGhpcy5yYW5nZS5zZXRJbmRlbnQoJ2JvdHRvbScsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm1pbkxhYmVsICYmIHRoaXMubWF4TGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWxzQ29udGFpbmVyPy5hcHBlbmQodGhpcy5taW5MYWJlbC5nZXRDb21wb25lbnQoKSwgdGhpcy5tYXhMYWJlbC5nZXRDb21wb25lbnQoKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFsdWVMYWJlbExlZnQpIHtcbiAgICAgIHRoaXMubGFiZWxzQ29udGFpbmVyPy5hcHBlbmQodGhpcy52YWx1ZUxhYmVsTGVmdC5nZXRDb21wb25lbnQoKSk7XG5cbiAgICAgIGlmICh0aGlzLmlzUmFuZ2UoKSkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZUxhYmVsUmlnaHQgJiYgdGhpcy52YWx1ZUxhYmVsQ29tbW9uKSB7XG4gICAgICAgICAgdGhpcy5sYWJlbHNDb250YWluZXI/LmFwcGVuZChcbiAgICAgICAgICAgIHRoaXMudmFsdWVMYWJlbFJpZ2h0LmdldENvbXBvbmVudCgpLFxuICAgICAgICAgICAgdGhpcy52YWx1ZUxhYmVsQ29tbW9uLmdldENvbXBvbmVudCgpLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5sYWJlbHNDb250YWluZXIpIHtcbiAgICAgIHRoaXMuc2xpZGVyLmJlZm9yZSh0aGlzLmxhYmVsc0NvbnRhaW5lci5nZXRDb21wb25lbnQoKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50LmNsYXNzTGlzdC5hZGQoJ3JhbmdlLXNsaWRlcl92ZXJ0aWNhbCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNjYWxlKSB7XG4gICAgICB0aGlzLnNsaWRlci5hZnRlcih0aGlzLnNjYWxlLmdldENvbXBvbmVudCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbXBvbmVudC5hcHBlbmQoZnJhZ21lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxhYmVsc0NvbnRhaW5lcikge1xuICAgICAgWy4uLnRoaXMubGFiZWxzQ29udGFpbmVyLmdldENvbXBvbmVudCgpLmNoaWxkcmVuXS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBbLi4udGhpcy5zbGlkZXIuY2hpbGRyZW5dLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfSk7XG5cbiAgICBbLi4udGhpcy5jb21wb25lbnQuY2hpbGRyZW5dLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUxlZnRJbnB1dCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgndmlld0lucHV0TGVmdCcsIHRoaXMuZ2V0VGh1bWJJbmRlbnQoeCwgeSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVSaWdodElucHV0KHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCd2aWV3SW5wdXRSaWdodCcsIHRoaXMuZ2V0VGh1bWJJbmRlbnQoeCwgeSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUaHVtYkluZGVudCh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIGNvbnN0IHRyYWNrU2hpZnQgPSB0aGlzLnRyYWNrLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgIGNvbnN0IHRvcCA9IHkgLSB0cmFja1NoaWZ0O1xuICAgICAgY29uc3QgYm90dG9tID0gdGhpcy5nZXRUcmFja0xlbmd0aCgpIC0gdG9wO1xuICAgICAgcmV0dXJuIGJvdHRvbTtcbiAgICB9XG5cbiAgICBjb25zdCB0cmFja1NoaWZ0ID0gdGhpcy50cmFjay5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgIGNvbnN0IGxlZnQgPSB4IC0gdHJhY2tTaGlmdDtcbiAgICByZXR1cm4gbGVmdDtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU2NhbGVPclRyYWNrQ2xpY2soeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNSYW5nZSgpKSB7XG4gICAgICB0aGlzLmFkZFNtb290aFRyYW5zaXRpb24oJ2xlZnQnKTtcblxuICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCd2aWV3SW5wdXRMZWZ0JywgdGhpcy5nZXRUcmFja0xlbmd0aCgpIC0geSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5ub3RpZnkoJ3ZpZXdJbnB1dExlZnQnLCB4KTtcbiAgICAgIH1cblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMucmVtb3ZlU21vb3RoVHJhbnNpdGlvbignbGVmdCcpO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNSYW5nZSgpKSB7XG4gICAgICBpZiAodGhpcy53aGljaFRodW1iSXNOZWFyZXIoeCwgeSkgPT09ICdsZWZ0Jykge1xuICAgICAgICB0aGlzLmFkZFNtb290aFRyYW5zaXRpb24oJ2xlZnQnKTtcblxuICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgndmlld0lucHV0TGVmdCcsIHRoaXMuZ2V0VHJhY2tMZW5ndGgoKSAtIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgndmlld0lucHV0TGVmdCcsIHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVTbW9vdGhUcmFuc2l0aW9uKCdsZWZ0Jyk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hZGRTbW9vdGhUcmFuc2l0aW9uKCdyaWdodCcpO1xuXG4gICAgICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCd2aWV3SW5wdXRSaWdodCcsIHRoaXMuZ2V0VHJhY2tMZW5ndGgoKSAtIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgndmlld0lucHV0UmlnaHQnLCB4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMucmVtb3ZlU21vb3RoVHJhbnNpdGlvbigncmlnaHQnKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB3aGljaFRodW1iSXNOZWFyZXIoeDogbnVtYmVyLCB5OiBudW1iZXIpOiAnbGVmdCcgfCAncmlnaHQnIHtcbiAgICBjb25zdCBsZWZ0VGh1bWJDb29yZHMgPSB0aGlzLnRodW1iTGVmdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCByaWdodFRodW1iQ29vcmRzID0gdGhpcy50aHVtYlJpZ2h0Py5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCB0cmFja0Nvb3JkcyA9IHRoaXMudHJhY2suZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBsZXQgZGlzdGFuY2VGcm9tTGVmdFRodW1iQ2VudGVyOiBudW1iZXIgPSAwO1xuICAgIGxldCBkaXN0YW5jZUZyb21SaWdodFRodW1iQ2VudGVyOiBudW1iZXIgPSAwO1xuXG4gICAgaWYgKCF0aGlzLnZlcnRpY2FsICYmIHJpZ2h0VGh1bWJDb29yZHMpIHtcbiAgICAgIGNvbnN0IGxlZnRUaHVtYkNlbnRlciA9IGxlZnRUaHVtYkNvb3Jkcy5sZWZ0ICsgbGVmdFRodW1iQ29vcmRzLndpZHRoIC8gMiAtIHRyYWNrQ29vcmRzLmxlZnQ7XG4gICAgICBjb25zdCByaWdodFRodW1iQ2VudGVyID0gcmlnaHRUaHVtYkNvb3Jkcy5sZWZ0XG4gICAgICAgICsgcmlnaHRUaHVtYkNvb3Jkcy53aWR0aCAvIDJcbiAgICAgICAgLSB0cmFja0Nvb3Jkcy5sZWZ0O1xuXG4gICAgICBkaXN0YW5jZUZyb21MZWZ0VGh1bWJDZW50ZXIgPSBNYXRoLmFicyh4IC0gbGVmdFRodW1iQ2VudGVyKTtcbiAgICAgIGRpc3RhbmNlRnJvbVJpZ2h0VGh1bWJDZW50ZXIgPSBNYXRoLmFicyh4IC0gcmlnaHRUaHVtYkNlbnRlcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmVydGljYWwgJiYgcmlnaHRUaHVtYkNvb3Jkcykge1xuICAgICAgY29uc3QgbGVmdFRodW1iQ2VudGVyID0gbGVmdFRodW1iQ29vcmRzLnRvcCArIGxlZnRUaHVtYkNvb3Jkcy5oZWlnaHQgLyAyIC0gdHJhY2tDb29yZHMudG9wO1xuICAgICAgY29uc3QgcmlnaHRUaHVtYkNlbnRlciA9IHJpZ2h0VGh1bWJDb29yZHMudG9wICsgcmlnaHRUaHVtYkNvb3Jkcy5oZWlnaHQgLyAyIC0gdHJhY2tDb29yZHMudG9wO1xuXG4gICAgICBkaXN0YW5jZUZyb21MZWZ0VGh1bWJDZW50ZXIgPSBNYXRoLmFicyh5IC0gbGVmdFRodW1iQ2VudGVyKTtcbiAgICAgIGRpc3RhbmNlRnJvbVJpZ2h0VGh1bWJDZW50ZXIgPSBNYXRoLmFicyh5IC0gcmlnaHRUaHVtYkNlbnRlcik7XG4gICAgfVxuXG4gICAgaWYgKGRpc3RhbmNlRnJvbUxlZnRUaHVtYkNlbnRlciA8PSBkaXN0YW5jZUZyb21SaWdodFRodW1iQ2VudGVyKSB7XG4gICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH1cblxuICAgIHJldHVybiAncmlnaHQnO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRTbW9vdGhUcmFuc2l0aW9uKHNpZGU6ICdsZWZ0JyB8ICdyaWdodCcgPSAnbGVmdCcpOiB2b2lkIHtcbiAgICBpZiAoc2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgICB0aGlzLnRodW1iTGVmdC5nZXRDb21wb25lbnQoKS5jbGFzc0xpc3QuYWRkKCdyYW5nZS1zbGlkZXJfX3RodW1iX3Ntb290aC10cmFuc2l0aW9uJyk7XG4gICAgICB0aGlzLnJhbmdlLmdldENvbXBvbmVudCgpLmNsYXNzTGlzdC5hZGQoJ3JhbmdlLXNsaWRlcl9fcmFuZ2Vfc21vb3RoLXRyYW5zaXRpb24nKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbExlZnQ/LmdldENvbXBvbmVudCgpLmNsYXNzTGlzdC5hZGQoJ3JhbmdlLXNsaWRlcl9fdmFsdWUtbGFiZWxfc21vb3RoLXRyYW5zaXRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgdGhpcy50aHVtYlJpZ2h0Py5nZXRDb21wb25lbnQoKS5jbGFzc0xpc3QuYWRkKCdyYW5nZS1zbGlkZXJfX3RodW1iX3Ntb290aC10cmFuc2l0aW9uJyk7XG4gICAgICB0aGlzLnJhbmdlLmdldENvbXBvbmVudCgpLmNsYXNzTGlzdC5hZGQoJ3JhbmdlLXNsaWRlcl9fcmFuZ2Vfc21vb3RoLXRyYW5zaXRpb24nKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbFJpZ2h0Py5nZXRDb21wb25lbnQoKS5jbGFzc0xpc3QuYWRkKCdyYW5nZS1zbGlkZXJfX3ZhbHVlLWxhYmVsX3Ntb290aC10cmFuc2l0aW9uJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVTbW9vdGhUcmFuc2l0aW9uKHNpZGU6ICdsZWZ0JyB8ICdyaWdodCcgPSAnbGVmdCcpOiB2b2lkIHtcbiAgICBpZiAoc2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgICB0aGlzLnRodW1iTGVmdC5nZXRDb21wb25lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKCdyYW5nZS1zbGlkZXJfX3RodW1iX3Ntb290aC10cmFuc2l0aW9uJyk7XG4gICAgICB0aGlzLnJhbmdlLmdldENvbXBvbmVudCgpLmNsYXNzTGlzdC5yZW1vdmUoJ3JhbmdlLXNsaWRlcl9fcmFuZ2Vfc21vb3RoLXRyYW5zaXRpb24nKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbExlZnQ/LmdldENvbXBvbmVudCgpLmNsYXNzTGlzdC5yZW1vdmUoJ3JhbmdlLXNsaWRlcl9fdmFsdWUtbGFiZWxfc21vb3RoLXRyYW5zaXRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgdGhpcy50aHVtYlJpZ2h0Py5nZXRDb21wb25lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKCdyYW5nZS1zbGlkZXJfX3RodW1iX3Ntb290aC10cmFuc2l0aW9uJyk7XG4gICAgICB0aGlzLnJhbmdlLmdldENvbXBvbmVudCgpLmNsYXNzTGlzdC5yZW1vdmUoJ3JhbmdlLXNsaWRlcl9fcmFuZ2Vfc21vb3RoLXRyYW5zaXRpb24nKTtcbiAgICAgIHRoaXMudmFsdWVMYWJlbFJpZ2h0Py5nZXRDb21wb25lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKCdyYW5nZS1zbGlkZXJfX3ZhbHVlLWxhYmVsX3Ntb290aC10cmFuc2l0aW9uJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb2xsZWN0TGFiZWxzKCk6IEhUTUxFbGVtZW50W10ge1xuICAgIGNvbnN0IGxhYmVsczogSFRNTEVsZW1lbnRbXSA9IFtdO1xuXG4gICAgaWYgKHRoaXMubWluTGFiZWwgJiYgdGhpcy5tYXhMYWJlbCkge1xuICAgICAgbGFiZWxzLnB1c2godGhpcy5taW5MYWJlbC5nZXRDb21wb25lbnQoKSk7XG4gICAgICBsYWJlbHMucHVzaCh0aGlzLm1heExhYmVsLmdldENvbXBvbmVudCgpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52YWx1ZUxhYmVsTGVmdCkge1xuICAgICAgbGFiZWxzLnB1c2godGhpcy52YWx1ZUxhYmVsTGVmdC5nZXRDb21wb25lbnQoKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFsdWVMYWJlbFJpZ2h0KSB7XG4gICAgICBsYWJlbHMucHVzaCh0aGlzLnZhbHVlTGFiZWxSaWdodC5nZXRDb21wb25lbnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhYmVscztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvTGFiZWxzKGxhYmVsMTogTGFiZWwsIGxhYmVsMjogTGFiZWwpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICBjb25zdCBib3R0b21MYWJlbEVkZ2UgPSBsYWJlbDEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgY29uc3QgdG9wTGFiZWxFZGdlID0gbGFiZWwyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcblxuICAgICAgcmV0dXJuIChib3R0b21MYWJlbEVkZ2UgLSB0b3BMYWJlbEVkZ2UpO1xuICAgIH1cblxuICAgIGNvbnN0IGxlZnRMYWJlbEVkZ2UgPSBsYWJlbDEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQ7XG4gICAgY29uc3QgcmlnaHRMYWJlbEVkZ2UgPSBsYWJlbDIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblxuICAgIHJldHVybiAocmlnaHRMYWJlbEVkZ2UgLSBsZWZ0TGFiZWxFZGdlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWV3O1xuIiwiaW1wb3J0ICdhaXJibmItYnJvd3Nlci1zaGltcyc7XG5cbi8vIGltcG9ydCB7IFByZXNlbnRlciwgU2xpZGVyT3B0aW9ucyB9IGZyb20gJy4vUHJlc2VudGVyL1ByZXNlbnRlcic7XG5pbXBvcnQgUHJlc2VudGVyIGZyb20gJy4vUHJlc2VudGVyL1ByZXNlbnRlcic7XG5pbXBvcnQgU2xpZGVyT3B0aW9ucyBmcm9tICcuL1ByZXNlbnRlci9TbGlkZXJPcHRpb25zJztcbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgSlF1ZXJ5IHtcbiAgICByYW5nZVNsaWRlcjogSVJhbmdlU2xpZGVyO1xuICB9XG5cbiAgaW50ZXJmYWNlIElSYW5nZVNsaWRlciB7XG4gICAgKG9wdGlvbnM/OiBvYmplY3QpOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuICB9XG59XG5cbihmdW5jdGlvbiBXcmFwcGVyKGpRKSB7XG4gIGNvbnN0ICQgPSBqUTtcblxuICAkLmZuLnJhbmdlU2xpZGVyID0gZnVuY3Rpb24gaW5pdFNsaWRlcnMob3B0aW9uczogUGFydGlhbDxTbGlkZXJPcHRpb25zPiA9IHt9KTogSlF1ZXJ5IHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIGluaXRTbGlkZXIoKSB7XG4gICAgICBjb25zdCBzZXR0aW5nc0Zyb21EYXRhc2V0OiBQYXJ0aWFsPFNsaWRlck9wdGlvbnM+ID0ge1xuICAgICAgICBtaW46ICQodGhpcykuZGF0YSgnbWluJyksXG4gICAgICAgIG1heDogJCh0aGlzKS5kYXRhKCdtYXgnKSxcbiAgICAgICAgcmFuZ2U6ICQodGhpcykuZGF0YSgncmFuZ2UnKSxcbiAgICAgICAgbGVmdFZhbHVlOiAkKHRoaXMpLmRhdGEoJ2xlZnRWYWx1ZScpLFxuICAgICAgICByaWdodFZhbHVlOiAkKHRoaXMpLmRhdGEoJ3JpZ2h0VmFsdWUnKSxcbiAgICAgICAgc3RlcDogJCh0aGlzKS5kYXRhKCdzdGVwJyksXG4gICAgICAgIG1pbk1heExhYmVsczogJCh0aGlzKS5kYXRhKCdtaW5NYXhMYWJlbHMnKSxcbiAgICAgICAgdmFsdWVMYWJlbHM6ICQodGhpcykuZGF0YSgndmFsdWVMYWJlbHMnKSxcbiAgICAgICAgdmVydGljYWw6ICQodGhpcykuZGF0YSgndmVydGljYWwnKSxcbiAgICAgICAgc2NhbGU6ICQodGhpcykuZGF0YSgnc2NhbGUnKSxcbiAgICAgICAgc2NhbGVJbnRlcnZhbHM6ICQodGhpcykuZGF0YSgnc2NhbGVJbnRlcnZhbHMnKSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHNldHRpbmdzOiBQYXJ0aWFsPFNsaWRlck9wdGlvbnM+ID0gJC5leHRlbmQoe30sIG9wdGlvbnMsIHNldHRpbmdzRnJvbURhdGFzZXQpO1xuXG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgICQodGhpcykuZGF0YSgncmFuZ2VTbGlkZXInLCBuZXcgUHJlc2VudGVyKHRoaXMsIHNldHRpbmdzKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59KGpRdWVyeSkpO1xuIiwiaW1wb3J0IE1vZGVsIGZyb20gJy4uL01vZGVsL01vZGVsJztcbmltcG9ydCBWaWV3IGZyb20gJy4uL1ZpZXcvVmlldyc7XG5pbXBvcnQge1xuICBFdmVudE1hbmFnZXIsIElFdmVudExpc3RlbmVyLCBQb3NzaWJsZUV2ZW50cywgRXZlbnRIYW5kbGVycyxcbn0gZnJvbSAnLi4vRXZlbnRNYW5hZ2VyL0V2ZW50TWFuYWdlcic7XG5pbXBvcnQgU2xpZGVyT3B0aW9ucyBmcm9tICcuL1NsaWRlck9wdGlvbnMnO1xuXG5jbGFzcyBQcmVzZW50ZXIgaW1wbGVtZW50cyBJRXZlbnRMaXN0ZW5lciB7XG4gIHByaXZhdGUgbW9kZWw6IE1vZGVsO1xuXG4gIHByaXZhdGUgdmlldzogVmlldztcblxuICBwcml2YXRlIGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyID0gbmV3IEV2ZW50TWFuYWdlcigpO1xuXG4gIG9uQ2hhbmdlPzogKGxlZnRWYWx1ZTogbnVtYmVyLCByaWdodFZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudDogSFRNTERpdkVsZW1lbnQsIG9wdGlvbnM6IFBhcnRpYWw8U2xpZGVyT3B0aW9ucz4pIHtcbiAgICB0aGlzLm1vZGVsID0gbmV3IE1vZGVsKHtcbiAgICAgIG1pbjogb3B0aW9ucy5taW4sXG4gICAgICBtYXg6IG9wdGlvbnMubWF4LFxuICAgICAgbGVmdFZhbHVlOiBvcHRpb25zLmxlZnRWYWx1ZSxcbiAgICAgIHJpZ2h0VmFsdWU6IG9wdGlvbnMucmlnaHRWYWx1ZSxcbiAgICAgIHJhbmdlOiBvcHRpb25zLnJhbmdlLFxuICAgICAgc3RlcDogb3B0aW9ucy5zdGVwLFxuICAgIH0pO1xuICAgIHRoaXMudmlldyA9IG5ldyBWaWV3KGVsZW1lbnQsIHtcbiAgICAgIG1pbk1heExhYmVsczogb3B0aW9ucy5taW5NYXhMYWJlbHMsXG4gICAgICB2YWx1ZUxhYmVsczogb3B0aW9ucy52YWx1ZUxhYmVscyxcbiAgICAgIHZlcnRpY2FsOiBvcHRpb25zLnZlcnRpY2FsLFxuICAgICAgcmFuZ2U6IG9wdGlvbnMucmFuZ2UsXG4gICAgICBzY2FsZTogb3B0aW9ucy5zY2FsZSxcbiAgICAgIHNjYWxlSW50ZXJ2YWxzOiBvcHRpb25zLnNjYWxlSW50ZXJ2YWxzLFxuICAgIH0pO1xuXG4gICAgdGhpcy5pbml0Vmlld1ZhbHVlcygpO1xuICAgIHRoaXMubW9kZWwuc3Vic2NyaWJlKHRoaXMpO1xuICAgIHRoaXMudmlldy5zdWJzY3JpYmUodGhpcyk7XG4gIH1cblxuICBpbmZvcm08RSBleHRlbmRzIGtleW9mIFBvc3NpYmxlRXZlbnRzPihldmVudFR5cGU6IEUsIGRhdGE6IFBvc3NpYmxlRXZlbnRzW0VdKTogdm9pZCB7XG4gICAgY29uc3QgZXZlbnRIYW5kbGVyczogRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgIHZpZXdJbnB1dExlZnQ6IFt0aGlzLmhhbmRsZVZpZXdJbnB1dExlZnQsICdudW1iZXInLCBkYXRhXSxcbiAgICAgIHZpZXdJbnB1dFJpZ2h0OiBbdGhpcy5oYW5kbGVWaWV3SW5wdXRSaWdodCwgJ251bWJlcicsIGRhdGFdLFxuICAgICAgdmlld1NldExlZnQ6IFt0aGlzLmhhbmRsZVZpZXdTZXRMZWZ0XSxcbiAgICAgIHZpZXdTZXRSaWdodDogW3RoaXMuaGFuZGxlVmlld1NldFJpZ2h0XSxcbiAgICAgIHZpZXdUb2dnbGVPcmllbnRhdGlvbjogW3RoaXMuaGFuZGxlVmlld1RvZ2dsZU9yaWVudGF0aW9uXSxcbiAgICAgIHZpZXdUb2dnbGVSYW5nZTogW3RoaXMuaGFuZGxlVmlld1RvZ2dsZVJhbmdlXSxcbiAgICAgIHZpZXdTZXRTY2FsZUludGVydmFsczogW3RoaXMuaGFuZGxlVmlld1NldFNjYWxlSW50ZXJ2YWxzXSxcbiAgICAgIHZpZXdBZGRWYWx1ZUxhYmVsczogW3RoaXMuaGFuZGxlVmlld0FkZFZhbHVlTGFiZWxzXSxcbiAgICAgIHZpZXdBZGRNaW5NYXhMYWJlbHM6IFt0aGlzLmhhbmRsZVZpZXdBZGRNaW5NYXhMYWJlbHNdLFxuICAgICAgbW9kZWxTZXRMZWZ0OiBbdGhpcy5oYW5kbGVNb2RlbFNldExlZnRdLFxuICAgICAgbW9kZWxTZXRSaWdodDogW3RoaXMuaGFuZGxlTW9kZWxTZXRSaWdodF0sXG4gICAgICBtb2RlbFNldE1pbjogW3RoaXMuaGFuZGxlTW9kZWxTZXRNaW5dLFxuICAgICAgbW9kZWxTZXRNYXg6IFt0aGlzLmhhbmRsZU1vZGVsU2V0TWF4XSxcbiAgICAgIG1vZGVsVG9nZ2xlUmFuZ2U6IFt0aGlzLmhhbmRsZU1vZGVsVG9nZ2xlUmFuZ2VdLFxuICAgICAgbW9kZWxTZXRTdGVwOiBbdGhpcy5oYW5kbGVNb2RlbFNldFN0ZXBdLFxuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVyID0gZXZlbnRIYW5kbGVyc1tldmVudFR5cGVdO1xuICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gaGFuZGxlclsxXSB8fCBkYXRhID09PSBudWxsKSB7XG4gICAgICAgIGhhbmRsZXJbMF0uY2FsbCh0aGlzLCBoYW5kbGVyWzJdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdWJzY3JpYmUobGlzdGVuZXI6IElFdmVudExpc3RlbmVyKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHNldExlZnRWYWx1ZSh2YWx1ZTogbnVtYmVyKTogdGhpcyB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMubW9kZWwuc2V0TGVmdFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRSaWdodFZhbHVlKHZhbHVlOiBudW1iZXIpOiB0aGlzIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5tb2RlbC5zZXRSaWdodFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRTdGVwKHZhbHVlOiBudW1iZXIpOiB0aGlzIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5tb2RlbC5zZXRTdGVwKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRNaW4odmFsdWU6IG51bWJlcik6IHRoaXMge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLm1vZGVsLnNldE1pbih2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0TWF4KHZhbHVlOiBudW1iZXIpOiB0aGlzIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5tb2RlbC5zZXRNYXgodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRvZ2dsZU9yaWVudGF0aW9uKCk6IHRoaXMge1xuICAgIHRoaXMudmlldy50b2dnbGVPcmllbnRhdGlvbigpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdG9nZ2xlUmFuZ2UoKTogdGhpcyB7XG4gICAgdGhpcy5tb2RlbC50b2dnbGVSYW5nZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdG9nZ2xlVmFsdWVMYWJlbHMoKTogdGhpcyB7XG4gICAgdGhpcy52aWV3LnRvZ2dsZVZhbHVlTGFiZWxzKCk7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdzbGlkZXJUb2dnbGVWYWx1ZUxhYmVscycsIG51bGwpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdG9nZ2xlTWluTWF4TGFiZWxzKCk6IHRoaXMge1xuICAgIHRoaXMudmlldy50b2dnbGVNaW5NYXhMYWJlbHMoKTtcbiAgICB0aGlzLmV2ZW50TWFuYWdlci5ub3RpZnkoJ3NsaWRlclRvZ2dsZU1pbk1heExhYmVscycsIG51bGwpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdG9nZ2xlU2NhbGUoKTogdGhpcyB7XG4gICAgaWYgKCF0aGlzLnZpZXcuaGFzU2NhbGUoKSkge1xuICAgICAgdGhpcy52aWV3LmFkZFNjYWxlKHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLm1pbiwgdGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubWF4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52aWV3LnJlbW92ZVNjYWxlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdzbGlkZXJUb2dnbGVTY2FsZScsIG51bGwpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0U2NhbGVJbnRlcnZhbHModmFsdWU6IG51bWJlcik6IHRoaXMge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLnZpZXcuc2V0U2NhbGVJbnRlcnZhbHModmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldFZhbHVlcygpOiBTbGlkZXJPcHRpb25zIHtcbiAgICByZXR1cm4geyAuLi50aGlzLm1vZGVsLmdldE9wdGlvbnMoKSwgLi4udGhpcy52aWV3LmdldE9wdGlvbnMoKSB9O1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0Vmlld1ZhbHVlcygpOiB2b2lkIHtcbiAgICBjb25zdCB7IG1vZGVsIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgdmlldyB9ID0gdGhpcztcblxuICAgIGNvbnN0IHsgbWluIH0gPSBtb2RlbC5nZXRPcHRpb25zKCk7XG4gICAgY29uc3QgeyBtYXggfSA9IG1vZGVsLmdldE9wdGlvbnMoKTtcbiAgICBjb25zdCB7IGxlZnRWYWx1ZSB9ID0gbW9kZWwuZ2V0T3B0aW9ucygpO1xuICAgIGNvbnN0IHsgcmlnaHRWYWx1ZSB9ID0gbW9kZWwuZ2V0T3B0aW9ucygpO1xuXG4gICAgdmlldy5zZXRNaW5WYWx1ZShtaW4pO1xuICAgIHZpZXcuc2V0TWF4VmFsdWUobWF4KTtcbiAgICB0aGlzLnBhc3NMZWZ0VmFsdWVUb1ZpZXcobGVmdFZhbHVlKTtcblxuICAgIGlmICh2aWV3LmlzUmFuZ2UoKSAmJiAocmlnaHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgdGhpcy5wYXNzUmlnaHRWYWx1ZVRvVmlldyhyaWdodFZhbHVlKTtcbiAgICAgIHZpZXcudXBkYXRlSW5wdXQobGVmdFZhbHVlLCByaWdodFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmlldy51cGRhdGVJbnB1dChsZWZ0VmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh2aWV3Lmhhc1NjYWxlKCkpIHtcbiAgICAgIC8vIGZpcnN0IHJlbW92ZSBzY2FsZSB3aXRoIGFyYml0cmFyeSB2YWx1ZXMsIHdoaWNoIHdhcyBhZGRlZCBhcyBhIHBsdWdcbiAgICAgIHZpZXcucmVtb3ZlU2NhbGUoKTtcbiAgICAgIHZpZXcuYWRkU2NhbGUobWluLCBtYXgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZpZXcuaGFzTGFiZWxzKCkpIHtcbiAgICAgIGlmICghdmlldy5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgICAgdmlldy5maXhMYWJlbHNDb250YWluZXJIZWlnaHRGb3JIb3Jpem9udGFsKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2aWV3LmlzVmVydGljYWwoKSkge1xuICAgICAgICB2aWV3LmZpeExhYmVsc0NvbnRhaW5lcldpZHRoRm9yVmVydGljYWwoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVZpZXdJbnB1dExlZnQocHg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMubW9kZWwuc2V0TGVmdFZhbHVlRnJvbVB4KHB4LCB0aGlzLnZpZXcuZ2V0VHJhY2tMZW5ndGgoKSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZU1vZGVsU2V0TGVmdCgpOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gdGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubGVmdFZhbHVlO1xuICAgIHRoaXMucGFzc0xlZnRWYWx1ZVRvVmlldyh2YWx1ZSk7XG4gICAgdGhpcy51cGRhdGVWaWV3SW5wdXQoKTtcblxuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLmxlZnRWYWx1ZSwgdGhpcy5tb2RlbC5nZXRPcHRpb25zKCkucmlnaHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdzbGlkZXJTZXRMZWZ0JywgdmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVWaWV3SW5wdXRSaWdodChweDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5tb2RlbC5zZXRSaWdodFZhbHVlRnJvbVB4KHB4LCB0aGlzLnZpZXcuZ2V0VHJhY2tMZW5ndGgoKSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZU1vZGVsU2V0UmlnaHQoKTogdm9pZCB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLm1vZGVsLmdldE9wdGlvbnMoKS5yaWdodFZhbHVlITtcbiAgICB0aGlzLnBhc3NSaWdodFZhbHVlVG9WaWV3KHZhbHVlKTtcbiAgICB0aGlzLnVwZGF0ZVZpZXdJbnB1dCgpO1xuXG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubGVmdFZhbHVlLCB0aGlzLm1vZGVsLmdldE9wdGlvbnMoKS5yaWdodFZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLmV2ZW50TWFuYWdlci5ub3RpZnkoJ3NsaWRlclNldFJpZ2h0JywgdmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVWaWV3U2V0VmFsdWUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmlldy5oYXNWYWx1ZUxhYmVscygpKSB7XG4gICAgICBjb25zdCBkaXN0YW5jZUJldHdlZW5WYWx1ZUxhYmVscyA9IHRoaXMudmlldy5nZXREaXN0YW5jZUJldHdlZW5WYWx1ZUxhYmVscygpO1xuXG4gICAgICBpZiAoZGlzdGFuY2VCZXR3ZWVuVmFsdWVMYWJlbHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoTW9kZWwuaXNUd29MYWJlbHNDbG9zZShkaXN0YW5jZUJldHdlZW5WYWx1ZUxhYmVscykpIHtcbiAgICAgICAgICB0aGlzLnZpZXcubWVyZ2VMYWJlbHMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnZpZXcuc3BsaXRMYWJlbHMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlVmlld1NldExlZnQoKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVWaWV3U2V0VmFsdWUoKTtcblxuICAgIGlmICh0aGlzLnZpZXcuaGFzTWluTWF4TGFiZWxzKCkgJiYgdGhpcy52aWV3Lmhhc1ZhbHVlTGFiZWxzKCkpIHtcbiAgICAgIGNvbnN0IGRpc3RhbmNlQmV0d2VlbkxlZnRWYWx1ZUxhYmVsQW5kTWluTGFiZWwgPSAoXG4gICAgICAgIHRoaXMudmlldy5nZXREaXN0YW5jZUJldHdlZW5MZWZ0VmFsdWVMYWJlbEFuZE1pbkxhYmVsKCkpO1xuXG4gICAgICBpZiAoZGlzdGFuY2VCZXR3ZWVuTGVmdFZhbHVlTGFiZWxBbmRNaW5MYWJlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChNb2RlbC5pc1R3b0xhYmVsc0Nsb3NlKGRpc3RhbmNlQmV0d2VlbkxlZnRWYWx1ZUxhYmVsQW5kTWluTGFiZWwpKSB7XG4gICAgICAgICAgdGhpcy52aWV3LmhpZGVNaW5MYWJlbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudmlldy5zaG93TWluTGFiZWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMudmlldy5pc1JhbmdlKCkpIHtcbiAgICAgICAgY29uc3QgZGlzdGFuY2VCZXR3ZWVuTGVmdFZhbHVlTGFiZWxBbmRNYXhMYWJlbCA9IChcbiAgICAgICAgICB0aGlzLnZpZXcuZ2V0RGlzdGFuY2VCZXR3ZWVuTGVmdFZhbHVlTGFiZWxBbmRNYXhMYWJlbCgpKTtcblxuICAgICAgICBpZiAoZGlzdGFuY2VCZXR3ZWVuTGVmdFZhbHVlTGFiZWxBbmRNYXhMYWJlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKE1vZGVsLmlzVHdvTGFiZWxzQ2xvc2UoZGlzdGFuY2VCZXR3ZWVuTGVmdFZhbHVlTGFiZWxBbmRNYXhMYWJlbCkpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5oaWRlTWF4TGFiZWwoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWV3LnNob3dNYXhMYWJlbCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlVmlld1NldFJpZ2h0KCk6IHZvaWQge1xuICAgIHRoaXMuaGFuZGxlVmlld1NldFZhbHVlKCk7XG5cbiAgICBpZiAodGhpcy52aWV3Lmhhc01pbk1heExhYmVscygpICYmIHRoaXMudmlldy5oYXNWYWx1ZUxhYmVscygpKSB7XG4gICAgICBjb25zdCBkaXN0YW5jZUJldHdlZW5SaWdodFZhbHVlTGFiZWxBbmRNYXhMYWJlbCA9IChcbiAgICAgICAgdGhpcy52aWV3LmdldERpc3RhbmNlQmV0d2VlblJpZ2h0VmFsdWVMYWJlbEFuZE1heExhYmVsKCkpO1xuXG4gICAgICBpZiAoZGlzdGFuY2VCZXR3ZWVuUmlnaHRWYWx1ZUxhYmVsQW5kTWF4TGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoTW9kZWwuaXNUd29MYWJlbHNDbG9zZShkaXN0YW5jZUJldHdlZW5SaWdodFZhbHVlTGFiZWxBbmRNYXhMYWJlbCkpIHtcbiAgICAgICAgICB0aGlzLnZpZXcuaGlkZU1heExhYmVsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy52aWV3LnNob3dNYXhMYWJlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwYXNzTGVmdFZhbHVlVG9WaWV3KHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBwZXJjZW50ID0gdGhpcy5tb2RlbC5jb252ZXJ0VmFsdWVUb1BlcmNlbnQodmFsdWUpO1xuICAgIHRoaXMudmlldy5zZXRMZWZ0VmFsdWUodmFsdWUsIHBlcmNlbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXNzUmlnaHRWYWx1ZVRvVmlldyh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgcGVyY2VudCA9IHRoaXMubW9kZWwuY29udmVydFZhbHVlVG9QZXJjZW50KHZhbHVlKTtcbiAgICB0aGlzLnZpZXcuc2V0UmlnaHRWYWx1ZSh2YWx1ZSwgcGVyY2VudCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVZpZXdJbnB1dCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMudmlldy5pc1JhbmdlKCkpIHtcbiAgICAgIHRoaXMudmlldy51cGRhdGVJbnB1dCh0aGlzLm1vZGVsLmdldE9wdGlvbnMoKS5sZWZ0VmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZpZXcuaXNSYW5nZSgpKSB7XG4gICAgICB0aGlzLnZpZXcudXBkYXRlSW5wdXQodGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubGVmdFZhbHVlLCB0aGlzLm1vZGVsLmdldE9wdGlvbnMoKS5yaWdodFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZU1vZGVsU2V0TWluKCk6IHZvaWQge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubWluO1xuICAgIHRoaXMudmlldy5zZXRNaW5WYWx1ZSh2YWx1ZSk7XG4gICAgdGhpcy5wYXNzTGVmdFZhbHVlVG9WaWV3KHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLmxlZnRWYWx1ZSk7XG5cbiAgICBjb25zdCB7IHJpZ2h0VmFsdWUgfSA9IHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpO1xuICAgIGlmIChyaWdodFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMucGFzc1JpZ2h0VmFsdWVUb1ZpZXcocmlnaHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmlldy5oYXNTY2FsZSgpKSB7XG4gICAgICB0aGlzLnZpZXcucmVtb3ZlU2NhbGUoKTtcbiAgICAgIHRoaXMudmlldy5hZGRTY2FsZSh0aGlzLm1vZGVsLmdldE9wdGlvbnMoKS5taW4sIHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLm1heCk7XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdzbGlkZXJTZXRNaW4nLCB2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZU1vZGVsU2V0TWF4KCk6IHZvaWQge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubWF4O1xuICAgIHRoaXMudmlldy5zZXRNYXhWYWx1ZSh2YWx1ZSk7XG4gICAgdGhpcy5wYXNzTGVmdFZhbHVlVG9WaWV3KHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLmxlZnRWYWx1ZSk7XG5cbiAgICBjb25zdCB7IHJpZ2h0VmFsdWUgfSA9IHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpO1xuICAgIGlmIChyaWdodFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMucGFzc1JpZ2h0VmFsdWVUb1ZpZXcocmlnaHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmlldy5oYXNTY2FsZSgpKSB7XG4gICAgICB0aGlzLnZpZXcucmVtb3ZlU2NhbGUoKTtcbiAgICAgIHRoaXMudmlldy5hZGRTY2FsZSh0aGlzLm1vZGVsLmdldE9wdGlvbnMoKS5taW4sIHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLm1heCk7XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdzbGlkZXJTZXRNYXgnLCB2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVZpZXdUb2dnbGVPcmllbnRhdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLnBhc3NMZWZ0VmFsdWVUb1ZpZXcodGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubGVmdFZhbHVlKTtcblxuICAgIGlmICh0aGlzLnZpZXcuaXNSYW5nZSgpKSB7XG4gICAgICBjb25zdCB7IHJpZ2h0VmFsdWUgfSA9IHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpO1xuICAgICAgaWYgKHJpZ2h0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnBhc3NSaWdodFZhbHVlVG9WaWV3KHJpZ2h0VmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZXZlbnRNYW5hZ2VyLm5vdGlmeSgnc2xpZGVyVG9nZ2xlT3JpZW50YXRpb24nLCBudWxsKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlVmlld1RvZ2dsZVJhbmdlKCk6IHZvaWQge1xuICAgIHRoaXMucGFzc0xlZnRWYWx1ZVRvVmlldyh0aGlzLm1vZGVsLmdldE9wdGlvbnMoKS5sZWZ0VmFsdWUpO1xuXG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLnJhbmdlKSB7XG4gICAgICB0aGlzLm1vZGVsLnNldFJpZ2h0VmFsdWUoKTtcbiAgICAgIGNvbnN0IHsgcmlnaHRWYWx1ZSB9ID0gdGhpcy5tb2RlbC5nZXRPcHRpb25zKCk7XG4gICAgICBpZiAocmlnaHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMucGFzc1JpZ2h0VmFsdWVUb1ZpZXcocmlnaHRWYWx1ZSk7XG4gICAgICAgIHRoaXMudmlldy51cGRhdGVJbnB1dCh0aGlzLm1vZGVsLmdldE9wdGlvbnMoKS5sZWZ0VmFsdWUsIHJpZ2h0VmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5tb2RlbC5nZXRPcHRpb25zKCkucmFuZ2UpIHtcbiAgICAgIHRoaXMubW9kZWwucmVtb3ZlUmlnaHRWYWx1ZSgpO1xuICAgICAgdGhpcy52aWV3LnVwZGF0ZUlucHV0KHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLmxlZnRWYWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdzbGlkZXJUb2dnbGVSYW5nZScsIG51bGwpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVNb2RlbFRvZ2dsZVJhbmdlKCk6IHZvaWQge1xuICAgIHRoaXMudmlldy50b2dnbGVSYW5nZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVNb2RlbFNldFN0ZXAoKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdzbGlkZXJTZXRTdGVwJywgdGhpcy5tb2RlbC5nZXRPcHRpb25zKCkuc3RlcCk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVZpZXdTZXRTY2FsZUludGVydmFscygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52aWV3Lmhhc1NjYWxlKCkpIHtcbiAgICAgIHRoaXMudmlldy5yZW1vdmVTY2FsZSgpO1xuICAgICAgdGhpcy52aWV3LmFkZFNjYWxlKHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpLm1pbiwgdGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubWF4KTtcbiAgICB9XG4gICAgdGhpcy5ldmVudE1hbmFnZXIubm90aWZ5KCdzbGlkZXJTZXRTY2FsZUludGVydmFscycsIHRoaXMudmlldy5nZXRTY2FsZUludGVydmFscygpKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlVmlld0FkZFZhbHVlTGFiZWxzKCk6IHZvaWQge1xuICAgIHRoaXMucGFzc0xlZnRWYWx1ZVRvVmlldyh0aGlzLm1vZGVsLmdldE9wdGlvbnMoKS5sZWZ0VmFsdWUpO1xuICAgIGlmICh0aGlzLnZpZXcuaXNSYW5nZSgpKSB7XG4gICAgICBjb25zdCB7IHJpZ2h0VmFsdWUgfSA9IHRoaXMubW9kZWwuZ2V0T3B0aW9ucygpO1xuICAgICAgaWYgKHJpZ2h0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnBhc3NSaWdodFZhbHVlVG9WaWV3KHJpZ2h0VmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlVmlld0FkZE1pbk1heExhYmVscygpOiB2b2lkIHtcbiAgICB0aGlzLnZpZXcuc2V0TWluVmFsdWUodGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubWluKTtcbiAgICB0aGlzLnZpZXcuc2V0TWF4VmFsdWUodGhpcy5tb2RlbC5nZXRPcHRpb25zKCkubWF4KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcmVzZW50ZXI7XG4iXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJ0YWciLCJjbGFzc05hbWUiLCJ0aGlzIiwiY29tcG9uZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZWxlbWVudCIsImdldENvbXBvbmVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImdldFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJzZXRJbmRlbnQiLCJzaWRlIiwiaW5kZW50Iiwic3R5bGUiLCJyZW1vdmUiLCJFdmVudE1hbmFnZXIiLCJsaXN0ZW5lcnMiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsInB1c2giLCJ1bnN1YnNjcmliZSIsImZpbHRlciIsIml0ZW0iLCJub3RpZnkiLCJldmVudFR5cGUiLCJkYXRhIiwibGVuZ3RoIiwiZm9yRWFjaCIsImluZm9ybSIsIk1vZGVsIiwib3B0aW9ucyIsImV2ZW50TWFuYWdlciIsInZhbGlkT3B0aW9ucyIsInZhbGlkYXRlIiwiZGVmYXVsdHMiLCJtaW4iLCJtYXgiLCJsZWZ0VmFsdWUiLCJzdGVwIiwicmFuZ2UiLCJyaWdodFZhbHVlIiwic2V0TGVmdFZhbHVlIiwidmFsdWUiLCJNYXRoIiwidW5kZWZpbmVkIiwiZml0VG9TdGVwIiwic2V0UmlnaHRWYWx1ZSIsInNldExlZnRWYWx1ZUZyb21QeCIsInB4IiwidHJhY2tMZW5ndGhJblB4IiwiY29udmVydFB4VG9WYWx1ZSIsInNldFJpZ2h0VmFsdWVGcm9tUHgiLCJyZW1vdmVSaWdodFZhbHVlIiwic2V0TWluIiwic2V0TWF4Iiwic2V0U3RlcCIsImFicyIsInRvZ2dsZVJhbmdlIiwiZ2V0T3B0aW9ucyIsImNvbnZlcnRWYWx1ZVRvUGVyY2VudCIsInBlcmNlbnQiLCJyZW1vdmVDYWxjSW5hY2N1cmFjeSIsImRpc3RhbmNlSW5QeCIsImZpeGVkT3B0aW9ucyIsImNoZWNrVHlwZSIsInByb3BlcnR5IiwicmVtb3ZlV3JvbmdUeXBlcyIsIk51bWJlciIsInRvRml4ZWQiLCJyZXN1bHQiLCJyb3VuZCIsIlRyYWNrIiwiQmFzZUVsZW1lbnQiLCJzdXBlciIsImF0dGFjaEV2ZW50SGFuZGxlcnMiLCJhcHBlbmQiLCJlbGVtZW50cyIsImhhbmRsZUNsaWNrIiwiZXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwiSFRNTEVsZW1lbnQiLCJ4IiwiY2xpZW50WCIsImxlZnQiLCJ5IiwiY2xpZW50WSIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJiaW5kIiwiUmFuZ2UiLCJzZXRXaWR0aCIsIndpZHRoIiwic2V0SGVpZ2h0IiwiaGVpZ2h0IiwicmVzZXRXaWR0aCIsInJlc2V0SGVpZ2h0IiwicmVzZXRUb3BJbmRlbnQiLCJUaHVtYiIsInR5cGUiLCJnZXRMZWZ0SW5kZW50IiwiZ2V0VG9wSW5kZW50Iiwic2V0WkluZGV4IiwiekluZGV4IiwiY2xhc3NMaXN0IiwiYWRkIiwiaGFuZGxlUG9pbnRlckRvd24iLCJzZXRQb2ludGVyQ2FwdHVyZSIsInBvaW50ZXJJZCIsInByZXZlbnREZWZhdWx0Iiwic2hpZnRYIiwic2hpZnRZIiwiaGFuZGxlUG9pbnRlck1vdmUiLCJuZXdFdmVudCIsImhhbmRsZVBvaW50ZXJVcCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVQb2ludGVyT3ZlciIsImhhbmRsZVBvaW50ZXJPdXQiLCJoYW5kbGVEcmFnU3RhcnQiLCJTY2FsZSIsImludGVydmFsc051bWJlciIsImludGVydmFscyIsInZhbHVlcyIsInZhbHVlRWxlbWVudHMiLCJjcmVhdGVJbnRlcnZhbHMiLCJhZGRNYXJrc0luSW50ZXJ2YWxzIiwiYWRkVmFsdWVzIiwiZml0V2lkdGhGb3JWZXJ0aWNhbCIsIm1heFdpZHRoIiwidmFsdWVFbGVtZW50IiwicGFkZGluZ1JpZ2h0IiwiZml0SGVpZ2h0Rm9ySG9yaXpvbnRhbCIsIm1heEhlaWdodCIsInBhZGRpbmdCb3R0b20iLCJoYW5kbGVTd2l0Y2hGcm9tSG9yaXpvbnRhbFRvVmVydGljYWwiLCJoYW5kbGVTd2l0Y2hGcm9tVmVydGljYWxUb0hvcml6b250YWwiLCJmcmFnbWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJpIiwibnVtYmVyT2ZEaWdpdHNBZnRlclBvaW50IiwidG9TdHJpbmciLCJ0ZXh0Q29udGVudCIsIm5ld1ZhbHVlRWxlbWVudCIsIkxhYmVsc0NvbnRhaW5lciIsImZpeFdpZHRoRm9yVmVydGljYWwiLCJsYWJlbHMiLCJsYWJlbCIsInBhZGRpbmdMZWZ0IiwiZml4SGVpZ2h0Rm9ySG9yaXpvbnRhbCIsInBhZGRpbmdUb3AiLCJMYWJlbCIsInNldE9wYWNpdHkiLCJvcGFjaXR5Iiwic2V0VmFsdWUiLCJnZXRWYWx1ZSIsIklucHV0Iiwic2V0QXR0cmlidXRlcyIsInZhbHVlMSIsInZhbHVlMiIsInRhYkluZGV4IiwicmVhZE9ubHkiLCJWaWV3Iiwic2xpZGVyIiwidHJhY2siLCJpbnB1dCIsInRodW1iTGVmdCIsInNjYWxlSW50ZXJ2YWxzIiwiaW5pdE9wdGlvbmFsRmllbGRzIiwic3Vic2NyaWJlVG9TdWJ2aWV3cyIsInJlbmRlciIsImhhbmRsZXIiLCJzY2FsZUNsaWNrIiwiaGFuZGxlU2NhbGVPclRyYWNrQ2xpY2siLCJ0cmFja0NsaWNrIiwibGVmdFRodW1iQ2hhbmdlUG9zaXRpb24iLCJoYW5kbGVMZWZ0SW5wdXQiLCJyaWdodFRodW1iQ2hhbmdlUG9zaXRpb24iLCJoYW5kbGVSaWdodElucHV0IiwiQXJyYXkiLCJpc0FycmF5IiwiY2FsbCIsInNldE1pblZhbHVlIiwibWluTGFiZWwiLCJzZXRNYXhWYWx1ZSIsIm1heExhYmVsIiwidmVydGljYWwiLCJpc1JhbmdlIiwidmFsdWVMYWJlbExlZnQiLCJ2YWx1ZUxhYmVsQ29tbW9uIiwidmFsdWVMYWJlbFJpZ2h0IiwidGh1bWJSaWdodCIsInVwZGF0ZUlucHV0IiwiYWRkU2NhbGUiLCJzY2FsZSIsImdldFNjYWxlSW50ZXJ2YWxzIiwiYWZ0ZXIiLCJyZW1vdmVTY2FsZSIsInNldFNjYWxlSW50ZXJ2YWxzIiwiZmxvb3IiLCJmaXhMYWJlbHNDb250YWluZXJXaWR0aEZvclZlcnRpY2FsIiwiY29sbGVjdExhYmVscyIsImxhYmVsc0NvbnRhaW5lciIsImZpeExhYmVsc0NvbnRhaW5lckhlaWdodEZvckhvcml6b250YWwiLCJ0b2dnbGVPcmllbnRhdGlvbiIsImRlc3Ryb3kiLCJoYXNMYWJlbHMiLCJ0b2dnbGVWYWx1ZUxhYmVscyIsImJlZm9yZSIsInRvZ2dsZU1pbk1heExhYmVscyIsIkJvb2xlYW4iLCJoYXNTY2FsZSIsImhhc01pbk1heExhYmVscyIsImhhc1ZhbHVlTGFiZWxzIiwiaXNWZXJ0aWNhbCIsImdldFRyYWNrTGVuZ3RoIiwibWluTWF4TGFiZWxzIiwidmFsdWVMYWJlbHMiLCJtZXJnZUxhYmVscyIsImRpc3RhbmNlQmV0d2VlblRodW1icyIsInBhcnNlSW50Iiwic3BsaXRMYWJlbHMiLCJoaWRlTWluTGFiZWwiLCJzaG93TWluTGFiZWwiLCJoaWRlTWF4TGFiZWwiLCJzaG93TWF4TGFiZWwiLCJnZXREaXN0YW5jZUJldHdlZW5WYWx1ZUxhYmVscyIsImdldERpc3RhbmNlQmV0d2VlblR3b0xhYmVscyIsImdldERpc3RhbmNlQmV0d2VlbkxlZnRWYWx1ZUxhYmVsQW5kTWluTGFiZWwiLCJnZXREaXN0YW5jZUJldHdlZW5MZWZ0VmFsdWVMYWJlbEFuZE1heExhYmVsIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuUmlnaHRWYWx1ZUxhYmVsQW5kTWF4TGFiZWwiLCJpc0ludGVnZXIiLCJjaGlsZHJlbiIsImdldFRodW1iSW5kZW50IiwiYWRkU21vb3RoVHJhbnNpdGlvbiIsInNldFRpbWVvdXQiLCJyZW1vdmVTbW9vdGhUcmFuc2l0aW9uIiwid2hpY2hUaHVtYklzTmVhcmVyIiwibGVmdFRodW1iQ29vcmRzIiwicmlnaHRUaHVtYkNvb3JkcyIsInRyYWNrQ29vcmRzIiwiZGlzdGFuY2VGcm9tTGVmdFRodW1iQ2VudGVyIiwiZGlzdGFuY2VGcm9tUmlnaHRUaHVtYkNlbnRlciIsImxlZnRUaHVtYkNlbnRlciIsInJpZ2h0VGh1bWJDZW50ZXIiLCJsYWJlbDEiLCJsYWJlbDIiLCJib3R0b20iLCJsZWZ0TGFiZWxFZGdlIiwicmlnaHQiLCJqUSIsIiQiLCJmbiIsInJhbmdlU2xpZGVyIiwiZWFjaCIsInNldHRpbmdzRnJvbURhdGFzZXQiLCJzZXR0aW5ncyIsImV4dGVuZCIsIkhUTUxEaXZFbGVtZW50IiwibW9kZWwiLCJ2aWV3IiwiaW5pdFZpZXdWYWx1ZXMiLCJ2aWV3SW5wdXRMZWZ0IiwiaGFuZGxlVmlld0lucHV0TGVmdCIsInZpZXdJbnB1dFJpZ2h0IiwiaGFuZGxlVmlld0lucHV0UmlnaHQiLCJ2aWV3U2V0TGVmdCIsImhhbmRsZVZpZXdTZXRMZWZ0Iiwidmlld1NldFJpZ2h0IiwiaGFuZGxlVmlld1NldFJpZ2h0Iiwidmlld1RvZ2dsZU9yaWVudGF0aW9uIiwiaGFuZGxlVmlld1RvZ2dsZU9yaWVudGF0aW9uIiwidmlld1RvZ2dsZVJhbmdlIiwiaGFuZGxlVmlld1RvZ2dsZVJhbmdlIiwidmlld1NldFNjYWxlSW50ZXJ2YWxzIiwiaGFuZGxlVmlld1NldFNjYWxlSW50ZXJ2YWxzIiwidmlld0FkZFZhbHVlTGFiZWxzIiwiaGFuZGxlVmlld0FkZFZhbHVlTGFiZWxzIiwidmlld0FkZE1pbk1heExhYmVscyIsImhhbmRsZVZpZXdBZGRNaW5NYXhMYWJlbHMiLCJtb2RlbFNldExlZnQiLCJoYW5kbGVNb2RlbFNldExlZnQiLCJtb2RlbFNldFJpZ2h0IiwiaGFuZGxlTW9kZWxTZXRSaWdodCIsIm1vZGVsU2V0TWluIiwiaGFuZGxlTW9kZWxTZXRNaW4iLCJtb2RlbFNldE1heCIsImhhbmRsZU1vZGVsU2V0TWF4IiwibW9kZWxUb2dnbGVSYW5nZSIsImhhbmRsZU1vZGVsVG9nZ2xlUmFuZ2UiLCJtb2RlbFNldFN0ZXAiLCJoYW5kbGVNb2RlbFNldFN0ZXAiLCJ0b2dnbGVTY2FsZSIsImdldFZhbHVlcyIsInBhc3NMZWZ0VmFsdWVUb1ZpZXciLCJwYXNzUmlnaHRWYWx1ZVRvVmlldyIsInVwZGF0ZVZpZXdJbnB1dCIsIm9uQ2hhbmdlIiwiaGFuZGxlVmlld1NldFZhbHVlIiwiZGlzdGFuY2VCZXR3ZWVuVmFsdWVMYWJlbHMiLCJkaXN0YW5jZUJldHdlZW5MZWZ0VmFsdWVMYWJlbEFuZE1pbkxhYmVsIiwiZGlzdGFuY2VCZXR3ZWVuTGVmdFZhbHVlTGFiZWxBbmRNYXhMYWJlbCIsImRpc3RhbmNlQmV0d2VlblJpZ2h0VmFsdWVMYWJlbEFuZE1heExhYmVsIl0sInNvdXJjZVJvb3QiOiIifQ==