"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[577],{52283:(e,t,a)=>{a.d(t,{Z:()=>n});const n=class{constructor(e,t){this.component=document.createElement(e),t&&(this.component.className=t)}static createComponent(e,t){const a=document.createElement(e);return t&&(a.className=t),a}getComponent(){return this.component}getBoundingClientRect(){return this.component.getBoundingClientRect()}getWidth(){return this.component.offsetWidth}getHeight(){return this.component.offsetHeight}setIndent(e,t){"number"==typeof t&&(this.component.style[e]=`${t}%`),"string"==typeof t&&(this.component.style[e]=t)}remove(){this.component.remove()}}},23925:(e,t,a)=>{var n=a(52283);class s extends n.Z{constructor(e,t){super("form"),this.component=e,this.slider=t,this.min=n.Z.createComponent("input","panel__min panel__input"),this.max=n.Z.createComponent("input","panel__max panel__input"),this.step=n.Z.createComponent("input","panel__step panel__input"),this.from=n.Z.createComponent("input","panel__from panel__input"),this.to=n.Z.createComponent("input","panel__to panel__input"),this.vertical=n.Z.createComponent("input","panel__vertical panel__checkbox"),this.range=n.Z.createComponent("input","panel__range panel__checkbox"),this.scale=n.Z.createComponent("input","panel__scale panel__checkbox"),this.scaleIntervals=n.Z.createComponent("input","panel__scale-intervals panel__input"),this.valueLabels=n.Z.createComponent("input","panel__value-labels panel__checkbox"),this.minMaxLabels=n.Z.createComponent("input","panel__min-max-labels panel__checkbox"),this.render(),this.setValues(t.getValues()),this.attachEventHandlers(),t.subscribe(this)}static init(e,t){return new s(e,t)}inform(e,t){switch(e){case"sliderSetLeft":"number"==typeof t&&this.handleSliderChangeValue("from",t);break;case"sliderSetRight":"number"==typeof t&&this.handleSliderChangeValue("to",t);break;case"sliderSetMin":"number"==typeof t&&this.handleSliderChangeValue("min",t);break;case"sliderSetMax":"number"==typeof t&&this.handleSliderChangeValue("max",t);break;case"sliderSetStep":"number"==typeof t&&this.handleSliderChangeValue("step",t);break;case"sliderToggleRange":this.handleSliderToggle("range");break;case"sliderToggleOrientation":this.handleSliderToggle("vertical");break;case"sliderToggleValueLabels":this.handleSliderToggle("valueLabels");break;case"sliderToggleMinMaxLabels":this.handleSliderToggle("minMaxLabels");break;case"sliderToggleScale":this.handleSliderToggle("scale");break;case"sliderSetScaleIntervals":"number"==typeof t&&this.handleSliderChangeValue("scaleIntervals",t)}}static toggleCheckbox(e){const t=e.closest("label");null==t||t.classList.toggle("panel__label_for-checkbox_checked")}render(){(()=>{this.min.type="number",this.max.type="number",this.step.type="number",this.from.type="number",this.to.type="number",this.vertical.type="checkbox",this.range.type="checkbox",this.scale.type="checkbox",this.scaleIntervals.type="number",this.valueLabels.type="checkbox",this.minMaxLabels.type="checkbox"})();const e=(e,t,a)=>{const s=n.Z.createComponent("label","panel__label");return s.textContent=t,a&&s.classList.add(a),s.append(e),s};this.component.append(e(this.range,"Range:","panel__label_for-checkbox"),e(this.vertical,"Vertical:","panel__label_for-checkbox"),e(this.valueLabels,"Value labels:","panel__label_for-checkbox"),e(this.minMaxLabels,"Min&max labels:","panel__label_for-checkbox"),e(this.scale,"Scale:","panel__label_for-checkbox"),e(this.scaleIntervals,"Scale intervals:"),e(this.min,"Min:"),e(this.max,"Max:"),e(this.from,"From:"),e(this.to,"To:"),e(this.step,"Step:"))}setValues(e){this.min.setAttribute("value",`${e.min}`),this.max.setAttribute("value",`${e.max}`),this.step.setAttribute("value",`${e.step}`),this.from.setAttribute("value",`${e.leftValue}`),this.to.setAttribute("value",void 0!==e.rightValue?`${e.rightValue}`:""),this.vertical.checked=e.vertical,this.range.checked=e.range,this.scale.checked=e.scale,this.scaleIntervals.setAttribute("value",`${e.scaleIntervals}`),this.valueLabels.checked=e.valueLabels,this.minMaxLabels.checked=e.minMaxLabels,(()=>{[this.vertical,this.range,this.scale,this.valueLabels,this.minMaxLabels].forEach((e=>{e.checked&&s.toggleCheckbox(e)}))})()}handleInput(e,t){const{target:a}=t;a instanceof HTMLInputElement&&a.hasAttribute("value")&&this.slider[e](Number(a.value))}handleToggle(e){this.slider[e]()}handleSliderChangeValue(e,t){this[e].value=`${t}`}handleSliderToggle(e){s.toggleCheckbox(this[e])}attachEventHandlers(){this.range.addEventListener("change",this.handleToggle.bind(this,"toggleRange")),this.vertical.addEventListener("change",this.handleToggle.bind(this,"toggleOrientation")),this.valueLabels.addEventListener("change",this.handleToggle.bind(this,"toggleValueLabels")),this.minMaxLabels.addEventListener("change",this.handleToggle.bind(this,"toggleMinMaxLabels")),this.scale.addEventListener("change",this.handleToggle.bind(this,"toggleScale")),this.scaleIntervals.addEventListener("change",this.handleInput.bind(this,"setScaleIntervals")),this.min.addEventListener("change",this.handleInput.bind(this,"setMin")),this.max.addEventListener("change",this.handleInput.bind(this,"setMax")),this.from.addEventListener("change",this.handleInput.bind(this,"setLeftValue")),this.to.addEventListener("change",this.handleInput.bind(this,"setRightValue")),this.step.addEventListener("change",this.handleInput.bind(this,"setStep"))}}const l=s;var i=a(65638);i((()=>{[...document.querySelectorAll("form")].filter((e=>e.classList.contains("js-panel"))).forEach((e=>{setTimeout((()=>{const t=i(e).data("slider"),a=i(`#${t}`).data("rangeSlider");l.init(e,a)}),0)}))}));var h=a(65638);h((()=>{h(".js-range-slider").rangeSlider({panel:!1})}))}},e=>{e.O(0,[216],(()=>(23925,e(e.s=23925)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,