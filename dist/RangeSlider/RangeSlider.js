(self.webpackChunk=self.webpackChunk||[]).push([[906],{71376:(e,t,i)=>{"use strict";i(83875);class a{constructor(){this.listeners=[]}subscribe(e){this.listeners.push(e)}unsubscribe(e){this.listeners=this.listeners.filter((t=>t!==e))}notify(e,t=null){0!==this.listeners.length&&this.listeners.forEach((i=>i.inform(e,t)))}}const s=class{constructor(e,t){this.component=document.createElement(e),t&&(this.component.className=t)}static createComponent(e,t){const i=document.createElement(e);return t&&(i.className=t),i}getComponent(){return this.component}getBoundingClientRect(){return this.component.getBoundingClientRect()}getWidth(){return this.component.offsetWidth}getHeight(){return this.component.offsetHeight}setIndent(e,t){"number"==typeof t&&(this.component.style[e]=`${t}%`),"string"==typeof t&&(this.component.style[e]=t)}remove(){this.component.remove()}},n=class extends s{constructor(e){super("div","range-slider__track"),this.view=e,this.attachEventHandlers()}append(...e){this.component.append(...e)}handleClick(e){if(e.currentTarget instanceof HTMLElement){const t=e.clientX-e.currentTarget.getBoundingClientRect().left,i=e.clientY-e.currentTarget.getBoundingClientRect().top;this.view.handleScaleOrTrackClick(t,i)}}attachEventHandlers(){this.component.addEventListener("click",this.handleClick.bind(this))}},l=class extends s{constructor(){super("div","range-slider__range")}setWidth(e){this.component.style.width=`${e}%`}setHeight(e){this.component.style.height=`${e}%`}resetWidth(){this.component.style.width="unset"}resetHeight(){this.component.style.height="unset"}resetTopIndent(){this.component.style.top="unset"}};class h extends s{constructor(e,t="left"){super("div",`range-slider__thumb range-slider__thumb_${t}`),this.type=t,this.view=e,this.attachEventHandlers()}getLeftIndent(){return this.component.style.left}getTopIndent(){return this.component.style.top}setZIndex(e){this.component.style.zIndex=`${e}`}static handlePointerOver(e){e.currentTarget instanceof HTMLElement&&e.currentTarget.classList.add("range-slider__thumb_hover")}static handlePointerOut(e){e.currentTarget instanceof HTMLElement&&e.currentTarget.classList.remove("range-slider__thumb_hover")}static handlePointerUp(e){e.currentTarget instanceof HTMLElement&&e.currentTarget.classList.remove("range-slider__thumb_active")}static handleDragStart(){return!1}handlePointerDown(e){if(e.currentTarget instanceof HTMLElement){e.currentTarget.classList.add("range-slider__thumb_active"),e.currentTarget.setPointerCapture(e.pointerId),e.preventDefault();const t=e.clientX-e.currentTarget.getBoundingClientRect().left,i=e.clientY-e.currentTarget.getBoundingClientRect().top,a=e=>{"left"===this.type&&this.view.handleLeftInput(e.clientX,e.clientY,t,i),"right"===this.type&&this.view.handleRightInput(e.clientX,e.clientY,t,i)},s=()=>{this.component.removeEventListener("pointermove",a),this.component.removeEventListener("pointerup",s)};this.component.addEventListener("pointermove",a),this.component.addEventListener("pointerup",s)}}attachEventHandlers(){this.component.addEventListener("pointerover",h.handlePointerOver),this.component.addEventListener("pointerout",h.handlePointerOut),this.component.addEventListener("pointerdown",this.handlePointerDown.bind(this)),this.component.addEventListener("pointerup",h.handlePointerUp),this.component.addEventListener("dragstart",h.handleDragStart)}}const r=h,o=class extends s{constructor(e,t,i){super("div","range-slider__scale"),this.view=i,this.intervals=[],this.values=[],this.valueElements=[];const a=i.getScaleIntervals();this.createIntervals(a),this.addMarksInIntervals(a),this.addValues(e,t,a),this.attachEventHandlers()}fitWidthForVertical(){let e=0;this.valueElements.forEach((t=>{t.offsetWidth>e&&(e=t.offsetWidth)})),this.component.style.paddingRight=`${e+3}px`}fitHeightForHorizontal(){let e=0;this.valueElements.forEach((t=>{t.offsetHeight>e&&(e=t.offsetHeight)})),this.component.style.paddingBottom=`${e+3}px`}handleSwitchFromHorizontalToVertical(){this.component.style.paddingBottom="unset",this.fitWidthForVertical()}handleSwitchFromVerticalToHorizontal(){this.component.style.paddingRight="unset",this.fitHeightForHorizontal()}createIntervals(e){for(let t=0;t<e;t+=1)this.intervals[t]=s.createComponent("div","range-slider__scale-interval"),this.component.append(this.intervals[t])}addMarksInIntervals(e){this.intervals.forEach((t=>{const i=new DocumentFragment;e<29&&i.append(s.createComponent("span","range-slider__scale-mark")),e<15&&i.append(s.createComponent("span","range-slider__scale-mark")),e<8&&i.append(s.createComponent("span","range-slider__scale-mark")),e<5&&i.append(s.createComponent("span","range-slider__scale-mark")),t.append(i)}))}addValues(e,t,i){this.values[0]=e;const a=Math.round((t-e)/i);for(let t=1;t<i;t+=1)this.values[t]=t*a+e;this.values.push(t);const n=s.createComponent("span","range-slider__scale-interval-value range-slider__scale-interval-value_min");n.textContent=`${this.values[0]}`,this.intervals[0].append(n),this.valueElements.push(n);for(let e=1;e<this.values.length;e+=1){const t=s.createComponent("span","range-slider__scale-interval-value");t.textContent=`${this.values[e]}`,this.intervals[e-1].append(t),this.valueElements.push(t)}}handleClick(e){if(e.currentTarget instanceof HTMLElement){const t=e.clientX-e.currentTarget.getBoundingClientRect().left,i=e.clientY-e.currentTarget.getBoundingClientRect().top;this.view.handleScaleOrTrackClick(t,i)}}attachEventHandlers(){this.component.addEventListener("click",this.handleClick.bind(this))}},u=class extends s{constructor(){super("div","range-slider__labels-container")}append(...e){this.component.append(...e)}fixWidthForVertical(e){let t=0;e.forEach((e=>{e.offsetWidth>t&&(t=e.offsetWidth)})),this.component.style.paddingLeft=`${t+4}px`}fixHeightForHorizontal(e){let t=0;e.forEach((e=>{e.offsetHeight>t&&(t=e.offsetHeight)})),this.component.style.paddingTop=`${t+4}px`}},d=class extends s{constructor(e){super("div",e)}setOpacity(e){this.component.style.opacity=`${e}`}setValue(e){this.component.textContent=`${e}`}getValue(){return Number(this.component.textContent)}getLeftIndent(){return this.component.style.left}getTopIndent(){return this.component.style.top}},c=class extends s{constructor(){super("input","range-slider__input"),this.setAttributes()}setValue(e,t=null){this.component.value=null===t?`${e}`:`${e} - ${t}`}setAttributes(){this.component.type="text",this.component.tabIndex=-1,this.component.readOnly=!0}};class g extends s{constructor(e){super("form","range-slider__panel panel"),this.view=e,this.min=s.createComponent("input","panel__min panel__input"),this.max=s.createComponent("input","panel__max panel__input"),this.step=s.createComponent("input","panel__step panel__input"),this.from=s.createComponent("input","panel__from panel__input"),this.to=s.createComponent("input","panel__to panel__input"),this.vertical=s.createComponent("input","panel__vertical panel__checkbox"),this.range=s.createComponent("input","panel__range panel__checkbox"),this.scale=s.createComponent("input","panel__scale panel__checkbox"),this.scaleIntervals=s.createComponent("input","panel__scale-intervals panel__input"),this.valueLabels=s.createComponent("input","panel__value-labels panel__checkbox"),this.minMaxLabels=s.createComponent("input","panel__min-max-labels panel__checkbox"),this.render(),this.attachEventHandlers()}setValues(e){this.min.value=`${e.min}`,this.max.value=`${e.max}`,this.step.value=`${e.step}`,this.from.value=`${e.from}`,this.to.value=`${e.to}`,this.vertical.checked=e.vertical,this.range.checked=e.range,this.scale.checked=e.scale,this.scaleIntervals.value=`${e.scaleIntervals}`,this.valueLabels.checked=e.valueLabels,this.minMaxLabels.checked=e.minMaxLabels,this.setCheckMarks(),this.setAttributes(e)}updateFrom(e){this.from.value=`${e}`,this.updateAttributesAfterFromChange()}updateTo(e){this.to.value=`${e}`,this.updateAttributesAfterToChange()}updateStep(e){this.step.value=`${e}`,this.updateAttributesAfterStepChange()}updateScaleIntervals(e){this.scaleIntervals.value=`${e}`}static addLabel(e,t,i){const a=s.createComponent("label","panel__label");return a.textContent=t,i&&a.classList.add(i),a.append(e),a}static calcStepMin(e){if(Number.isInteger(e))return 1;let t="1";for(let i=e.toString().split(".")[1].length;i>1;i-=1)t=`0${t}`;return t=`0.${t}`,Number(t)}static toggleCheckbox(e){const t=e.closest("label");null==t||t.classList.toggle("panel__label_for-checkbox_checked")}render(){this.setTypes(),this.component.append(g.addLabel(this.range,"Range:","panel__label_for-checkbox"),g.addLabel(this.vertical,"Vertical:","panel__label_for-checkbox"),g.addLabel(this.valueLabels,"Value labels:","panel__label_for-checkbox"),g.addLabel(this.minMaxLabels,"Min&max labels:","panel__label_for-checkbox"),g.addLabel(this.scale,"Scale:","panel__label_for-checkbox"),g.addLabel(this.scaleIntervals,"Scale intervals:"),g.addLabel(this.min,"Min:"),g.addLabel(this.max,"Max:"),g.addLabel(this.from,"From:"),g.addLabel(this.to,"To:"),g.addLabel(this.step,"Step:"))}setTypes(){this.min.type="number",this.max.type="number",this.step.type="number",this.from.type="number",this.to.type="number",this.vertical.type="checkbox",this.range.type="checkbox",this.scale.type="checkbox",this.scaleIntervals.type="number",this.valueLabels.type="checkbox",this.minMaxLabels.type="checkbox"}setAttributes(e){this.from.min=`${e.min}`,this.from.max=e.range?`${e.to}`:`${e.max}`,this.to.min=`${e.from}`,this.to.max=`${e.max}`,this.from.step=`${e.step}`,this.to.step=`${e.step}`,this.min.max=`${e.from}`,this.max.min=e.range?`${e.to}`:`${e.from}`,this.step.min=`${g.calcStepMin(e.step)}`,this.step.step=this.step.min,this.step.max=`${Math.abs(e.max-e.min)}`,e.range||(this.to.disabled=!0),this.scaleIntervals.min="1",e.scale||(this.scaleIntervals.disabled=!0)}setCheckMarks(){[this.vertical,this.range,this.scale,this.valueLabels,this.minMaxLabels].forEach((e=>{e.checked&&g.toggleCheckbox(e)}))}updateAttributesAfterFromChange(){this.min.max=this.from.value,this.view.isRange()&&(this.to.min=this.from.value),this.view.isRange()||(this.max.min=this.from.value)}updateAttributesAfterToChange(){this.from.max=this.to.value,this.max.min=this.to.value}updateAttributesAfterStepChange(){this.step.min=`${g.calcStepMin(Number(this.step.value))}`,this.step.step=`${g.calcStepMin(Number(this.step.value))}`}updateAttributesAfterMinChange(){this.from.min=this.min.value}updateAttributesAfterMaxChange(){this.view.isRange()||(this.from.max=this.max.value),this.view.isRange()&&(this.to.max=this.max.value)}handleMinChange(){Number(this.min.value)>Number(this.from.value)&&(this.min.value=this.from.value),this.view.changeMinFromOutside(Number(this.min.value)),this.updateAttributesAfterMinChange()}handleMaxChange(){this.view.isRange()||Number(this.max.value)<Number(this.from.value)&&(this.max.value=this.from.value),this.view.isRange()&&Number(this.max.value)<Number(this.to.value)&&(this.max.value=this.to.value),this.view.changeMaxFromOutside(Number(this.max.value)),this.step.max=`${Math.abs(Number(this.max.value)-Number(this.min.value))}`,this.updateAttributesAfterMaxChange()}handleStepChange(){Number(this.step.value)>Number(this.step.max)&&(this.step.value=this.step.max),Number(this.step.value)<=0&&(this.step.value=this.step.min),this.view.changeStepFromOutside(Number(this.step.value)),this.updateAttributesAfterStepChange()}handleFromChange(){Number(this.from.value)>Number(this.from.max)&&(this.from.value=this.from.max),Number(this.from.value)<Number(this.from.min)&&(this.from.value=this.from.min),this.view.changeLeftValueFromOutside(Number(this.from.value)),this.updateAttributesAfterFromChange()}handleToChange(){Number(this.to.value)>Number(this.to.max)&&(this.to.value=this.to.max),Number(this.to.value)<Number(this.to.min)&&(this.to.value=this.to.min),this.view.changeRightValueFromOutside(Number(this.to.value)),this.updateAttributesAfterToChange()}handleVerticalChange(){this.view.changeOrientationFromOutside(),g.toggleCheckbox(this.vertical)}handleRangeChange(){this.view.toggleRangeFromOutside(),this.to.disabled=!this.to.disabled,this.range.checked?this.from.max=this.to.value:this.from.max=this.max.value,g.toggleCheckbox(this.range)}handleScaleChange(){this.view.toggleScaleFromOutside(),this.scaleIntervals.disabled=!this.scaleIntervals.disabled,g.toggleCheckbox(this.scale)}handleScaleIntervalsChange(){Number(this.scaleIntervals.value)<Number(this.scaleIntervals.min)&&(this.scaleIntervals.value=this.scaleIntervals.min),Number.isInteger(this.scaleIntervals.value)||(this.scaleIntervals.value=`${Math.floor(Number(this.scaleIntervals.value))}`),this.view.changeScaleIntervals(Number(this.scaleIntervals.value))}handleValueLabelsChange(){this.view.toggleValueLabels(),g.toggleCheckbox(this.valueLabels)}handleMinMaxLabelsChange(){this.view.toggleMinMaxLabels(),g.toggleCheckbox(this.minMaxLabels)}attachEventHandlers(){this.min.addEventListener("change",this.handleMinChange.bind(this)),this.max.addEventListener("change",this.handleMaxChange.bind(this)),this.step.addEventListener("change",this.handleStepChange.bind(this)),this.from.addEventListener("change",this.handleFromChange.bind(this)),this.to.addEventListener("change",this.handleToChange.bind(this)),this.vertical.addEventListener("change",this.handleVerticalChange.bind(this)),this.range.addEventListener("change",this.handleRangeChange.bind(this)),this.scale.addEventListener("change",this.handleScaleChange.bind(this)),this.scaleIntervals.addEventListener("change",this.handleScaleIntervalsChange.bind(this)),this.valueLabels.addEventListener("change",this.handleValueLabelsChange.bind(this)),this.minMaxLabels.addEventListener("change",this.handleMinMaxLabelsChange.bind(this))}}const m=class extends s{constructor(e,t={}){var i;super("div"),this.component=e,this.eventManager=new a,this.slider=s.createComponent("div","range-slider__slider"),this.track=new n(this),this.range=new l,this.thumbLeft=new r(this,"left"),this.input=new c,t.range&&(this.thumbRight=new r(this,"right")),this.scaleIntervals=null!==(i=t.scaleIntervals)&&void 0!==i?i:4,t.scale&&(this.scale=new o(0,100,this)),(t.minMaxLabels||t.valueLabels)&&(this.labelsContainer=new u,t.minMaxLabels&&(this.minLabel=new d("range-slider__min-max-label range-slider__min-max-label_left"),this.maxLabel=new d("range-slider__min-max-label range-slider__min-max-label_right")),t.valueLabels&&(this.valueLabelLeft=new d("range-slider__value-label range-slider__value-label_left"),t.range&&(this.valueLabelRight=new d("range-slider__value-label range-slider__value-label_right"),this.valueLabelCommon=new d("range-slider__value-label range-slider__value-label_common")))),t.vertical&&(this.vertical=!0),t.panel&&(this.panel=new g(this)),this.render()}subscribe(e){this.eventManager.subscribe(e)}notify(e,t=null){this.eventManager.notify(e,t)}setMinValue(e){var t;null===(t=this.minLabel)||void 0===t||t.setValue(e)}setMaxValue(e){var t;null===(t=this.maxLabel)||void 0===t||t.setValue(e)}setLeftValue(e,t){var i,a;this.vertical||(this.thumbLeft.setIndent("left",t),this.isRange()||this.range.setWidth(t),this.isRange()&&this.range.setIndent("left",t),null===(i=this.valueLabelLeft)||void 0===i||i.setIndent("left",this.thumbLeft.getLeftIndent()),"100%"===this.thumbLeft.getLeftIndent()?this.thumbLeft.setZIndex(100):this.thumbLeft.setZIndex(3)),this.vertical&&(this.thumbLeft.setIndent("top",100-t),this.isRange()||this.range.setHeight(t),this.isRange()&&this.range.setIndent("bottom",t),null===(a=this.valueLabelLeft)||void 0===a||a.setIndent("top",this.thumbLeft.getTopIndent()),"0%"===this.thumbLeft.getTopIndent()?this.thumbLeft.setZIndex(100):this.thumbLeft.setZIndex(3)),this.valueLabelLeft&&(this.valueLabelLeft.setValue(e),this.isRange()&&(this.valueLabelCommon.setValue(`${e} - ${this.valueLabelRight.getValue()}`),this.isTwoValueLabelsClose()?this.mergeLabels():this.splitLabels())),this.valueLabelLeft&&this.minLabel&&(this.isLeftValueLabelCloseToMinLabel()?this.minLabel.setOpacity(0):this.minLabel.setOpacity(1),this.isRange()||(this.isLeftValueLabelCloseToMaxLabel()?this.maxLabel.setOpacity(0):this.maxLabel.setOpacity(1)))}setRightValue(e,t){var i,a,s,n;this.vertical||(null===(i=this.thumbRight)||void 0===i||i.setIndent("left",t),this.range.setIndent("right",100-t),null===(a=this.valueLabelRight)||void 0===a||a.setIndent("left",this.thumbRight.getLeftIndent())),this.vertical&&(null===(s=this.thumbRight)||void 0===s||s.setIndent("top",100-t),this.range.setIndent("top",100-t),null===(n=this.valueLabelRight)||void 0===n||n.setIndent("top",this.thumbRight.getTopIndent())),this.valueLabelRight&&(this.valueLabelRight.setValue(e),this.valueLabelCommon.setValue(`${this.valueLabelLeft.getValue()} - ${e}`),this.isTwoValueLabelsClose()?this.mergeLabels():this.splitLabels()),this.valueLabelRight&&this.maxLabel&&(this.isRightValueLabelCloseToMaxLabel()?this.maxLabel.setOpacity(0):this.maxLabel.setOpacity(1))}updateInput(e,t=null){this.input.setValue(e,t)}handleLeftInput(e,t,i=0,a=0){if(!this.vertical){const t=this.track.getBoundingClientRect().left;let a=e-i-t;if(a<0&&(a=0),!this.isRange()){const e=this.getTrackWidth();a>e&&(a=e)}if(this.isRange()){const e=this.thumbRight.getBoundingClientRect().left+this.thumbRight.getWidth()/2-t;a>e&&(a=e)}this.notify("viewInputLeft",a)}if(this.vertical){const e=this.track.getBoundingClientRect().top;let i=t-a-e;const s=this.getTrackHeight();if(i>s&&(i=s),!this.isRange()&&i<0&&(i=0),this.isRange()){const t=this.thumbRight.getBoundingClientRect().top+this.thumbRight.getHeight()/2-e;i<t&&(i=t)}const n=s-i;this.notify("viewInputLeft",n)}}handleRightInput(e,t,i=0,a=0){if(!this.vertical){const t=this.track.getBoundingClientRect().left;let a=e-i-t;const s=this.thumbLeft.getBoundingClientRect().left+this.thumbLeft.getWidth()/2-t;a<s&&(a=s);const n=this.getTrackWidth();a>n&&(a=n),this.notify("viewInputRight",a)}if(this.vertical){const e=this.track.getBoundingClientRect().top;let i=t-a-e;i<0&&(i=0);const s=this.thumbLeft.getBoundingClientRect().top+this.thumbLeft.getHeight()/2-e;i>s&&(i=s);const n=this.getTrackHeight()-i;this.notify("viewInputRight",n)}}addScale(e,t){this.scale=new o(e,t,this),this.slider.after(this.scale.getComponent()),this.vertical||this.scale.fitHeightForHorizontal(),this.vertical&&this.scale.fitWidthForVertical()}removeScale(){var e;null===(e=this.scale)||void 0===e||e.getComponent().remove(),this.scale=void 0}getScale(){return this.scale}getScaleIntervals(){return this.scaleIntervals||0}handleScaleOrTrackClick(e,t){this.isRange()||(this.addSmoothTransition("left"),this.vertical?this.notify("viewInputLeft",this.getTrackHeight()-t):this.notify("viewInputLeft",e),setTimeout((()=>{this.removeSmoothTransition("left")}),1e3)),this.isRange()&&("left"===this.whichThumbIsNearer(e,t)?(this.addSmoothTransition("left"),this.vertical?this.notify("viewInputLeft",this.getTrackHeight()-t):this.notify("viewInputLeft",e),setTimeout((()=>{this.removeSmoothTransition("left")}),1e3)):(this.addSmoothTransition("right"),this.vertical?this.notify("viewInputRight",this.getTrackHeight()-t):this.notify("viewInputRight",e),setTimeout((()=>{this.removeSmoothTransition("right")}),1e3)))}fixLabelsContainerWidthForVertical(){var e;const t=this.collectLabels();null===(e=this.labelsContainer)||void 0===e||e.fixWidthForVertical(t)}fixLabelsContainerHeightForHorizontal(){var e;const t=this.collectLabels();null===(e=this.labelsContainer)||void 0===e||e.fixHeightForHorizontal(t)}setPanelValues(e){var t;null===(t=this.panel)||void 0===t||t.setValues(e)}updatePanelFrom(e){var t;null===(t=this.panel)||void 0===t||t.updateFrom(e)}updatePanelTo(e){var t;null===(t=this.panel)||void 0===t||t.updateTo(e)}updatePanelScaleIntervals(e){var t;null===(t=this.panel)||void 0===t||t.updateScaleIntervals(e)}updatePanelStep(e){var t;null===(t=this.panel)||void 0===t||t.updateStep(e)}changeLeftValueFromOutside(e){this.notify("viewSetLeftFromOutside",e)}changeRightValueFromOutside(e){this.notify("viewSetRightFromOutside",e)}changeMinFromOutside(e){this.notify("viewSetMin",e)}changeMaxFromOutside(e){this.notify("viewSetMax",e)}changeStepFromOutside(e){this.notify("viewSetStep",e)}changeOrientationFromOutside(){var e,t,i,a,s,n,l,h,r,o;if(!this.vertical)return this.vertical=!0,this.destroy(),this.render(),this.thumbLeft.setIndent("left",0),null===(e=this.thumbRight)||void 0===e||e.setIndent("left",0),this.range.setIndent("left",0),this.range.setIndent("right",0),this.range.resetTopIndent(),this.range.resetWidth(),null===(t=this.valueLabelLeft)||void 0===t||t.setIndent("left","unset"),null===(i=this.valueLabelRight)||void 0===i||i.setIndent("left","unset"),null===(a=this.valueLabelCommon)||void 0===a||a.setIndent("left","unset"),null===(s=this.scale)||void 0===s||s.handleSwitchFromHorizontalToVertical(),void this.notify("viewToggleOrientation");this.vertical&&(this.vertical=!1,this.component.classList.remove("range-slider_vertical"),this.destroy(),this.render(),this.thumbLeft.setIndent("top",0),null===(n=this.thumbRight)||void 0===n||n.setIndent("top",0),this.range.setIndent("bottom",0),this.range.setIndent("top",0),this.range.resetHeight(),null===(l=this.valueLabelLeft)||void 0===l||l.setIndent("top","unset"),null===(h=this.valueLabelRight)||void 0===h||h.setIndent("top","unset"),null===(r=this.valueLabelCommon)||void 0===r||r.setIndent("top","unset"),null===(o=this.scale)||void 0===o||o.handleSwitchFromVerticalToHorizontal(),this.notify("viewToggleOrientation"))}toggleRangeFromOutside(){const e=!this.isRange();e&&(this.destroy(),this.thumbRight=new r(this,"right"),this.valueLabelLeft&&(this.valueLabelRight=new d("range-slider__value-label range-slider__value-label_right"),this.valueLabelCommon=new d("range-slider__value-label range-slider__value-label_common")),this.vertical||this.range.resetWidth(),this.vertical&&this.range.resetHeight(),this.render()),e||(this.vertical&&this.range.resetTopIndent(),this.destroy(),this.thumbRight=void 0,this.render()),this.notify("viewToggleRange")}toggleScaleFromOutside(){this.notify("viewToggleScale")}changeScaleIntervals(e){e<=0||(this.scaleIntervals=Math.floor(e),this.removeScale(),this.notify("viewSetScaleIntervals"))}toggleValueLabels(){var e,t,i;if(this.valueLabelLeft)return this.valueLabelLeft.remove(),null===(e=this.valueLabelRight)||void 0===e||e.remove(),null===(t=this.valueLabelCommon)||void 0===t||t.remove(),this.valueLabelLeft=void 0,this.valueLabelRight=void 0,this.valueLabelCommon=void 0,this.minLabel&&(this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical()),void(this.minLabel||(null===(i=this.labelsContainer)||void 0===i||i.remove(),this.labelsContainer=void 0));this.valueLabelLeft||(this.valueLabelLeft=new d("range-slider__value-label range-slider__value-label_left"),this.labelsContainer||(this.labelsContainer=new u,this.slider.before(this.labelsContainer.getComponent())),this.labelsContainer.append(this.valueLabelLeft.getComponent()),this.isRange()&&(this.valueLabelRight=new d("range-slider__value-label range-slider__value-label_right"),this.valueLabelCommon=new d("range-slider__value-label range-slider__value-label_common"),this.labelsContainer.append(this.valueLabelRight.getComponent(),this.valueLabelCommon.getComponent())),this.notify("viewAddValueLabels"),this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical())}toggleMinMaxLabels(){var e,t;if(this.minLabel)return this.minLabel.remove(),null===(e=this.maxLabel)||void 0===e||e.remove(),this.minLabel=void 0,this.maxLabel=void 0,this.valueLabelLeft&&(this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical()),void(this.valueLabelLeft||(null===(t=this.labelsContainer)||void 0===t||t.remove(),this.labelsContainer=void 0));this.minLabel||(this.minLabel=new d("range-slider__min-max-label range-slider__min-max-label_left"),this.maxLabel=new d("range-slider__min-max-label range-slider__min-max-label_right"),this.labelsContainer||(this.labelsContainer=new u,this.slider.before(this.labelsContainer.getComponent())),this.labelsContainer.append(this.minLabel.getComponent(),this.maxLabel.getComponent()),this.notify("viewAddMinMaxLabels"),this.vertical||this.fixLabelsContainerHeightForHorizontal(),this.vertical&&this.fixLabelsContainerWidthForVertical())}hasLabels(){return!(!this.valueLabelLeft&&!this.minLabel)}hasScale(){return!!this.scale}hasMinMaxLabels(){return!!this.maxLabel}hasValueLabels(){return!!this.valueLabelLeft}hasPanel(){return!!this.panel}isRange(){return!!this.thumbRight}isVertical(){return!!this.vertical}getTrackWidth(){return this.track.getWidth()}getTrackHeight(){return this.track.getHeight()}render(){const e=new DocumentFragment;this.track.append(this.range.getComponent()),this.slider.append(this.track.getComponent(),this.thumbLeft.getComponent()),e.append(this.slider,this.input.getComponent()),this.isRange()?this.slider.append(this.thumbRight.getComponent()):(this.vertical||this.range.setIndent("left",0),this.vertical&&this.range.setIndent("bottom",0)),this.minLabel&&this.maxLabel&&this.labelsContainer.append(this.minLabel.getComponent(),this.maxLabel.getComponent()),this.valueLabelLeft&&(this.labelsContainer.append(this.valueLabelLeft.getComponent()),this.isRange()&&this.labelsContainer.append(this.valueLabelRight.getComponent(),this.valueLabelCommon.getComponent())),this.labelsContainer&&this.slider.before(this.labelsContainer.getComponent()),this.vertical&&this.component.classList.add("range-slider_vertical"),this.panel&&e.append(this.panel.getComponent()),this.scale&&this.slider.after(this.scale.getComponent()),this.component.append(e)}destroy(){this.labelsContainer&&[...this.labelsContainer.getComponent().children].forEach((e=>{e.remove()})),[...this.slider.children].forEach((e=>{e.remove()})),[...this.component.children].forEach((e=>{e.remove()}))}mergeLabels(){var e,t,i,a,s;if(null===(e=this.valueLabelLeft)||void 0===e||e.setOpacity(0),null===(t=this.valueLabelRight)||void 0===t||t.setOpacity(0),null===(i=this.valueLabelCommon)||void 0===i||i.setOpacity(1),!this.vertical){const e=parseInt(this.thumbRight.getLeftIndent(),10)-parseInt(this.thumbLeft.getLeftIndent(),10);null===(a=this.valueLabelCommon)||void 0===a||a.setIndent("left",`${parseInt(this.valueLabelLeft.getLeftIndent(),10)+e/2}%`)}if(this.vertical){const e=parseInt(this.thumbRight.getTopIndent(),10)-parseInt(this.thumbLeft.getTopIndent(),10);null===(s=this.valueLabelCommon)||void 0===s||s.setIndent("top",parseInt(this.valueLabelRight.getTopIndent(),10)-e/2+"%")}}splitLabels(){var e,t,i;null===(e=this.valueLabelCommon)||void 0===e||e.setOpacity(0),null===(t=this.valueLabelLeft)||void 0===t||t.setOpacity(1),null===(i=this.valueLabelRight)||void 0===i||i.setOpacity(1)}isTwoLabelsClose(e,t){if(this.vertical)return e.getBoundingClientRect().top-t.getBoundingClientRect().bottom<3;const i=e.getBoundingClientRect().right;return t.getBoundingClientRect().left-i<3}isTwoValueLabelsClose(){return!(!this.valueLabelLeft||!this.valueLabelRight)&&this.isTwoLabelsClose(this.valueLabelLeft,this.valueLabelRight)}isLeftValueLabelCloseToMinLabel(){return!(!this.minLabel||!this.valueLabelLeft)&&this.isTwoLabelsClose(this.minLabel,this.valueLabelLeft)}isLeftValueLabelCloseToMaxLabel(){return!(!this.valueLabelLeft||!this.maxLabel)&&this.isTwoLabelsClose(this.valueLabelLeft,this.maxLabel)}isRightValueLabelCloseToMaxLabel(){return!(!this.valueLabelRight||!this.maxLabel)&&this.isTwoLabelsClose(this.valueLabelRight,this.maxLabel)}whichThumbIsNearer(e,t){const i=this.thumbLeft.getBoundingClientRect(),a=this.thumbRight.getBoundingClientRect(),s=this.track.getBoundingClientRect();let n=0,l=0;if(!this.vertical){const t=i.left+i.width/2-s.left,h=a.left+a.width/2-s.left;n=Math.abs(e-t),l=Math.abs(e-h)}if(this.vertical){const e=i.top+i.height/2-s.top,h=a.top+a.height/2-s.top;n=Math.abs(t-e),l=Math.abs(t-h)}return n<=l?"left":"right"}addSmoothTransition(e="left"){var t,i;"left"===e&&(this.thumbLeft.getComponent().classList.add("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.add("range-slider__range_smooth-transition"),null===(t=this.valueLabelLeft)||void 0===t||t.getComponent().classList.add("range-slider__value-label_smooth-transition")),"right"===e&&(this.thumbRight.getComponent().classList.add("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.add("range-slider__range_smooth-transition"),null===(i=this.valueLabelRight)||void 0===i||i.getComponent().classList.add("range-slider__value-label_smooth-transition"))}removeSmoothTransition(e="left"){var t,i;"left"===e&&(this.thumbLeft.getComponent().classList.remove("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.remove("range-slider__range_smooth-transition"),null===(t=this.valueLabelLeft)||void 0===t||t.getComponent().classList.remove("range-slider__value-label_smooth-transition")),"right"===e&&(this.thumbRight.getComponent().classList.remove("range-slider__thumb_smooth-transition"),this.range.getComponent().classList.remove("range-slider__range_smooth-transition"),null===(i=this.valueLabelRight)||void 0===i||i.getComponent().classList.remove("range-slider__value-label_smooth-transition"))}collectLabels(){const e=[];return this.minLabel&&this.maxLabel&&(e.push(this.minLabel.getComponent()),e.push(this.maxLabel.getComponent())),this.valueLabelLeft&&e.push(this.valueLabelLeft.getComponent()),this.valueLabelRight&&e.push(this.valueLabelRight.getComponent()),e}};class v{constructor(e,t){this.model=e,this.view=t,this.initViewValues(),this.model.subscribe(this),this.view.subscribe(this)}inform(e,t=null){switch(e){case"viewInputLeft":"number"==typeof t&&this.handleViewInputLeft(t);break;case"viewInputRight":"number"==typeof t&&this.handleViewInputRight(t);break;case"viewSetLeftFromOutside":"number"==typeof t&&this.handleViewSetLeftFromOutside(t);break;case"viewSetRightFromOutside":"number"==typeof t&&this.handleViewSetRightFromOutside(t);break;case"viewSetMin":"number"==typeof t&&this.handleViewSetMin(t);break;case"viewSetMax":"number"==typeof t&&this.handleViewSetMax(t);break;case"viewSetStep":"number"==typeof t&&this.handleViewSetStep(t);break;case"viewToggleOrientation":this.handleViewToggleOrientation();break;case"viewToggleRange":this.handleViewToggleRange();break;case"viewToggleScale":this.handleViewToggleScale();break;case"viewSetScaleIntervals":this.handleViewSetScaleIntervals();break;case"viewAddValueLabels":this.handleViewAddValueLabels();break;case"viewAddMinMaxLabels":this.handleViewAddMinMaxLabels();break;case"modelSetLeft":this.handleModelSetLeft();break;case"modelSetRight":this.handleModelSetRight();break;case"modelSetMin":this.handleModelSetMin();break;case"modelSetMax":this.handleModelSetMax();break;case"modelToggleRange":this.handleModelToggleRange();break;case"modelSetStep":this.handleModelSetStep()}}static removeCalcInaccuracy(e){return Number(e.toFixed(10))}initViewValues(){var e,t;const{model:i}=this,{view:a}=this,s=i.getMin(),n=i.getMax(),l=i.getLeftValue(),h=i.getRightValue();a.setMinValue(s),a.setMaxValue(n),this.passLeftValueToView(l),a.isRange()&&void 0!==h?(this.passRightValueToView(h),a.updateInput(l,h)):a.updateInput(l),a.hasScale()&&(a.removeScale(),a.addScale(s,n)),this.view.hasLabels()&&(a.isVertical()||a.fixLabelsContainerHeightForHorizontal(),a.isVertical()&&a.fixLabelsContainerWidthForVertical()),a.hasPanel()&&a.setPanelValues({min:s,max:n,step:i.getStep(),from:l,to:null!=h?h:null,vertical:null!==(e=a.isVertical())&&void 0!==e&&e,range:a.isRange(),scale:a.hasScale(),scaleIntervals:null!==(t=a.getScaleIntervals())&&void 0!==t?t:null,valueLabels:a.hasValueLabels(),minMaxLabels:a.hasMinMaxLabels()})}handleViewInputLeft(e){const t=this.convertPxToValue(e);this.model.setLeftValue(t)}handleModelSetLeft(){const e=this.model.getLeftValue();this.passLeftValueToView(e),this.updateViewInput(),this.view.hasPanel()&&this.view.updatePanelFrom(e)}handleViewInputRight(e){const t=this.convertPxToValue(e);this.model.setRightValue(t)}handleModelSetRight(){const e=this.model.getRightValue();this.passRightValueToView(e),this.updateViewInput(),this.view.hasPanel()&&this.view.updatePanelTo(e)}passLeftValueToView(e){const t=this.convertValueToPercent(e);this.view.setLeftValue(e,t)}passRightValueToView(e){const t=this.convertValueToPercent(e);this.view.setRightValue(e,t)}updateViewInput(){this.view.isRange()||this.view.updateInput(this.model.getLeftValue()),this.view.isRange()&&this.view.updateInput(this.model.getLeftValue(),this.model.getRightValue())}convertValueToPercent(e){const t=this.model.getMin();let i=(e-t)/(this.model.getMax()-t)*100;return i=v.removeCalcInaccuracy(i),i}convertPxToValue(e){let t=0;this.view.isVertical()||(t=100*e/this.view.getTrackWidth()),this.view.isVertical()&&(t=100*e/this.view.getTrackHeight());const i=this.model.getMin();let a=t/100*(this.model.getMax()-i)+i;return a=this.fitToStep(a),a=v.removeCalcInaccuracy(a),a}fitToStep(e){let t=Math.round(e/this.model.getStep())*this.model.getStep();return t=v.removeCalcInaccuracy(t),t}handleViewSetLeftFromOutside(e){this.model.setLeftValue(e)}handleViewSetRightFromOutside(e){this.model.setRightValue(e)}handleViewSetMin(e){this.model.setMin(e)}handleModelSetMin(){this.view.setMinValue(this.model.getMin()),this.passLeftValueToView(this.model.getLeftValue());const e=this.model.getRightValue();void 0!==e&&this.passRightValueToView(e),this.view.hasScale()&&(this.view.removeScale(),this.view.addScale(this.model.getMin(),this.model.getMax()))}handleViewSetMax(e){this.model.setMax(e)}handleModelSetMax(){this.view.setMaxValue(this.model.getMax()),this.passLeftValueToView(this.model.getLeftValue());const e=this.model.getRightValue();void 0!==e&&this.passRightValueToView(e),this.view.hasScale()&&(this.view.removeScale(),this.view.addScale(this.model.getMin(),this.model.getMax()))}handleViewSetStep(e){this.model.setStep(e)}handleViewToggleOrientation(){if(this.passLeftValueToView(this.model.getLeftValue()),this.view.isRange()){const e=this.model.getRightValue();void 0!==e&&this.passRightValueToView(e)}this.view.hasLabels()&&(this.view.isVertical()||this.view.fixLabelsContainerHeightForHorizontal(),this.view.isVertical()&&this.view.fixLabelsContainerWidthForVertical())}handleViewToggleRange(){this.model.toggleRange()}handleModelToggleRange(){if(this.passLeftValueToView(this.model.getLeftValue()),this.model.isRange()){this.model.setRightValue();const e=this.model.getRightValue();void 0!==e&&(this.passRightValueToView(e),this.view.updateInput(this.model.getLeftValue(),e),this.view.hasPanel()&&this.view.updatePanelTo(e))}this.model.isRange()||(this.model.removeRightValue(),this.view.updateInput(this.model.getLeftValue()),this.view.hasPanel()&&this.view.updatePanelTo(""))}handleModelSetStep(){this.view.hasPanel()&&this.view.updatePanelStep(this.model.getStep())}handleViewToggleScale(){var e;if(!this.view.hasScale())return this.view.addScale(this.model.getMin(),this.model.getMax()),void(this.view.hasPanel()&&this.view.updatePanelScaleIntervals(null!==(e=this.view.getScaleIntervals())&&void 0!==e?e:4));this.view.hasScale()&&(this.view.removeScale(),this.view.hasPanel()&&this.view.updatePanelScaleIntervals(""))}handleViewSetScaleIntervals(){this.view.addScale(this.model.getMin(),this.model.getMax())}handleViewAddValueLabels(){if(this.passLeftValueToView(this.model.getLeftValue()),this.view.isRange()){const e=this.model.getRightValue();void 0!==e&&this.passRightValueToView(e)}}handleViewAddMinMaxLabels(){this.view.setMinValue(this.model.getMin()),this.view.setMaxValue(this.model.getMax())}}const p=v;class b{constructor(e,t){this.element=e,this.model=new class{constructor(e){this.eventManager=new a,this.min=e.min,this.max=e.max,this.leftValue=e.leftValue,this.step=e.step,e.range?(this.rightValue=e.rightValue,this.range=!0):this.range=!1}subscribe(e){this.eventManager.subscribe(e)}setLeftValue(e){e<this.min?this.leftValue=this.min:(this.isRange()||(this.leftValue=Math.min(e,this.max)),this.isRange()&&void 0!==this.rightValue&&(this.leftValue=Math.min(e,this.rightValue))),this.eventManager.notify("modelSetLeft")}setRightValue(e=this.max){this.isRange()&&(e>this.max?this.rightValue=this.max:this.rightValue=Math.max(e,this.leftValue),this.eventManager.notify("modelSetRight"))}removeRightValue(){this.rightValue=void 0}setMin(e){e>this.leftValue||(this.min=e,this.eventManager.notify("modelSetMin"))}setMax(e){!this.isRange()&&e<this.leftValue||this.isRange()&&void 0!==this.rightValue&&e<this.rightValue||(this.max=e,this.eventManager.notify("modelSetMax"))}setStep(e){e<=0||e>Math.abs(this.max-this.min)||(this.step=e,this.eventManager.notify("modelSetStep"))}toggleRange(){this.range=!this.range,this.eventManager.notify("modelToggleRange")}getMin(){return this.min}getMax(){return this.max}getLeftValue(){return this.leftValue}getRightValue(){return this.rightValue}getStep(){return this.step}isRange(){return this.range}}({min:t.min,max:t.max,leftValue:t.leftValue,rightValue:t.rightValue,range:t.range,step:t.step}),this.view=new m(e,{minMaxLabels:t.minMaxLabels,valueLabels:t.valueLabels,vertical:t.vertical,range:t.range,scale:t.scale,scaleIntervals:t.scaleIntervals,panel:t.panel}),this.presenter=new p(this.model,this.view),this.model.subscribe(this)}inform(e){switch(e){case"modelLeftSet":case"modelRightSet":this.onChange&&this.onChange(this.model.getLeftValue(),this.model.getRightValue())}}setLeftValue(e){return this.view.changeLeftValueFromOutside(e),this}setRightValue(e){return this.view.changeRightValueFromOutside(e),this}setStep(e){return this.view.changeStepFromOutside(e),this}}!function(e){const t=e,i={min:0,max:100,range:!0,leftValue:25,rightValue:75,step:1,minMaxLabels:!0,valueLabels:!0,vertical:!1,scale:!1,scaleIntervals:5,panel:!1};t.fn.rangeSlider=function(e={}){return this.each((function(){const a={min:t(this).data("min"),max:t(this).data("max"),range:t(this).data("range"),leftValue:t(this).data("leftValue"),rightValue:t(this).data("rightValue"),step:t(this).data("step"),minMaxLabels:t(this).data("minMaxLabels"),valueLabels:t(this).data("valueLabels"),vertical:t(this).data("vertical"),scale:t(this).data("scale"),scaleIntervals:t(this).data("scaleIntervals"),panel:t(this).data("panel")};let s=t.extend({},i,e,a);s=function(e){let a=t.extend({},e);return function(){function t(t){typeof e[t]!=typeof i[t]&&delete a[t]}t("min"),t("max"),t("leftValue"),t("rightValue"),t("range"),t("step"),t("minMaxLabels"),t("valueLabels"),t("vertical"),t("scale"),t("scaleIntervals"),t("panel")}(),a=t.extend({},i,a),a.min>a.max&&([a.min,a.max]=[a.max,a.min]),a.leftValue<a.min&&(a.leftValue=a.min),a.rightValue>a.max&&(a.rightValue=a.max),a.leftValue>a.max&&(a.leftValue=a.max),a.leftValue>a.rightValue&&([a.leftValue,a.rightValue]=[a.rightValue,a.leftValue]),a.step>Math.abs(a.max-a.min)&&(a.step=Math.abs(a.max-a.min)),a.scaleIntervals<1&&(a.scaleIntervals=1),Number.isInteger(a.scaleIntervals)&&(a.scaleIntervals=Math.floor(a.scaleIntervals)),a}(s),this instanceof HTMLDivElement&&t(this).data("rangeSlider",new b(this,s))}))}}(i(65638))},96553:()=>{}},e=>{e.O(0,[216],(()=>(71376,e(e.s=71376)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,