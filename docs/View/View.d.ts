import Slider from './subviews/Slider/Slider';
import Track from './subviews/Track/Track';
import Range from './subviews/Range/Range';
import Thumb from './subviews/Thumb/Thumb';
import MinMaxLabel from './subviews/MinMaxLabel/MinMaxLabel';
import ValueLabel from './subviews/ValueLabel/ValueLabel';
import Scale from './subviews/Scale/Scale';
import LabelsContainer from './subviews/LabelsContainer/LabelsContainer';
import Input from './subviews/Input/Input';
import { Panel, PanelOptions } from './subviews/Panel/Panel';
import { EventManager } from '../EventManager/EventManager';
declare type ViewOptions = {
    minMaxLabels?: boolean;
    valueLabels?: boolean;
    vertical?: boolean;
    range?: boolean;
    scale?: boolean;
    scaleIntervals?: number;
    panel?: boolean;
};
declare class View {
    component: Element;
    eventManager: EventManager;
    slider: Slider;
    track: Track;
    range: Range;
    input: Input;
    thumbLeft: Thumb;
    thumbRight?: Thumb;
    isRange: boolean;
    hasScale: boolean;
    scaleIntervals?: number;
    minLabel?: MinMaxLabel;
    maxLabel?: MinMaxLabel;
    valueLabelLeft?: ValueLabel;
    valueLabelRight?: ValueLabel;
    valueLabelCommon?: ValueLabel;
    vertical?: boolean;
    scale?: Scale;
    labelsContainer?: LabelsContainer;
    panel?: Panel;
    constructor(component: Element, options?: ViewOptions);
    setMinValue(min: number): void;
    setMaxValue(max: number): void;
    setLeftValue(value: number, percent: number): void;
    setRightValue(value: number, percent: number): void;
    updateInput(value1: number, value2?: number | null): void;
    handleLeftInput(clientX: number, clientY: number, shiftX?: number, shiftY?: number): void;
    handleRightInput(clientX: number, clientY: number, shiftX?: number, shiftY?: number): void;
    addScale(min: number, max: number, intervalsNumber: number): void;
    removeScale(): void;
    handleScaleOrTrackClick(x: number, y: number): void;
    fixLabelsContainerWidthForVertical(): void;
    fixLabelsContainerHeightForHorizontal(): void;
    setPanelValues(options: PanelOptions): void;
    updatePanelFrom(value: number): void;
    updatePanelTo(value: number | ''): void;
    updatePanelScaleIntervals(value: number | ''): void;
    updatePanelStep(value: number): void;
    changeLeftValueFromOutside(value: number): void;
    changeRightValueFromOutside(value: number): void;
    changeMinFromOutside(value: number): void;
    changeMaxFromOutside(value: number): void;
    changeStepFromOutside(value: number): void;
    changeOrientationFromOutside(): void;
    toggleRangeFromOutside(): void;
    toggleScaleFromOutside(): void;
    changeScaleIntervals(value: number): void;
    toggleValueLabels(): void;
    toggleMinMaxLabels(): void;
    hasLabels(): boolean;
    private render;
    private destroy;
    private mergeLabels;
    private splitLabels;
    private isTwoLabelsClose;
    private isTwoValueLabelsClose;
    private isLeftValueLabelCloseToMinLabel;
    private isLeftValueLabelCloseToMaxLabel;
    private isRightValueLabelCloseToMaxLabel;
    private whichThumbIsNearer;
    private addSmoothTransition;
    private removeSmoothTransition;
    private collectLabels;
}
export default View;
//# sourceMappingURL=View.d.ts.map