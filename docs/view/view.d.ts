import { Slider } from './subviews/slider/slider';
import { Track } from './subviews/track/track';
import { Range } from './subviews/range/range';
import { Thumb } from './subviews/thumb/thumb';
import { MinMaxLabel } from './subviews/minMaxLabel/minMaxLabel';
import { ValueLabel } from './subviews/valueLabel/valueLabel';
import { Scale } from './subviews/scale/scale';
import { LabelsContainer } from './subviews/labelsContainer/labelsContainer';
import { Presenter } from '../presenter/presenter';
import { Label } from './subviews/label/label';
declare type ViewOptions = {
    min?: number;
    max?: number;
    minMaxLabels?: boolean;
    valueLabel?: boolean;
    vertical?: boolean;
    range?: boolean;
    scale?: boolean;
    scaleIntervals?: number;
};
export declare class View {
    presenter: Presenter | null;
    component: Element;
    slider: Slider;
    track: Track;
    range: Range;
    thumbLeft: Thumb;
    thumbRight?: Thumb;
    isRange: boolean;
    hasScale: boolean;
    scaleIntervals?: number;
    minLabel?: MinMaxLabel;
    maxLabel?: MinMaxLabel;
    valueLabelLeft?: ValueLabel;
    valueLabelRight?: ValueLabel;
    valueLabelCommon?: ValueLabel;
    vertical?: boolean;
    scale?: Scale;
    labelsContainer?: LabelsContainer;
    constructor(component: Element, options?: ViewOptions);
    registerWith(presenter: Presenter): void;
    render(): void;
    setMinValue(min: number): void;
    setMaxValue(max: number): void;
    setLeftValue(value: number, px: number): void;
    setRightValue(value: number, px: number): void;
    mergeLabels(): void;
    splitLabels(): void;
    isTwoValueLabelsClose(): boolean | undefined;
    isLeftValueLabelCloseToMinLabel(): boolean | undefined;
    isLeftValueLabelCloseToMaxLabel(): boolean | undefined;
    isRightValueLabelCloseToMaxLabel(): boolean | undefined;
    handleLeftInput(clientX: number, clientY: number, shiftX?: number, shiftY?: number): void;
    handleRightInput(clientX: number, clientY: number, shiftX?: number, shiftY?: number): void;
    addScale(min: number, max: number, intervalsNumber: number): void;
    handleScaleOrTrackClick(x: number, y: number): void;
    whichThumbIsNearer(x: number, y: number): 'left' | 'right';
    addSmoothTransition(side?: 'left' | 'right'): void;
    removeSmoothTransition(side?: 'left' | 'right'): void;
    fixLabelsContainerWidthForVertical(): void;
    fixLabelsContainerHeightForHorizontal(): void;
    collectLabels(): Label[];
}
export {};
//# sourceMappingURL=view.d.ts.map