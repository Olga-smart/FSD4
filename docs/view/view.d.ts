import Slider from './subviews/slider/slider';
import Track from './subviews/track/track';
import Range from './subviews/range/range';
import Thumb from './subviews/thumb/thumb';
import MinMaxLabel from './subviews/minMaxLabel/minMaxLabel';
import ValueLabel from './subviews/valueLabel/valueLabel';
import Scale from './subviews/scale/scale';
import LabelsContainer from './subviews/labelsContainer/labelsContainer';
import Label from './subviews/label/label';
import Input from './subviews/input/input';
import { Panel, PanelOptions } from './subviews/panel/panel';
import { EventManager } from '../eventManager/eventManager';
declare type ViewOptions = {
    minMaxLabels?: boolean;
    valueLabels?: boolean;
    vertical?: boolean;
    range?: boolean;
    scale?: boolean;
    scaleIntervals?: number;
    panel?: boolean;
};
declare class View {
    component: Element;
    eventManager: EventManager;
    slider: Slider;
    track: Track;
    range: Range;
    input: Input;
    thumbLeft: Thumb;
    thumbRight?: Thumb;
    isRange: boolean;
    hasScale: boolean;
    scaleIntervals?: number;
    minLabel?: MinMaxLabel;
    maxLabel?: MinMaxLabel;
    valueLabelLeft?: ValueLabel;
    valueLabelRight?: ValueLabel;
    valueLabelCommon?: ValueLabel;
    vertical?: boolean;
    scale?: Scale;
    labelsContainer?: LabelsContainer;
    panel?: Panel;
    constructor(component: Element, options?: ViewOptions);
    render(): void;
    destroy(): void;
    setMinValue(min: number): void;
    setMaxValue(max: number): void;
    setLeftValue(value: number, px: number): void;
    setRightValue(value: number, px: number): void;
    updateInput(value1: number, value2?: number | null): void;
    mergeLabels(): void;
    splitLabels(): void;
    isTwoValueLabelsClose(): boolean | undefined;
    isLeftValueLabelCloseToMinLabel(): boolean | undefined;
    isLeftValueLabelCloseToMaxLabel(): boolean | undefined;
    isRightValueLabelCloseToMaxLabel(): boolean | undefined;
    handleLeftInput(clientX: number, clientY: number, shiftX?: number, shiftY?: number): void;
    handleRightInput(clientX: number, clientY: number, shiftX?: number, shiftY?: number): void;
    addScale(min: number, max: number, intervalsNumber: number): void;
    removeScale(): void;
    handleScaleOrTrackClick(x: number, y: number): void;
    whichThumbIsNearer(x: number, y: number): 'left' | 'right';
    addSmoothTransition(side?: 'left' | 'right'): void;
    removeSmoothTransition(side?: 'left' | 'right'): void;
    fixLabelsContainerWidthForVertical(): void;
    fixLabelsContainerHeightForHorizontal(): void;
    collectLabels(): Label[];
    setPanelValues(options: PanelOptions): void;
    updatePanelFrom(value: number): void;
    updatePanelTo(value: number | ''): void;
    updatePanelScaleIntervals(value: number | ''): void;
    changeLeftValueFromOutside(value: number): void;
    changeRightValueFromOutside(value: number): void;
    changeMinFromOutside(value: number): void;
    changeMaxFromOutside(value: number): void;
    changeStepFromOutside(value: number): void;
    changeOrientationFromOutside(): void;
    toggleRangeFromOutside(): void;
    toggleScaleFromOutside(): void;
    changeScaleIntervals(value: number): void;
    toggleValueLabels(): void;
    toggleMinMaxLabels(): void;
}
export default View;
//# sourceMappingURL=view.d.ts.map