import { Slider } from './subviews/slider/slider';
import { Track } from './subviews/track/track';
import { Range } from './subviews/range/range';
import { Input } from './subviews/input/input';
import { Thumb } from './subviews/thumb/thumb';
import { MinMaxLabel } from './subviews/minMaxLabel/minMaxLabel';
import { ValueLabel } from './subviews/valueLabel/valueLabel';
import { Scale } from './subviews/scale/scale';
import { Presenter } from '../presenter/presenter';
declare type ViewOptions = {
    minMaxLabels?: boolean;
    valueLabel?: boolean;
    vertical?: boolean;
    range?: boolean;
    scale?: boolean;
    scaleIntervals?: number;
};
export declare class View {
    presenter: Presenter | null;
    component: Element;
    inputLeft: Input;
    inputRight: Input;
    slider: Slider;
    track: Track;
    range: Range;
    thumbLeft: Thumb;
    thumbRight: Thumb;
    isRange: boolean;
    hasScale: boolean;
    scaleIntervals: number;
    minLabel: MinMaxLabel;
    maxLabel: MinMaxLabel;
    valueLabelLeft: ValueLabel;
    valueLabelRight: ValueLabel;
    valueLabelCommon: ValueLabel;
    vertical?: boolean;
    scale?: Scale;
    constructor(component: Element, options?: ViewOptions);
    registerWith(presenter: Presenter): void;
    setMinValue(min: number): void;
    setMaxValue(max: number): void;
    setStep(step: number): void;
    setLeftValue(value: number): void;
    setRightValue(value: number): void;
    setThumbLeftPosition(value: number): void;
    setThumbRightPosition(value: number): void;
    mergeLabels(): void;
    splitLabels(): void;
    isTwoValueLabelsClose(): boolean | undefined;
    fixMinMaxLabelsPositionForVertical(): void;
    fixValueLabelPositionForVertical(): void;
    isLeftValueLabelCloseToMinLabel(): boolean | undefined;
    isLeftValueLabelCloseToMaxLabel(): boolean | undefined;
    isRightValueLabelCloseToMaxLabel(): boolean | undefined;
    handleLeftInput(value: number): void;
    handleRightInput(value: number): void;
    handleInputMouseover(type?: 'left' | 'right'): void;
    handleInputMouseout(type?: 'left' | 'right'): void;
    handleInputMousedown(type?: 'left' | 'right'): void;
    handleInputMouseup(type?: 'left' | 'right'): void;
    addScale(min: number, max: number, intervalsNumber: number): void;
    handleScaleClick(x: number, y: number): void;
    convertСlickСoordsToValue(x: number, y: number): number;
    whichThumbIsNearer(x: number, y: number): 'left' | 'right';
    addSmoothTransition(side?: 'left' | 'right'): void;
    removeSmoothTransition(side?: 'left' | 'right'): void;
}
export {};
//# sourceMappingURL=view.d.ts.map